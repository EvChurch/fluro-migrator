{
  "openapi": "3.0.1",
  "info": {
    "title": "Rock Rest API v1",
    "version": "v1"
  },
  "servers": [
    {
      "url": "https://rock.ev.church/"
    }
  ],
  "paths": {
    "/api/Attributes": {
      "get": {
        "tags": [
          "Attributes"
        ],
        "summary": "Queryable GET endpoint",
        "operationId": "GETapi_Attributes",
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.Attribute"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Attributes"
        ],
        "summary": "Posts the specified value.",
        "operationId": "POSTapi_Attributes",
        "requestBody": {
          "description": "The value.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Rock.Model.Attribute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "value"
      }
    },
    "/api/Attributes/{id}": {
      "get": {
        "tags": [
          "Attributes"
        ],
        "summary": "GET endpoint to get a single record",
        "operationId": "GETapi_Attributes_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the record",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rock.Model.Attribute"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Attributes"
        ],
        "summary": "Puts the specified identifier.",
        "operationId": "PUTapi_Attributes_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The value.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Rock.Model.Attribute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "value"
      },
      "delete": {
        "tags": [
          "Attributes"
        ],
        "summary": "Deletes the specified identifier.",
        "operationId": "DELETEapi_Attributes_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "Attributes"
        ],
        "summary": "PATCH endpoint. Use this to update a subset of the properties of the record",
        "operationId": "PATCHapi_Attributes_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The values.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "values"
      }
    },
    "/api/Attributes/AttributeValue/{id}": {
      "post": {
        "tags": [
          "Attributes"
        ],
        "summary": "POST an attribute value. Use this to set an attribute value for the record",
        "operationId": "POSTapi_Attributes_AttributeValue_idattributeKeyattributeKeyattributeValueattributeValue",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeKey",
            "in": "query",
            "description": "The attribute key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeValue",
            "in": "query",
            "description": "The attribute value.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Attributes"
        ],
        "summary": "DELETE to delete the specified attribute value for the record",
        "operationId": "DELETEapi_Attributes_AttributeValue_idattributeKeyattributeKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeKey",
            "in": "query",
            "description": "The attribute key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/Attributes/DataView/{id}": {
      "get": {
        "tags": [
          "Attributes"
        ],
        "summary": "Gets a list of objects represented by the selected data view",
        "operationId": "GETapi_Attributes_DataView_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.Attribute"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/attributes/flush": {
      "put": {
        "tags": [
          "Attributes"
        ],
        "summary": "Flushes all global attributes from cache. Usually no need to do this since global attribute cache is managed automatically.",
        "operationId": "PUTapi_attributes_flush",
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      }
    },
    "/api/attributes/flush/{id}": {
      "put": {
        "tags": [
          "Attributes"
        ],
        "summary": "Flushes an attributes from cache. Usually no need to do this since attribute cache is managed automatically.",
        "operationId": "PUTapi_attributes_flush_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      }
    },
    "/api/Attributes/FollowedItems": {
      "get": {
        "tags": [
          "Attributes"
        ],
        "operationId": "GETapi_Attributes_FollowedItemspersonIdpersonIdpersonAliasIdpersonAliasId",
        "parameters": [
          {
            "name": "personId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "personAliasId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.Attribute"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Attributes/GetByAttributeValue": {
      "get": {
        "tags": [
          "Attributes"
        ],
        "operationId": "GETapi_Attributes_GetByAttributeValueattributeIdattributeIdattributeKeyattributeKeyvaluevaluecaseSensitivecaseSensitive",
        "parameters": [
          {
            "name": "attributeId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeKey",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseSensitive",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.Attribute"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Attributes/InDataView/{dataViewId}/{entityId}": {
      "get": {
        "tags": [
          "Attributes"
        ],
        "summary": "Determines if the entity id is in the data view",
        "operationId": "GETapi_Attributes_InDataView_dataViewId_entityId",
        "parameters": [
          {
            "name": "dataViewId",
            "in": "path",
            "description": "The data view identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "entityId",
            "in": "path",
            "description": "The entity identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/Attributes/LaunchWorkflow/{id}": {
      "post": {
        "tags": [
          "Attributes"
        ],
        "summary": "Launches a workflow. And optionally passes the entity with selected id as the entity for the workflow",
        "operationId": "POSTapi_Attributes_LaunchWorkflow_idworkflowTypeIdworkflowTypeIdworkflowNameworkflowName",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the entity to pass to workflow, if entity cannot be loaded workflow will still be launched but without passing an entity",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workflowTypeId",
            "in": "query",
            "description": "The workflow type identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workflowName",
            "in": "query",
            "description": "Name of the workflow.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Optional list of workflow values to set.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "workflowAttributeValues"
      }
    },
    "/api/Attributes/SetContext/{id}": {
      "put": {
        "tags": [
          "Attributes"
        ],
        "summary": "Sets the Context Cookie to the specified record. Use this to set the Campus Context, Group Context, etc",
        "operationId": "PUTapi_Attributes_SetContext_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Attributes"
        ],
        "summary": "Sets the Context Cookie to the specified record. Use this to set the Campus Context, Group Context, etc",
        "operationId": "OPTIONSapi_Attributes_SetContext_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/Campuses": {
      "get": {
        "tags": [
          "Campuses"
        ],
        "summary": "Queryable GET endpoint",
        "operationId": "GETapi_Campuses",
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.Campus"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Campuses"
        ],
        "summary": "POST endpoint. Use this to add a record",
        "operationId": "POSTapi_Campuses",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Rock.Model.Campus"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "value"
      }
    },
    "/api/Campuses/{id}": {
      "get": {
        "tags": [
          "Campuses"
        ],
        "summary": "GET endpoint to get a single record",
        "operationId": "GETapi_Campuses_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the record",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rock.Model.Campus"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Campuses"
        ],
        "summary": "PUT endpoint. Use this to update a record",
        "operationId": "PUTapi_Campuses_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Rock.Model.Campus"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "value"
      },
      "delete": {
        "tags": [
          "Campuses"
        ],
        "summary": "DELETE endpoint. To delete the record",
        "operationId": "DELETEapi_Campuses_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "Campuses"
        ],
        "summary": "PATCH endpoint. Use this to update a subset of the properties of the record",
        "operationId": "PATCHapi_Campuses_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The values.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "values"
      }
    },
    "/api/Campuses/AttributeValue/{id}": {
      "post": {
        "tags": [
          "Campuses"
        ],
        "summary": "POST an attribute value. Use this to set an attribute value for the record",
        "operationId": "POSTapi_Campuses_AttributeValue_idattributeKeyattributeKeyattributeValueattributeValue",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeKey",
            "in": "query",
            "description": "The attribute key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeValue",
            "in": "query",
            "description": "The attribute value.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Campuses"
        ],
        "summary": "DELETE to delete the specified attribute value for the record",
        "operationId": "DELETEapi_Campuses_AttributeValue_idattributeKeyattributeKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeKey",
            "in": "query",
            "description": "The attribute key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/Campuses/DataView/{id}": {
      "get": {
        "tags": [
          "Campuses"
        ],
        "summary": "Gets a list of objects represented by the selected data view",
        "operationId": "GETapi_Campuses_DataView_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.Campus"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Campuses/FollowedItems": {
      "get": {
        "tags": [
          "Campuses"
        ],
        "operationId": "GETapi_Campuses_FollowedItemspersonIdpersonIdpersonAliasIdpersonAliasId",
        "parameters": [
          {
            "name": "personId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "personAliasId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.Campus"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Campuses/GetByAttributeValue": {
      "get": {
        "tags": [
          "Campuses"
        ],
        "operationId": "GETapi_Campuses_GetByAttributeValueattributeIdattributeIdattributeKeyattributeKeyvaluevaluecaseSensitivecaseSensitive",
        "parameters": [
          {
            "name": "attributeId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeKey",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseSensitive",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.Campus"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Campuses/InDataView/{dataViewId}/{entityId}": {
      "get": {
        "tags": [
          "Campuses"
        ],
        "summary": "Determines if the entity id is in the data view",
        "operationId": "GETapi_Campuses_InDataView_dataViewId_entityId",
        "parameters": [
          {
            "name": "dataViewId",
            "in": "path",
            "description": "The data view identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "entityId",
            "in": "path",
            "description": "The entity identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/Campuses/LaunchWorkflow/{id}": {
      "post": {
        "tags": [
          "Campuses"
        ],
        "summary": "Launches a workflow. And optionally passes the entity with selected id as the entity for the workflow",
        "operationId": "POSTapi_Campuses_LaunchWorkflow_idworkflowTypeIdworkflowTypeIdworkflowNameworkflowName",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the entity to pass to workflow, if entity cannot be loaded workflow will still be launched but without passing an entity",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workflowTypeId",
            "in": "query",
            "description": "The workflow type identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workflowName",
            "in": "query",
            "description": "Name of the workflow.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Optional list of workflow values to set.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "workflowAttributeValues"
      }
    },
    "/api/Campuses/SetContext/{id}": {
      "put": {
        "tags": [
          "Campuses"
        ],
        "summary": "Sets the Context Cookie to the specified record. Use this to set the Campus Context, Group Context, etc",
        "operationId": "PUTapi_Campuses_SetContext_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Campuses"
        ],
        "summary": "Sets the Context Cookie to the specified record. Use this to set the Campus Context, Group Context, etc",
        "operationId": "OPTIONSapi_Campuses_SetContext_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/DefinedTypes": {
      "get": {
        "tags": [
          "DefinedTypes"
        ],
        "summary": "Queryable GET endpoint",
        "operationId": "GETapi_DefinedTypes",
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.DefinedType"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "DefinedTypes"
        ],
        "summary": "POST endpoint. Use this to add a record",
        "operationId": "POSTapi_DefinedTypes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Rock.Model.DefinedType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "value"
      }
    },
    "/api/DefinedTypes/{id}": {
      "get": {
        "tags": [
          "DefinedTypes"
        ],
        "summary": "GET endpoint to get a single record",
        "operationId": "GETapi_DefinedTypes_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the record",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rock.Model.DefinedType"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "DefinedTypes"
        ],
        "summary": "PUT endpoint. Use this to update a record",
        "operationId": "PUTapi_DefinedTypes_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Rock.Model.DefinedType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "value"
      },
      "delete": {
        "tags": [
          "DefinedTypes"
        ],
        "summary": "DELETE endpoint. To delete the record",
        "operationId": "DELETEapi_DefinedTypes_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "DefinedTypes"
        ],
        "summary": "PATCH endpoint. Use this to update a subset of the properties of the record",
        "operationId": "PATCHapi_DefinedTypes_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The values.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "values"
      }
    },
    "/api/DefinedTypes/AttributeValue/{id}": {
      "post": {
        "tags": [
          "DefinedTypes"
        ],
        "summary": "POST an attribute value. Use this to set an attribute value for the record",
        "operationId": "POSTapi_DefinedTypes_AttributeValue_idattributeKeyattributeKeyattributeValueattributeValue",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeKey",
            "in": "query",
            "description": "The attribute key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeValue",
            "in": "query",
            "description": "The attribute value.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DefinedTypes"
        ],
        "summary": "DELETE to delete the specified attribute value for the record",
        "operationId": "DELETEapi_DefinedTypes_AttributeValue_idattributeKeyattributeKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeKey",
            "in": "query",
            "description": "The attribute key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/DefinedTypes/DataView/{id}": {
      "get": {
        "tags": [
          "DefinedTypes"
        ],
        "summary": "Gets a list of objects represented by the selected data view",
        "operationId": "GETapi_DefinedTypes_DataView_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.DefinedType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/DefinedTypes/FollowedItems": {
      "get": {
        "tags": [
          "DefinedTypes"
        ],
        "operationId": "GETapi_DefinedTypes_FollowedItemspersonIdpersonIdpersonAliasIdpersonAliasId",
        "parameters": [
          {
            "name": "personId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "personAliasId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.DefinedType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/DefinedTypes/GetByAttributeValue": {
      "get": {
        "tags": [
          "DefinedTypes"
        ],
        "operationId": "GETapi_DefinedTypes_GetByAttributeValueattributeIdattributeIdattributeKeyattributeKeyvaluevaluecaseSensitivecaseSensitive",
        "parameters": [
          {
            "name": "attributeId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeKey",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseSensitive",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.DefinedType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/DefinedTypes/InDataView/{dataViewId}/{entityId}": {
      "get": {
        "tags": [
          "DefinedTypes"
        ],
        "summary": "Determines if the entity id is in the data view",
        "operationId": "GETapi_DefinedTypes_InDataView_dataViewId_entityId",
        "parameters": [
          {
            "name": "dataViewId",
            "in": "path",
            "description": "The data view identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "entityId",
            "in": "path",
            "description": "The entity identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/DefinedTypes/LaunchWorkflow/{id}": {
      "post": {
        "tags": [
          "DefinedTypes"
        ],
        "summary": "Launches a workflow. And optionally passes the entity with selected id as the entity for the workflow",
        "operationId": "POSTapi_DefinedTypes_LaunchWorkflow_idworkflowTypeIdworkflowTypeIdworkflowNameworkflowName",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the entity to pass to workflow, if entity cannot be loaded workflow will still be launched but without passing an entity",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workflowTypeId",
            "in": "query",
            "description": "The workflow type identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workflowName",
            "in": "query",
            "description": "Name of the workflow.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Optional list of workflow values to set.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "workflowAttributeValues"
      }
    },
    "/api/DefinedTypes/SetContext/{id}": {
      "put": {
        "tags": [
          "DefinedTypes"
        ],
        "summary": "Sets the Context Cookie to the specified record. Use this to set the Campus Context, Group Context, etc",
        "operationId": "PUTapi_DefinedTypes_SetContext_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "DefinedTypes"
        ],
        "summary": "Sets the Context Cookie to the specified record. Use this to set the Campus Context, Group Context, etc",
        "operationId": "OPTIONSapi_DefinedTypes_SetContext_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/DefinedValues": {
      "get": {
        "tags": [
          "DefinedValues"
        ],
        "summary": "Queryable GET endpoint",
        "operationId": "GETapi_DefinedValues",
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.DefinedValue"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "DefinedValues"
        ],
        "summary": "POST endpoint. Use this to add a record",
        "operationId": "POSTapi_DefinedValues",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Rock.Model.DefinedValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "value"
      }
    },
    "/api/DefinedValues/{id}": {
      "get": {
        "tags": [
          "DefinedValues"
        ],
        "summary": "GET endpoint to get a single record",
        "operationId": "GETapi_DefinedValues_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the record",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rock.Model.DefinedValue"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "DefinedValues"
        ],
        "summary": "PUT endpoint. Use this to update a record",
        "operationId": "PUTapi_DefinedValues_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Rock.Model.DefinedValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "value"
      },
      "delete": {
        "tags": [
          "DefinedValues"
        ],
        "summary": "DELETE endpoint. To delete the record",
        "operationId": "DELETEapi_DefinedValues_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "DefinedValues"
        ],
        "summary": "PATCH endpoint. Use this to update a subset of the properties of the record",
        "operationId": "PATCHapi_DefinedValues_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The values.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "values"
      }
    },
    "/api/DefinedValues/AttributeValue/{id}": {
      "post": {
        "tags": [
          "DefinedValues"
        ],
        "summary": "POST an attribute value. Use this to set an attribute value for the record",
        "operationId": "POSTapi_DefinedValues_AttributeValue_idattributeKeyattributeKeyattributeValueattributeValue",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeKey",
            "in": "query",
            "description": "The attribute key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeValue",
            "in": "query",
            "description": "The attribute value.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DefinedValues"
        ],
        "summary": "DELETE to delete the specified attribute value for the record",
        "operationId": "DELETEapi_DefinedValues_AttributeValue_idattributeKeyattributeKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeKey",
            "in": "query",
            "description": "The attribute key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/DefinedValues/DataView/{id}": {
      "get": {
        "tags": [
          "DefinedValues"
        ],
        "summary": "Gets a list of objects represented by the selected data view",
        "operationId": "GETapi_DefinedValues_DataView_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.DefinedValue"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/DefinedValues/FollowedItems": {
      "get": {
        "tags": [
          "DefinedValues"
        ],
        "operationId": "GETapi_DefinedValues_FollowedItemspersonIdpersonIdpersonAliasIdpersonAliasId",
        "parameters": [
          {
            "name": "personId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "personAliasId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.DefinedValue"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/DefinedValues/GetByAttributeValue": {
      "get": {
        "tags": [
          "DefinedValues"
        ],
        "operationId": "GETapi_DefinedValues_GetByAttributeValueattributeIdattributeIdattributeKeyattributeKeyvaluevaluecaseSensitivecaseSensitive",
        "parameters": [
          {
            "name": "attributeId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeKey",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseSensitive",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.DefinedValue"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/DefinedValues/InDataView/{dataViewId}/{entityId}": {
      "get": {
        "tags": [
          "DefinedValues"
        ],
        "summary": "Determines if the entity id is in the data view",
        "operationId": "GETapi_DefinedValues_InDataView_dataViewId_entityId",
        "parameters": [
          {
            "name": "dataViewId",
            "in": "path",
            "description": "The data view identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "entityId",
            "in": "path",
            "description": "The entity identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/DefinedValues/LaunchWorkflow/{id}": {
      "post": {
        "tags": [
          "DefinedValues"
        ],
        "summary": "Launches a workflow. And optionally passes the entity with selected id as the entity for the workflow",
        "operationId": "POSTapi_DefinedValues_LaunchWorkflow_idworkflowTypeIdworkflowTypeIdworkflowNameworkflowName",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the entity to pass to workflow, if entity cannot be loaded workflow will still be launched but without passing an entity",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workflowTypeId",
            "in": "query",
            "description": "The workflow type identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workflowName",
            "in": "query",
            "description": "Name of the workflow.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Optional list of workflow values to set.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "workflowAttributeValues"
      }
    },
    "/api/DefinedValues/SetContext/{id}": {
      "put": {
        "tags": [
          "DefinedValues"
        ],
        "summary": "Sets the Context Cookie to the specified record. Use this to set the Campus Context, Group Context, etc",
        "operationId": "PUTapi_DefinedValues_SetContext_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "DefinedValues"
        ],
        "summary": "Sets the Context Cookie to the specified record. Use this to set the Campus Context, Group Context, etc",
        "operationId": "OPTIONSapi_DefinedValues_SetContext_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/Groups": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Queryable GET endpoint",
        "operationId": "GETapi_Groups",
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.Group"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "POST endpoint. Use this to add a record",
        "operationId": "POSTapi_Groups",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Rock.Model.Group"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "value"
      }
    },
    "/api/Groups/{id}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "GET endpoint to get a single record",
        "operationId": "GETapi_Groups_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the record",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rock.Model.Group"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Groups"
        ],
        "summary": "PUT endpoint. Use this to update a record",
        "operationId": "PUTapi_Groups_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Rock.Model.Group"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "value"
      },
      "delete": {
        "tags": [
          "Groups"
        ],
        "summary": "DELETE endpoint. To delete the record",
        "operationId": "DELETEapi_Groups_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "Groups"
        ],
        "summary": "PATCH endpoint. Use this to update a subset of the properties of the record",
        "operationId": "PATCHapi_Groups_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The values.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "values"
      }
    },
    "/api/Groups/AttributeValue/{id}": {
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "POST an attribute value. Use this to set an attribute value for the record",
        "operationId": "POSTapi_Groups_AttributeValue_idattributeKeyattributeKeyattributeValueattributeValue",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeKey",
            "in": "query",
            "description": "The attribute key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeValue",
            "in": "query",
            "description": "The attribute value.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Groups"
        ],
        "summary": "DELETE to delete the specified attribute value for the record",
        "operationId": "DELETEapi_Groups_AttributeValue_idattributeKeyattributeKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeKey",
            "in": "query",
            "description": "The attribute key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/Groups/ByLatLong": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Gets a list of groups surrounding the specified lat/long, optionally limited to the specified geofenceGroupTypeId\r\nIf geofenceGroupTypeId is specified, the list of GeoFence groups will be returned with the groups as child groups of that geofence group.",
        "operationId": "GETapi_Groups_ByLatLonggroupTypeIdgroupTypeIdlatitudelatitudelongitudelongitudesortByDistancesortByDistancemaxDistanceMilesmaxDistanceMilesgeofenceGroupTypeIdgeofenceGroupTypeId",
        "parameters": [
          {
            "name": "groupTypeId",
            "in": "query",
            "description": "The group type identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "latitude",
            "in": "query",
            "description": "The latitude.",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "longitude",
            "in": "query",
            "description": "The longitude.",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "sortByDistance",
            "in": "query",
            "description": "The sort by distance.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "maxDistanceMiles",
            "in": "query",
            "description": "The maximum distance miles.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "geofenceGroupTypeId",
            "in": "query",
            "description": "The geofence group type identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {}
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Groups/ByLocation": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Gets a list of groups surrounding the specified the location, optionally limited to the specified geofenceGroupTypeId\r\nIf geofenceGroupTypeId is specified, the list of GeoFence groups will be returned with the groups as child groups of that geofence group.",
        "operationId": "GETapi_Groups_ByLocationgroupTypeIdgroupTypeIdlocationIdlocationIdsortByDistancesortByDistancemaxDistanceMilesmaxDistanceMilesgeofenceGroupTypeIdgeofenceGroupTypeId",
        "parameters": [
          {
            "name": "groupTypeId",
            "in": "query",
            "description": "The group type identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "The location identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortByDistance",
            "in": "query",
            "description": "if set to true [sort by distance].",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "maxDistanceMiles",
            "in": "query",
            "description": "The maximum distance miles.",
            "schema": {
              "type": "number",
              "format": "double"
            }
          },
          {
            "name": "geofenceGroupTypeId",
            "in": "query",
            "description": "The geofence group type identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {}
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Groups/DataView/{id}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Gets a list of objects represented by the selected data view",
        "operationId": "GETapi_Groups_DataView_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.Group"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Groups/FollowedItems": {
      "get": {
        "tags": [
          "Groups"
        ],
        "operationId": "GETapi_Groups_FollowedItemspersonIdpersonIdpersonAliasIdpersonAliasId",
        "parameters": [
          {
            "name": "personId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "personAliasId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.Group"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Groups/GetByAttributeValue": {
      "get": {
        "tags": [
          "Groups"
        ],
        "operationId": "GETapi_Groups_GetByAttributeValueattributeIdattributeIdattributeKeyattributeKeyvaluevaluecaseSensitivecaseSensitive",
        "parameters": [
          {
            "name": "attributeId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeKey",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseSensitive",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.Group"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Groups/GetChildren/{id}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Gets the children.",
        "operationId": "GETapi_Groups_GetChildren_idrootGroupIdrootGroupIdlimitToSecurityRoleGroupslimitToSecurityRoleGroupsincludedGroupTypeIdsincludedGroupTypeIdsexcludedGroupTypeIdsexcludedGroupTypeIdsincludeInactiveGroupsincludeInactiveGroupscountsTypecountsTypecampusIdcampusIdincludeNoCampusincludeNoCampuslimitToPubliclimitToPubliclimitToSchedulingEnabledlimitToSchedulingEnabledlimitToRSVPEnabledlimitToRSVPEnabled",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "rootGroupId",
            "in": "query",
            "description": "The root group identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limitToSecurityRoleGroups",
            "in": "query",
            "description": "if set to true [limit to security role groups].",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includedGroupTypeIds",
            "in": "query",
            "description": "The included group type ids.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludedGroupTypeIds",
            "in": "query",
            "description": "The excluded group type ids.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeInactiveGroups",
            "in": "query",
            "description": "if set to true [include inactive groups].",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "countsType",
            "in": "query",
            "description": "Type of the counts.",
            "schema": {
              "type": "string",
              "enum": [
                "None",
                "ChildGroups",
                "GroupMembers"
              ]
            }
          },
          {
            "name": "campusId",
            "in": "query",
            "description": "if set it will filter groups based on campus",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "includeNoCampus",
            "in": "query",
            "description": "if campus set and set to true [include groups with no campus].",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limitToPublic",
            "in": "query",
            "description": "if set to true [limit to public groups].",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limitToSchedulingEnabled",
            "in": "query",
            "description": "if set to true only includes groups that have SchedulingEnabled (or has a child group that has SchedulingEnabled).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "limitToRSVPEnabled",
            "in": "query",
            "description": "if set to true only includes groups that have RSVPEnabled (or has a child group that has RSVPEnabled).",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Web.UI.Controls.TreeViewItem"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Groups/GetFamilies/{personId}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Gets the families sorted by the person's GroupOrder (GroupMember.GroupOrder)",
        "operationId": "GETapi_Groups_GetFamilies_personId",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "The person identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.Group"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Groups/GetFamiliesByPersonNameSearch/{searchString}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Gets the families by name search.",
        "operationId": "GETapi_Groups_GetFamiliesByPersonNameSearch_searchString",
        "parameters": [
          {
            "name": "searchString",
            "in": "path",
            "description": "String to use for search.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Rest.Controllers.GroupsController.FamilySearchResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Groups/GetFamiliesByPersonNameSearch/{searchString}/{maxResults}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Gets the families by name search.",
        "operationId": "GETapi_Groups_GetFamiliesByPersonNameSearch_searchString_maxResults",
        "parameters": [
          {
            "name": "searchString",
            "in": "path",
            "description": "String to use for search.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxResults",
            "in": "path",
            "description": "The maximum results.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Rest.Controllers.GroupsController.FamilySearchResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Groups/GetFamily/{familyId}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Gets the family.",
        "operationId": "GETapi_Groups_GetFamily_familyId",
        "parameters": [
          {
            "name": "familyId",
            "in": "path",
            "description": "The family identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rock.Rest.Controllers.GroupsController.FamilySearchResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/Groups/GetGuestsForFamily/{groupId}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Gets the guests (known relationship of can check-in) for given family.",
        "operationId": "GETapi_Groups_GetGuestsForFamily_groupId",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "Group id of the family.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Rest.Controllers.GroupsController.GuestFamily"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Groups/GetMapInfo/{groupId}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Gets the map information.",
        "operationId": "GETapi_Groups_GetMapInfo_groupId",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.MapItem"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Groups/GetMapInfo/{groupId}/Children": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Gets the child map information.",
        "operationId": "GETapi_Groups_GetMapInfo_groupId_ChildrengroupTypeIdsgroupTypeIdsincludeDescendantsincludeDescendants",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "groupTypeIds",
            "in": "query",
            "description": "The group type ids (comma delimited).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeDescendants",
            "in": "query",
            "description": "if set to true [include descendants].",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.MapItem"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Groups/GetMapInfo/{groupId}/Families/{statusId}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Gets the families map information.",
        "operationId": "GETapi_Groups_GetMapInfo_groupId_Families_statusId",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "statusId",
            "in": "path",
            "description": "The status identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.MapItem"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Groups/GetMapInfo/{groupId}/Members/{groupMemberStatus}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Gets the member map information.",
        "operationId": "GETapi_Groups_GetMapInfo_groupId_Members_groupMemberStatus",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "groupMemberStatus",
            "in": "path",
            "description": "The group member status.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "Inactive",
                "Active",
                "Pending"
              ]
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.MapItem"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Groups/GetMapInfoWindow/{groupId}/{locationId}": {
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Gets the map information window.",
        "operationId": "POSTapi_Groups_GetMapInfoWindow_groupId_locationId",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "The location identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The information window details.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Rock.Rest.Controllers.GroupsController.InfoWindowRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rock.Rest.Controllers.GroupsController.InfoWindowResult"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "infoWindowDetails"
      }
    },
    "/api/Groups/GroupTypeCheckinConfiguration/{groupTypeGuid}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Returns a simplified data structure of the check-in parameters. This is used by FrontPorch but is generalized.\r\nThe children of the provided group GUID are incuded in the results.",
        "operationId": "GETapi_Groups_GroupTypeCheckinConfiguration_groupTypeGuid",
        "parameters": [
          {
            "name": "groupTypeGuid",
            "in": "path",
            "description": "The group type unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/Groups/InDataView/{dataViewId}/{entityId}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Determines if the entity id is in the data view",
        "operationId": "GETapi_Groups_InDataView_dataViewId_entityId",
        "parameters": [
          {
            "name": "dataViewId",
            "in": "path",
            "description": "The data view identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "entityId",
            "in": "path",
            "description": "The entity identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/Groups/LaunchWorkflow/{id}": {
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Launches a workflow. And optionally passes the entity with selected id as the entity for the workflow",
        "operationId": "POSTapi_Groups_LaunchWorkflow_idworkflowTypeIdworkflowTypeIdworkflowNameworkflowName",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the entity to pass to workflow, if entity cannot be loaded workflow will still be launched but without passing an entity",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workflowTypeId",
            "in": "query",
            "description": "The workflow type identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workflowName",
            "in": "query",
            "description": "Name of the workflow.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Optional list of workflow values to set.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "workflowAttributeValues"
      }
    },
    "/api/Groups/SaveAddress/{groupId}/{locationTypeId}": {
      "put": {
        "tags": [
          "Groups"
        ],
        "summary": "Saves a group address.",
        "operationId": "PUTapi_Groups_SaveAddress_groupId_locationTypeIdstreet1street1street2street2citycitystatestatepostalCodepostalCodecountrycountry",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "The group identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "locationTypeId",
            "in": "path",
            "description": "The location type identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "street1",
            "in": "query",
            "description": "The street1.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "street2",
            "in": "query",
            "description": "The street2.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "city",
            "in": "query",
            "description": "The city.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "The state.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "postalCode",
            "in": "query",
            "description": "The postal code.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country",
            "in": "query",
            "description": "The country.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      }
    },
    "/api/Groups/SetContext/{id}": {
      "put": {
        "tags": [
          "Groups"
        ],
        "summary": "Sets the Context Cookie to the specified record. Use this to set the Campus Context, Group Context, etc",
        "operationId": "PUTapi_Groups_SetContext_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Groups"
        ],
        "summary": "Sets the Context Cookie to the specified record. Use this to set the Campus Context, Group Context, etc",
        "operationId": "OPTIONSapi_Groups_SetContext_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/GroupTypes": {
      "get": {
        "tags": [
          "GroupTypes"
        ],
        "summary": "Queryable GET endpoint",
        "operationId": "GETapi_GroupTypes",
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.GroupType"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "GroupTypes"
        ],
        "summary": "POST endpoint. Use this to add a record",
        "operationId": "POSTapi_GroupTypes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Rock.Model.GroupType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "value"
      }
    },
    "/api/GroupTypes/{id}": {
      "get": {
        "tags": [
          "GroupTypes"
        ],
        "summary": "GET endpoint to get a single record",
        "operationId": "GETapi_GroupTypes_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the record",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rock.Model.GroupType"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "GroupTypes"
        ],
        "summary": "PUT endpoint. Use this to update a record",
        "operationId": "PUTapi_GroupTypes_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Rock.Model.GroupType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "value"
      },
      "delete": {
        "tags": [
          "GroupTypes"
        ],
        "summary": "DELETE endpoint. To delete the record",
        "operationId": "DELETEapi_GroupTypes_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "GroupTypes"
        ],
        "summary": "PATCH endpoint. Use this to update a subset of the properties of the record",
        "operationId": "PATCHapi_GroupTypes_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The values.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "values"
      }
    },
    "/api/GroupTypes/AttributeValue/{id}": {
      "post": {
        "tags": [
          "GroupTypes"
        ],
        "summary": "POST an attribute value. Use this to set an attribute value for the record",
        "operationId": "POSTapi_GroupTypes_AttributeValue_idattributeKeyattributeKeyattributeValueattributeValue",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeKey",
            "in": "query",
            "description": "The attribute key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeValue",
            "in": "query",
            "description": "The attribute value.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "GroupTypes"
        ],
        "summary": "DELETE to delete the specified attribute value for the record",
        "operationId": "DELETEapi_GroupTypes_AttributeValue_idattributeKeyattributeKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeKey",
            "in": "query",
            "description": "The attribute key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/GroupTypes/DataView/{id}": {
      "get": {
        "tags": [
          "GroupTypes"
        ],
        "summary": "Gets a list of objects represented by the selected data view",
        "operationId": "GETapi_GroupTypes_DataView_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.GroupType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/GroupTypes/FollowedItems": {
      "get": {
        "tags": [
          "GroupTypes"
        ],
        "operationId": "GETapi_GroupTypes_FollowedItemspersonIdpersonIdpersonAliasIdpersonAliasId",
        "parameters": [
          {
            "name": "personId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "personAliasId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.GroupType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/GroupTypes/GetByAttributeValue": {
      "get": {
        "tags": [
          "GroupTypes"
        ],
        "operationId": "GETapi_GroupTypes_GetByAttributeValueattributeIdattributeIdattributeKeyattributeKeyvaluevaluecaseSensitivecaseSensitive",
        "parameters": [
          {
            "name": "attributeId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeKey",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseSensitive",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.GroupType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/GroupTypes/InDataView/{dataViewId}/{entityId}": {
      "get": {
        "tags": [
          "GroupTypes"
        ],
        "summary": "Determines if the entity id is in the data view",
        "operationId": "GETapi_GroupTypes_InDataView_dataViewId_entityId",
        "parameters": [
          {
            "name": "dataViewId",
            "in": "path",
            "description": "The data view identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "entityId",
            "in": "path",
            "description": "The entity identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/GroupTypes/LaunchWorkflow/{id}": {
      "post": {
        "tags": [
          "GroupTypes"
        ],
        "summary": "Launches a workflow. And optionally passes the entity with selected id as the entity for the workflow",
        "operationId": "POSTapi_GroupTypes_LaunchWorkflow_idworkflowTypeIdworkflowTypeIdworkflowNameworkflowName",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the entity to pass to workflow, if entity cannot be loaded workflow will still be launched but without passing an entity",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workflowTypeId",
            "in": "query",
            "description": "The workflow type identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workflowName",
            "in": "query",
            "description": "Name of the workflow.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Optional list of workflow values to set.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "workflowAttributeValues"
      }
    },
    "/api/GroupTypes/SetContext/{id}": {
      "put": {
        "tags": [
          "GroupTypes"
        ],
        "summary": "Sets the Context Cookie to the specified record. Use this to set the Campus Context, Group Context, etc",
        "operationId": "PUTapi_GroupTypes_SetContext_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "GroupTypes"
        ],
        "summary": "Sets the Context Cookie to the specified record. Use this to set the Campus Context, Group Context, etc",
        "operationId": "OPTIONSapi_GroupTypes_SetContext_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/GroupTypeRoles": {
      "get": {
        "tags": [
          "GroupTypeRoles"
        ],
        "summary": "Queryable GET endpoint",
        "operationId": "GETapi_GroupTypeRoles",
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.GroupTypeRole"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "GroupTypeRoles"
        ],
        "summary": "POST endpoint. Use this to add a record",
        "operationId": "POSTapi_GroupTypeRoles",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Rock.Model.GroupTypeRole"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "value"
      }
    },
    "/api/GroupTypeRoles/{id}": {
      "get": {
        "tags": [
          "GroupTypeRoles"
        ],
        "summary": "GET endpoint to get a single record",
        "operationId": "GETapi_GroupTypeRoles_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the record",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rock.Model.GroupTypeRole"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "GroupTypeRoles"
        ],
        "summary": "PUT endpoint. Use this to update a record",
        "operationId": "PUTapi_GroupTypeRoles_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Rock.Model.GroupTypeRole"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "value"
      },
      "delete": {
        "tags": [
          "GroupTypeRoles"
        ],
        "summary": "DELETE endpoint. To delete the record",
        "operationId": "DELETEapi_GroupTypeRoles_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "GroupTypeRoles"
        ],
        "summary": "PATCH endpoint. Use this to update a subset of the properties of the record",
        "operationId": "PATCHapi_GroupTypeRoles_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The values.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "values"
      }
    },
    "/api/GroupTypeRoles/AttributeValue/{id}": {
      "post": {
        "tags": [
          "GroupTypeRoles"
        ],
        "summary": "POST an attribute value. Use this to set an attribute value for the record",
        "operationId": "POSTapi_GroupTypeRoles_AttributeValue_idattributeKeyattributeKeyattributeValueattributeValue",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeKey",
            "in": "query",
            "description": "The attribute key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeValue",
            "in": "query",
            "description": "The attribute value.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "GroupTypeRoles"
        ],
        "summary": "DELETE to delete the specified attribute value for the record",
        "operationId": "DELETEapi_GroupTypeRoles_AttributeValue_idattributeKeyattributeKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeKey",
            "in": "query",
            "description": "The attribute key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/GroupTypeRoles/DataView/{id}": {
      "get": {
        "tags": [
          "GroupTypeRoles"
        ],
        "summary": "Gets a list of objects represented by the selected data view",
        "operationId": "GETapi_GroupTypeRoles_DataView_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.GroupTypeRole"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/GroupTypeRoles/FollowedItems": {
      "get": {
        "tags": [
          "GroupTypeRoles"
        ],
        "operationId": "GETapi_GroupTypeRoles_FollowedItemspersonIdpersonIdpersonAliasIdpersonAliasId",
        "parameters": [
          {
            "name": "personId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "personAliasId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.GroupTypeRole"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/GroupTypeRoles/GetByAttributeValue": {
      "get": {
        "tags": [
          "GroupTypeRoles"
        ],
        "operationId": "GETapi_GroupTypeRoles_GetByAttributeValueattributeIdattributeIdattributeKeyattributeKeyvaluevaluecaseSensitivecaseSensitive",
        "parameters": [
          {
            "name": "attributeId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeKey",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseSensitive",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.GroupTypeRole"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/GroupTypeRoles/InDataView/{dataViewId}/{entityId}": {
      "get": {
        "tags": [
          "GroupTypeRoles"
        ],
        "summary": "Determines if the entity id is in the data view",
        "operationId": "GETapi_GroupTypeRoles_InDataView_dataViewId_entityId",
        "parameters": [
          {
            "name": "dataViewId",
            "in": "path",
            "description": "The data view identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "entityId",
            "in": "path",
            "description": "The entity identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/GroupTypeRoles/LaunchWorkflow/{id}": {
      "post": {
        "tags": [
          "GroupTypeRoles"
        ],
        "summary": "Launches a workflow. And optionally passes the entity with selected id as the entity for the workflow",
        "operationId": "POSTapi_GroupTypeRoles_LaunchWorkflow_idworkflowTypeIdworkflowTypeIdworkflowNameworkflowName",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the entity to pass to workflow, if entity cannot be loaded workflow will still be launched but without passing an entity",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workflowTypeId",
            "in": "query",
            "description": "The workflow type identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workflowName",
            "in": "query",
            "description": "Name of the workflow.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Optional list of workflow values to set.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "workflowAttributeValues"
      }
    },
    "/api/GroupTypeRoles/SetContext/{id}": {
      "put": {
        "tags": [
          "GroupTypeRoles"
        ],
        "summary": "Sets the Context Cookie to the specified record. Use this to set the Campus Context, Group Context, etc",
        "operationId": "PUTapi_GroupTypeRoles_SetContext_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "GroupTypeRoles"
        ],
        "summary": "Sets the Context Cookie to the specified record. Use this to set the Campus Context, Group Context, etc",
        "operationId": "OPTIONSapi_GroupTypeRoles_SetContext_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/GroupLocations": {
      "get": {
        "tags": [
          "GroupLocations"
        ],
        "summary": "Queryable GET endpoint",
        "operationId": "GETapi_GroupLocations",
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.GroupLocation"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "GroupLocations"
        ],
        "summary": "POST endpoint. Use this to add a record",
        "operationId": "POSTapi_GroupLocations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Rock.Model.GroupLocation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "value"
      }
    },
    "/api/GroupLocations/{id}": {
      "get": {
        "tags": [
          "GroupLocations"
        ],
        "summary": "GET endpoint to get a single record",
        "operationId": "GETapi_GroupLocations_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the record",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rock.Model.GroupLocation"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "GroupLocations"
        ],
        "summary": "PUT endpoint. Use this to update a record",
        "operationId": "PUTapi_GroupLocations_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Rock.Model.GroupLocation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "value"
      },
      "delete": {
        "tags": [
          "GroupLocations"
        ],
        "summary": "DELETE endpoint. To delete the record",
        "operationId": "DELETEapi_GroupLocations_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "GroupLocations"
        ],
        "summary": "PATCH endpoint. Use this to update a subset of the properties of the record",
        "operationId": "PATCHapi_GroupLocations_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The values.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "values"
      }
    },
    "/api/GroupLocations/AttributeValue/{id}": {
      "post": {
        "tags": [
          "GroupLocations"
        ],
        "summary": "POST an attribute value. Use this to set an attribute value for the record",
        "operationId": "POSTapi_GroupLocations_AttributeValue_idattributeKeyattributeKeyattributeValueattributeValue",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeKey",
            "in": "query",
            "description": "The attribute key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeValue",
            "in": "query",
            "description": "The attribute value.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "GroupLocations"
        ],
        "summary": "DELETE to delete the specified attribute value for the record",
        "operationId": "DELETEapi_GroupLocations_AttributeValue_idattributeKeyattributeKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeKey",
            "in": "query",
            "description": "The attribute key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/GroupLocations/DataView/{id}": {
      "get": {
        "tags": [
          "GroupLocations"
        ],
        "summary": "Gets a list of objects represented by the selected data view",
        "operationId": "GETapi_GroupLocations_DataView_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.GroupLocation"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/GroupLocations/FollowedItems": {
      "get": {
        "tags": [
          "GroupLocations"
        ],
        "operationId": "GETapi_GroupLocations_FollowedItemspersonIdpersonIdpersonAliasIdpersonAliasId",
        "parameters": [
          {
            "name": "personId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "personAliasId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.GroupLocation"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/GroupLocations/GetByAttributeValue": {
      "get": {
        "tags": [
          "GroupLocations"
        ],
        "operationId": "GETapi_GroupLocations_GetByAttributeValueattributeIdattributeIdattributeKeyattributeKeyvaluevaluecaseSensitivecaseSensitive",
        "parameters": [
          {
            "name": "attributeId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeKey",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseSensitive",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.GroupLocation"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/GroupLocations/InDataView/{dataViewId}/{entityId}": {
      "get": {
        "tags": [
          "GroupLocations"
        ],
        "summary": "Determines if the entity id is in the data view",
        "operationId": "GETapi_GroupLocations_InDataView_dataViewId_entityId",
        "parameters": [
          {
            "name": "dataViewId",
            "in": "path",
            "description": "The data view identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "entityId",
            "in": "path",
            "description": "The entity identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/GroupLocations/LaunchWorkflow/{id}": {
      "post": {
        "tags": [
          "GroupLocations"
        ],
        "summary": "Launches a workflow. And optionally passes the entity with selected id as the entity for the workflow",
        "operationId": "POSTapi_GroupLocations_LaunchWorkflow_idworkflowTypeIdworkflowTypeIdworkflowNameworkflowName",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the entity to pass to workflow, if entity cannot be loaded workflow will still be launched but without passing an entity",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workflowTypeId",
            "in": "query",
            "description": "The workflow type identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workflowName",
            "in": "query",
            "description": "Name of the workflow.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Optional list of workflow values to set.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "workflowAttributeValues"
      }
    },
    "/api/GroupLocations/SetContext/{id}": {
      "put": {
        "tags": [
          "GroupLocations"
        ],
        "summary": "Sets the Context Cookie to the specified record. Use this to set the Campus Context, Group Context, etc",
        "operationId": "PUTapi_GroupLocations_SetContext_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "GroupLocations"
        ],
        "summary": "Sets the Context Cookie to the specified record. Use this to set the Campus Context, Group Context, etc",
        "operationId": "OPTIONSapi_GroupLocations_SetContext_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/Locations": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Queryable GET endpoint",
        "operationId": "GETapi_Locations",
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.Location"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Locations"
        ],
        "summary": "POST endpoint. Use this to add a record",
        "operationId": "POSTapi_Locations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Rock.Model.Location"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "value"
      }
    },
    "/api/Locations/{id}": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "GET endpoint to get a single record",
        "operationId": "GETapi_Locations_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the record",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rock.Model.Location"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Locations"
        ],
        "summary": "PUT endpoint. Use this to update a record",
        "operationId": "PUTapi_Locations_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Rock.Model.Location"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "value"
      },
      "delete": {
        "tags": [
          "Locations"
        ],
        "summary": "DELETE endpoint. To delete the record",
        "operationId": "DELETEapi_Locations_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "Locations"
        ],
        "summary": "PATCH endpoint. Use this to update a subset of the properties of the record",
        "operationId": "PATCHapi_Locations_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The values.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "values"
      }
    },
    "/api/locations/{street}/{city}/{state}/{postalCode}": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Gets the specified street.",
        "operationId": "GETapi_locations_street_city_state_postalCode",
        "parameters": [
          {
            "name": "street",
            "in": "path",
            "description": "The street.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "city",
            "in": "path",
            "description": "The city.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "path",
            "description": "The state.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "postalCode",
            "in": "path",
            "description": "The postal code.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rock.Model.Location"
                }
              }
            }
          }
        }
      }
    },
    "/api/Locations/AttributeValue/{id}": {
      "post": {
        "tags": [
          "Locations"
        ],
        "summary": "POST an attribute value. Use this to set an attribute value for the record",
        "operationId": "POSTapi_Locations_AttributeValue_idattributeKeyattributeKeyattributeValueattributeValue",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeKey",
            "in": "query",
            "description": "The attribute key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeValue",
            "in": "query",
            "description": "The attribute value.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Locations"
        ],
        "summary": "DELETE to delete the specified attribute value for the record",
        "operationId": "DELETEapi_Locations_AttributeValue_idattributeKeyattributeKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeKey",
            "in": "query",
            "description": "The attribute key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/Locations/DataView/{id}": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Gets a list of objects represented by the selected data view",
        "operationId": "GETapi_Locations_DataView_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.Location"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Locations/FollowedItems": {
      "get": {
        "tags": [
          "Locations"
        ],
        "operationId": "GETapi_Locations_FollowedItemspersonIdpersonIdpersonAliasIdpersonAliasId",
        "parameters": [
          {
            "name": "personId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "personAliasId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.Location"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/locations/getactivechildren/{id}/{rootLocationId}": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Gets the children, excluding inactive items.",
        "operationId": "GETapi_locations_getactivechildren_id_rootLocationId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "rootLocationId",
            "in": "path",
            "description": "The root location unique identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Web.UI.Controls.TreeViewItem"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Locations/GetByAttributeValue": {
      "get": {
        "tags": [
          "Locations"
        ],
        "operationId": "GETapi_Locations_GetByAttributeValueattributeIdattributeIdattributeKeyattributeKeyvaluevaluecaseSensitivecaseSensitive",
        "parameters": [
          {
            "name": "attributeId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeKey",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseSensitive",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.Location"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/locations/getchildren/{id}/{rootLocationId}": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Gets the children.",
        "operationId": "GETapi_locations_getchildren_id_rootLocationId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "rootLocationId",
            "in": "path",
            "description": "The root location unique identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Web.UI.Controls.TreeViewItem"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Locations/InDataView/{dataViewId}/{entityId}": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Determines if the entity id is in the data view",
        "operationId": "GETapi_Locations_InDataView_dataViewId_entityId",
        "parameters": [
          {
            "name": "dataViewId",
            "in": "path",
            "description": "The data view identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "entityId",
            "in": "path",
            "description": "The entity identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/Locations/LaunchWorkflow/{id}": {
      "post": {
        "tags": [
          "Locations"
        ],
        "summary": "Launches a workflow. And optionally passes the entity with selected id as the entity for the workflow",
        "operationId": "POSTapi_Locations_LaunchWorkflow_idworkflowTypeIdworkflowTypeIdworkflowNameworkflowName",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the entity to pass to workflow, if entity cannot be loaded workflow will still be launched but without passing an entity",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workflowTypeId",
            "in": "query",
            "description": "The workflow type identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workflowName",
            "in": "query",
            "description": "Name of the workflow.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Optional list of workflow values to set.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "workflowAttributeValues"
      }
    },
    "/api/locations/postalcodetomapcoordinate/{postalCode}": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "Gets the mapCoordinate from postalcode.",
        "operationId": "GETapi_locations_postalcodetomapcoordinate_postalCode",
        "parameters": [
          {
            "name": "postalCode",
            "in": "path",
            "description": "The postalcode.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rock.Model.MapCoordinate"
                }
              }
            }
          }
        }
      }
    },
    "/api/Locations/SetContext/{id}": {
      "put": {
        "tags": [
          "Locations"
        ],
        "summary": "Sets the Context Cookie to the specified record. Use this to set the Campus Context, Group Context, etc",
        "operationId": "PUTapi_Locations_SetContext_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "Locations"
        ],
        "summary": "Sets the Context Cookie to the specified record. Use this to set the Campus Context, Group Context, etc",
        "operationId": "OPTIONSapi_Locations_SetContext_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/locations/verify": {
      "put": {
        "tags": [
          "Locations"
        ],
        "summary": "Geocode an location",
        "operationId": "PUTapi_locations_verify",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Rock.Model.Location"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rock.Model.Location"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "location"
      }
    },
    "/api/People": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "Queryable GET endpoint. Note that records that are marked as Deceased are not included",
        "operationId": "GETapi_People",
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.Person"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "People"
        ],
        "summary": "Adds a new person and puts them into a new family",
        "operationId": "POSTapi_People",
        "requestBody": {
          "description": "The person.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Rock.Model.Person"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "person"
      }
    },
    "/api/People({key})": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "Queryable GET endpoint with an option to include person records that have been marked as Deceased",
        "operationId": "GETapi_PeoplekeyincludeDeceasedincludeDeceased",
        "parameters": [
          {
            "name": "includeDeceased",
            "in": "query",
            "description": "if set to true [include deceased].",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.Person"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/People/{id}": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "GET endpoint to get a single person record",
        "operationId": "GETapi_People_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the record",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rock.Model.Person"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "People"
        ],
        "summary": "PUT endpoint. Use this to update a record",
        "operationId": "PUTapi_People_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Rock.Model.Person"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "value"
      },
      "delete": {
        "tags": [
          "People"
        ],
        "summary": "DELETE endpoint for a Person Record. NOTE: Person records can not be deleted using REST, so this will always return a 405",
        "operationId": "DELETEapi_People_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "People"
        ],
        "summary": "PATCH endpoint. Use this to update a subset of the properties of the record",
        "operationId": "PATCHapi_People_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The values.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "values"
      }
    },
    "/api/People/AddExistingPersonToFamily": {
      "post": {
        "tags": [
          "People"
        ],
        "summary": "Adds the existing person to family, optionally removing them from any other families they belong to",
        "operationId": "POSTapi_People_AddExistingPersonToFamilypersonIdpersonIdfamilyIdfamilyIdgroupRoleIdgroupRoleIdremoveFromOtherFamiliesremoveFromOtherFamilies",
        "parameters": [
          {
            "name": "personId",
            "in": "query",
            "description": "The person identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "familyId",
            "in": "query",
            "description": "The family identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "groupRoleId",
            "in": "query",
            "description": "The group role identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "removeFromOtherFamilies",
            "in": "query",
            "description": "if set to true [remove from other families].",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/People/AddNewPersonToFamily/{familyId}": {
      "post": {
        "tags": [
          "People"
        ],
        "summary": "Adds a new person and adds them to the specified family.",
        "operationId": "POSTapi_People_AddNewPersonToFamily_familyIdgroupRoleIdgroupRoleId",
        "parameters": [
          {
            "name": "familyId",
            "in": "path",
            "description": "The family identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "groupRoleId",
            "in": "query",
            "description": "The group role identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The person.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Rock.Model.Person"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "person"
      }
    },
    "/api/People/AttributeValue/{id}": {
      "post": {
        "tags": [
          "People"
        ],
        "summary": "POST an attribute value. Use this to set an attribute value for the record",
        "operationId": "POSTapi_People_AttributeValue_idattributeKeyattributeKeyattributeValueattributeValue",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeKey",
            "in": "query",
            "description": "The attribute key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeValue",
            "in": "query",
            "description": "The attribute value.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "People"
        ],
        "summary": "DELETE to delete the specified attribute value for the record",
        "operationId": "DELETEapi_People_AttributeValue_idattributeKeyattributeKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeKey",
            "in": "query",
            "description": "The attribute key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/People/ConfigureTextToGive/{personId}": {
      "post": {
        "tags": [
          "People"
        ],
        "summary": "Allows setting a configuration for the person for text-to-give.",
        "operationId": "POSTapi_People_ConfigureTextToGive_personId",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "The person to configure text-to-give options",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The options to set",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Rock.Rest.Controllers.ConfigureTextToGiveArgs"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "args"
      }
    },
    "/api/People/DataView/{id}": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "Gets a list of objects represented by the selected data view",
        "operationId": "GETapi_People_DataView_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.Person"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/People/Export": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "Exports Person Records",
        "operationId": "GETapi_People_ExportpagepagepageSizepageSizesortBysortBysortDirectionsortDirectiondataViewIddataViewIdmodifiedSincemodifiedSinceattributeKeysattributeKeysattributeReturnTypeattributeReturnType",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page being requested (where first page is 1).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of records to provide per page. NOTE: This is limited to the 'API Max Items Per Page' global attribute.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Optional field to sort by. This must be a mapped property on the Person model.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "The sort direction (1 = Ascending, 0 = Descending). Default is 1 (Ascending).",
            "schema": {
              "type": "string",
              "enum": [
                "Ascending",
                "Descending"
              ]
            }
          },
          {
            "name": "dataViewId",
            "in": "query",
            "description": "The optional data view to use for filtering.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "modifiedSince",
            "in": "query",
            "description": "The optional date/time to filter to only get newly updated items.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Optional comma-delimited list of attribute keys for the attribute values that should be included with each exported record, or specify 'all' to include all attributes.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeReturnType",
            "in": "query",
            "description": "Raw/Formatted (default is Raw)",
            "schema": {
              "type": "string",
              "enum": [
                "Raw",
                "Formatted"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rock.BulkExport.PeopleExport"
                }
              }
            }
          }
        }
      }
    },
    "/api/People/FollowedItems": {
      "get": {
        "tags": [
          "People"
        ],
        "operationId": "GETapi_People_FollowedItemspersonIdpersonIdpersonAliasIdpersonAliasId",
        "parameters": [
          {
            "name": "personId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "personAliasId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.Person"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/People/GetByAttributeValue": {
      "get": {
        "tags": [
          "People"
        ],
        "operationId": "GETapi_People_GetByAttributeValueattributeIdattributeIdattributeKeyattributeKeyvaluevaluecaseSensitivecaseSensitive",
        "parameters": [
          {
            "name": "attributeId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeKey",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseSensitive",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.Person"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/People/GetByEmail": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "Searches the person records based on the specified email address",
        "operationId": "GETapi_People_GetByEmailemailemail",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "The email.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.Person"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/People/GetByEmail/{email}": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "Searches the person records based on the specified email address",
        "operationId": "GETapi_People_GetByEmail_email",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "The email.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.Person"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/People/GetByPersonAliasId/{personAliasId}": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "GET the Person by person alias identifier.",
        "operationId": "GETapi_People_GetByPersonAliasId_personAliasId",
        "parameters": [
          {
            "name": "personAliasId",
            "in": "path",
            "description": "The person alias identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rock.Model.Person"
                }
              }
            }
          }
        }
      }
    },
    "/api/People/GetByPhoneNumber/{number}": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "Searches the person records based on the specified phone number. NOTE that partial matches are included",
        "operationId": "GETapi_People_GetByPhoneNumber_number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "The phone number.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.Person"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/People/GetByToken/{token}": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "GET a person record based on a temporary person token and increment the usage count of the token",
        "operationId": "GETapi_People_GetByToken_token",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "The token.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rock.Model.Person"
                }
              }
            }
          }
        }
      }
    },
    "/api/People/GetByUserName/{username}": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "GET a person record based on the specified username",
        "operationId": "GETapi_People_GetByUserName_username",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The username.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rock.Model.Person"
                }
              }
            }
          }
        }
      }
    },
    "/api/People/GetCurrentPerson": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "Gets the currently authenticated person",
        "operationId": "GETapi_People_GetCurrentPerson",
        "parameters": [
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rock.Model.Person"
                }
              }
            }
          }
        }
      }
    },
    "/api/People/GetCurrentPersonImpersonationToken": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "Gets the current person's impersonation token. This is used by external apps who might have a logged in person but\r\nneed to create a impersonation token to link to the website. For instance a mobile app might have the current person\r\nand have a cookie, but would like to link out to the website.",
        "operationId": "GETapi_People_GetCurrentPersonImpersonationTokenexpireDateTimeexpireDateTimeusageLimitusageLimitpageIdpageId",
        "parameters": [
          {
            "name": "expireDateTime",
            "in": "query",
            "description": "The expire date time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "usageLimit",
            "in": "query",
            "description": "The usage limit.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageId",
            "in": "query",
            "description": "The page identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/People/GetGraduationYear/{gradeOffset}": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "Gets the graduation year based on the provided GradeOffset",
        "operationId": "GETapi_People_GetGraduationYear_gradeOffset",
        "parameters": [
          {
            "name": "gradeOffset",
            "in": "path",
            "description": "The grade offset for the person.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/api/People/GetImpersonationParameter": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "Creates and stores a new PersonToken for a person using the specified ExpireDateTime, UsageLimit, and Page\r\nReturns the encrypted URLEncoded Token along with the ImpersonationParameter key in the form of \"rckipid={ImpersonationParameter}\"",
        "operationId": "GETapi_People_GetImpersonationParameterpersonIdpersonIdexpireDateTimeexpireDateTimeusageLimitusageLimitpageIdpageId",
        "parameters": [
          {
            "name": "personId",
            "in": "query",
            "description": "The person identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "expireDateTime",
            "in": "query",
            "description": "The expire date time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "usageLimit",
            "in": "query",
            "description": "The usage limit.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageId",
            "in": "query",
            "description": "The page identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/People/GetInteractionStatistics/{personId}": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "Gets the count of interactions over several timeframes for the current or specified person.",
        "operationId": "GETapi_People_GetInteractionStatistics_personIddatedateinteractionChannelIdinteractionChannelIdinteractionComponentIdinteractionComponentIdinteractionChannelGuidinteractionChannelGuidinteractionComponentGuidinteractionComponentGuid",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "The person identifier. Optional. This defaults to the currently authenticated person.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "The date. Optional. This defaults to today.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "interactionChannelId",
            "in": "query",
            "description": "The interaction channel identifier. Optional filter.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "interactionComponentId",
            "in": "query",
            "description": "The interaction component identifier. Optional filter.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "interactionChannelGuid",
            "in": "query",
            "description": "The interaction channel unique identifier. Optional filter.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "interactionComponentGuid",
            "in": "query",
            "description": "The interaction component unique identifier. Optional filter.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rock.Rest.Controllers.PersonInteractionStatistics"
                }
              }
            }
          }
        }
      }
    },
    "/api/People/GetPotentialDuplicates": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "Gets a list of people's names, email, gender and birthdate, to see if there are potential duplicates.\r\nFor example, you might want to use this during account creation to warn that the person might already have an account.",
        "operationId": "GETapi_People_GetPotentialDuplicateslastNamelastNameemailAddressemailAddress",
        "parameters": [
          {
            "name": "lastName",
            "in": "query",
            "description": "The last name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "emailAddress",
            "in": "query",
            "description": "The email address.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Rest.Controllers.PeopleController.DuplicatePersonInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/People/GetSearchDetails": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "Gets the search details (for the person picker)",
        "operationId": "GETapi_People_GetSearchDetailsidid",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/People/InDataView/{dataViewId}/{entityId}": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "Determines if the entity id is in the data view",
        "operationId": "GETapi_People_InDataView_dataViewId_entityId",
        "parameters": [
          {
            "name": "dataViewId",
            "in": "path",
            "description": "The data view identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "entityId",
            "in": "path",
            "description": "The entity identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/People/LaunchWorkflow/{id}": {
      "post": {
        "tags": [
          "People"
        ],
        "summary": "Launches a workflow. And optionally passes the entity with selected id as the entity for the workflow",
        "operationId": "POSTapi_People_LaunchWorkflow_idworkflowTypeIdworkflowTypeIdworkflowNameworkflowName",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the entity to pass to workflow, if entity cannot be loaded workflow will still be launched but without passing an entity",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workflowTypeId",
            "in": "query",
            "description": "The workflow type identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workflowName",
            "in": "query",
            "description": "Name of the workflow.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Optional list of workflow values to set.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "workflowAttributeValues"
      }
    },
    "/api/People/OneClickUnsubscribe/{personActionIdentifier}": {
      "post": {
        "tags": [
          "People"
        ],
        "summary": "Unsubscribes a person from all email communications or a specific communication list if one is provided.",
        "description": "<para>This endpoint is for email client one-click unsubscribe functionality (<a href=\"https://datatracker.ietf.org/doc/html/rfc8058\">RFC8058</a>).</para>\r\n<para>As of 12/13/2023, <a href=\"https://datatracker.ietf.org/doc/html/rfc8058#section-3.1\">RFC8058 Section 3.1</a> states:</para>\r\n<para>\r\n            The POST request MUST NOT include cookies, HTTP authorization, or any\r\n            other context information. The unsubscribe operation is logically\r\n            unrelated to any previous web activity, and context information could\r\n            inappropriately link the unsubscribe to previous activity.\r\n            </para>\r\n<para>For this reason, this endpoint does not and must not require authentication or authorization other than the encrypted person action identifier.</para>",
        "operationId": "POSTapi_People_OneClickUnsubscribe_personActionIdentifiercommunicationListIdKeycommunicationListIdKey",
        "parameters": [
          {
            "name": "personActionIdentifier",
            "in": "path",
            "description": "The person action identifier. Action should be \"Unsubscribe\".",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "communicationListIdKey",
            "in": "query",
            "description": "The communication list identifier key.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/People/PopupHtml/{personId}": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "Gets the popup html for the selected person",
        "operationId": "GETapi_People_PopupHtml_personId",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "The person id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rock.Rest.Controllers.PersonSearchResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/People/PopupHtml/{personId}/{emailAsLink}": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "Gets the popup html for the selected person",
        "operationId": "GETapi_People_PopupHtml_personId_emailAsLink",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "The person id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "emailAsLink",
            "in": "path",
            "description": "Determines if the email address should be formatted as a link.",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rock.Rest.Controllers.PersonSearchResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/People/Search": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "Returns results to the Person Picker",
        "operationId": "GETapi_People_SearchnamenameincludeDetailsincludeDetailsincludeBusinessesincludeBusinessesincludeDeceasedincludeDeceasedaddressaddressphonephoneemailemail",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "The search parameter for the person's name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeDetails",
            "in": "query",
            "description": "Set to true details will be included instead of lazy loaded.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeBusinesses",
            "in": "query",
            "description": "Set to true to also search businesses.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeDeceased",
            "in": "query",
            "description": "Set to true to include deceased people.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "address",
            "in": "query",
            "description": "The search parameter for the person's address.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phone",
            "in": "query",
            "description": "The search parameter for the person's phone.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "The search parameter for the person's name email.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Rest.Controllers.PersonSearchResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/People/SetContext/{id}": {
      "put": {
        "tags": [
          "People"
        ],
        "summary": "Sets the Context Cookie to the specified record. Use this to set the Campus Context, Group Context, etc",
        "operationId": "PUTapi_People_SetContext_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "People"
        ],
        "summary": "Sets the Context Cookie to the specified record. Use this to set the Campus Context, Group Context, etc",
        "operationId": "OPTIONSapi_People_SetContext_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/People/UpdatePersonProfilePhoto": {
      "post": {
        "tags": [
          "People"
        ],
        "summary": "Updates the person profile photo.",
        "operationId": "POSTapi_People_UpdatePersonProfilePhotopersonGuidpersonGuidfilenamefilename",
        "parameters": [
          {
            "name": "personGuid",
            "in": "query",
            "description": "The person unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "filename",
            "in": "query",
            "description": "The filename.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The photo bytes.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "format": "byte"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "photoBytes"
      }
    },
    "/api/People/UpdateProfilePhoto": {
      "post": {
        "tags": [
          "People"
        ],
        "summary": "Updates the profile photo of the logged in person.",
        "operationId": "POSTapi_People_UpdateProfilePhotofilenamefilename",
        "parameters": [
          {
            "name": "filename",
            "in": "query",
            "description": "The filename.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The photo bytes.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "format": "byte"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "photoBytes"
      }
    },
    "/api/People/VCard/{personGuid}": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "Returns VCard for person.",
        "operationId": "GETapi_People_VCard_personGuid",
        "parameters": [
          {
            "name": "personGuid",
            "in": "path",
            "description": "The person Guid.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/PhoneNumbers": {
      "get": {
        "tags": [
          "PhoneNumbers"
        ],
        "summary": "Queryable GET endpoint",
        "operationId": "GETapi_PhoneNumbers",
        "parameters": [
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.PhoneNumber"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "PhoneNumbers"
        ],
        "summary": "POST endpoint. Use this to add a record",
        "operationId": "POSTapi_PhoneNumbers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Rock.Model.PhoneNumber"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "value"
      }
    },
    "/api/PhoneNumbers/{id}": {
      "get": {
        "tags": [
          "PhoneNumbers"
        ],
        "summary": "GET endpoint to get a single record",
        "operationId": "GETapi_PhoneNumbers_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the record",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rock.Model.PhoneNumber"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PhoneNumbers"
        ],
        "summary": "PUT endpoint. Use this to update a record",
        "operationId": "PUTapi_PhoneNumbers_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Rock.Model.PhoneNumber"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "value"
      },
      "delete": {
        "tags": [
          "PhoneNumbers"
        ],
        "summary": "DELETE endpoint. To delete the record",
        "operationId": "DELETEapi_PhoneNumbers_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "PhoneNumbers"
        ],
        "summary": "PATCH endpoint. Use this to update a subset of the properties of the record",
        "operationId": "PATCHapi_PhoneNumbers_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "The values.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "values"
      }
    },
    "/api/PhoneNumbers/AttributeValue/{id}": {
      "post": {
        "tags": [
          "PhoneNumbers"
        ],
        "summary": "POST an attribute value. Use this to set an attribute value for the record",
        "operationId": "POSTapi_PhoneNumbers_AttributeValue_idattributeKeyattributeKeyattributeValueattributeValue",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeKey",
            "in": "query",
            "description": "The attribute key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeValue",
            "in": "query",
            "description": "The attribute value.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PhoneNumbers"
        ],
        "summary": "DELETE to delete the specified attribute value for the record",
        "operationId": "DELETEapi_PhoneNumbers_AttributeValue_idattributeKeyattributeKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeKey",
            "in": "query",
            "description": "The attribute key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/PhoneNumbers/DataView/{id}": {
      "get": {
        "tags": [
          "PhoneNumbers"
        ],
        "summary": "Gets a list of objects represented by the selected data view",
        "operationId": "GETapi_PhoneNumbers_DataView_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.PhoneNumber"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/PhoneNumbers/FollowedItems": {
      "get": {
        "tags": [
          "PhoneNumbers"
        ],
        "operationId": "GETapi_PhoneNumbers_FollowedItemspersonIdpersonIdpersonAliasIdpersonAliasId",
        "parameters": [
          {
            "name": "personId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "personAliasId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.PhoneNumber"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/PhoneNumbers/GetByAttributeValue": {
      "get": {
        "tags": [
          "PhoneNumbers"
        ],
        "operationId": "GETapi_PhoneNumbers_GetByAttributeValueattributeIdattributeIdattributeKeyattributeKeyvaluevaluecaseSensitivecaseSensitive",
        "parameters": [
          {
            "name": "attributeId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "attributeKey",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "value",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "caseSensitive",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "$expand",
            "in": "query",
            "description": "Expands related entities inline.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filters the results, based on a Boolean condition.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "Selects which properties to include in the response.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderby",
            "in": "query",
            "description": "Sorts the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "Returns only the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Skips the first n results.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadAttributes",
            "in": "query",
            "description": "Specify 'simple' or 'expanded' to load attributes",
            "schema": {
              "type": "string",
              "enum": [
                "simple",
                "expanded"
              ]
            }
          },
          {
            "name": "attributeKeys",
            "in": "query",
            "description": "Specify a comma-delimited list of attribute keys to limit to specific attributes, ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Rock.Model.PhoneNumber"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/PhoneNumbers/InDataView/{dataViewId}/{entityId}": {
      "get": {
        "tags": [
          "PhoneNumbers"
        ],
        "summary": "Determines if the entity id is in the data view",
        "operationId": "GETapi_PhoneNumbers_InDataView_dataViewId_entityId",
        "parameters": [
          {
            "name": "dataViewId",
            "in": "path",
            "description": "The data view identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "entityId",
            "in": "path",
            "description": "The entity identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/PhoneNumbers/LaunchWorkflow/{id}": {
      "post": {
        "tags": [
          "PhoneNumbers"
        ],
        "summary": "Launches a workflow. And optionally passes the entity with selected id as the entity for the workflow",
        "operationId": "POSTapi_PhoneNumbers_LaunchWorkflow_idworkflowTypeIdworkflowTypeIdworkflowNameworkflowName",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the entity to pass to workflow, if entity cannot be loaded workflow will still be launched but without passing an entity",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workflowTypeId",
            "in": "query",
            "description": "The workflow type identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "workflowName",
            "in": "query",
            "description": "Name of the workflow.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Optional list of workflow values to set.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "workflowAttributeValues"
      }
    },
    "/api/PhoneNumbers/SetContext/{id}": {
      "put": {
        "tags": [
          "PhoneNumbers"
        ],
        "summary": "Sets the Context Cookie to the specified record. Use this to set the Campus Context, Group Context, etc",
        "operationId": "PUTapi_PhoneNumbers_SetContext_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "options": {
        "tags": [
          "PhoneNumbers"
        ],
        "summary": "Sets the Context Cookie to the specified record. Use this to set the Campus Context, Group Context, etc",
        "operationId": "OPTIONSapi_PhoneNumbers_SetContext_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Rock.Field.ConfigurationValue": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Value": {
            "type": "string"
          }
        }
      },
      "Rock.Model.Attribute": {
        "required": [
          "AllowSearch",
          "FieldTypeId",
          "IsGridColumn",
          "IsMultiValue",
          "IsRequired",
          "IsSystem",
          "Key",
          "Name",
          "Order"
        ],
        "type": "object",
        "properties": {
          "AbbreviatedName": {
            "type": "string"
          },
          "IsSystem": {
            "type": "boolean"
          },
          "FieldTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "EntityTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "EntityTypeQualifierColumn": {
            "type": "string"
          },
          "EntityTypeQualifierValue": {
            "type": "string"
          },
          "Key": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Order": {
            "type": "integer",
            "format": "int32"
          },
          "IsGridColumn": {
            "type": "boolean"
          },
          "DefaultValue": {
            "type": "string"
          },
          "DefaultPersistedTextValue": {
            "type": "string"
          },
          "DefaultPersistedHtmlValue": {
            "type": "string"
          },
          "DefaultPersistedCondensedTextValue": {
            "type": "string"
          },
          "DefaultPersistedCondensedHtmlValue": {
            "type": "string"
          },
          "IsDefaultPersistedValueDirty": {
            "type": "boolean"
          },
          "IsMultiValue": {
            "type": "boolean"
          },
          "IsRequired": {
            "type": "boolean"
          },
          "IconCssClass": {
            "type": "string"
          },
          "AttributeColor": {
            "type": "string"
          },
          "AllowSearch": {
            "type": "boolean"
          },
          "IsIndexEnabled": {
            "type": "boolean"
          },
          "IsAnalytic": {
            "type": "boolean"
          },
          "IsAnalyticHistory": {
            "type": "boolean"
          },
          "IsActive": {
            "type": "boolean"
          },
          "EnableHistory": {
            "type": "boolean"
          },
          "PreHtml": {
            "type": "string"
          },
          "PostHtml": {
            "type": "string"
          },
          "IsPublic": {
            "type": "boolean"
          },
          "ShowOnBulk": {
            "type": "boolean"
          },
          "EntityType": {
            "$ref": "#/components/schemas/Rock.Model.EntityType"
          },
          "AttributeQualifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rock.Model.AttributeQualifier"
            }
          },
          "FieldType": {
            "$ref": "#/components/schemas/Rock.Model.FieldType"
          },
          "Categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rock.Model.Category"
            }
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "IsSystem": false,
          "FieldTypeId": 0,
          "Order": 0,
          "IsGridColumn": false,
          "IsDefaultPersistedValueDirty": false,
          "IsMultiValue": false,
          "IsRequired": false,
          "AllowSearch": false,
          "IsIndexEnabled": false,
          "IsAnalytic": false,
          "IsAnalyticHistory": false,
          "IsActive": true,
          "EnableHistory": false,
          "IsPublic": false,
          "ShowOnBulk": false,
          "AttributeQualifiers": [],
          "Categories": [],
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "c0e1057d-8589-4a99-b637-16885292306f"
        }
      },
      "Rock.Model.AttributeQualifier": {
        "required": [
          "AttributeId",
          "IsSystem",
          "Key"
        ],
        "type": "object",
        "properties": {
          "IsSystem": {
            "type": "boolean"
          },
          "AttributeId": {
            "type": "integer",
            "format": "int32"
          },
          "Key": {
            "type": "string"
          },
          "Value": {
            "type": "string"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "IsSystem": false,
          "AttributeId": 0,
          "Id": 0,
          "IdKey": "",
          "Guid": "70a5f825-7ecb-431e-8342-6fd278c01799"
        }
      },
      "Rock.Model.Category": {
        "required": [
          "EntityTypeId",
          "IsSystem",
          "Name",
          "Order"
        ],
        "type": "object",
        "properties": {
          "IsSystem": {
            "type": "boolean"
          },
          "ParentCategoryId": {
            "type": "integer",
            "format": "int32"
          },
          "EntityTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "EntityTypeQualifierColumn": {
            "type": "string"
          },
          "EntityTypeQualifierValue": {
            "type": "string"
          },
          "Order": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "IconCssClass": {
            "type": "string"
          },
          "HighlightColor": {
            "type": "string"
          },
          "ChildCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rock.Model.Category"
            }
          },
          "EntityType": {
            "$ref": "#/components/schemas/Rock.Model.EntityType"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "IsSystem": false,
          "EntityTypeId": 0,
          "Order": 0,
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "1d7ff043-5ce6-4077-9883-09358c90fdfa"
        }
      },
      "Rock.Model.EntityType": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "AssemblyName": {
            "type": "string"
          },
          "FriendlyName": {
            "type": "string"
          },
          "IsEntity": {
            "type": "boolean"
          },
          "IsSecured": {
            "type": "boolean"
          },
          "IsCommon": {
            "type": "boolean"
          },
          "SingleValueFieldTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "MultiValueFieldTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "IsIndexingEnabled": {
            "type": "boolean"
          },
          "IsAchievementsEnabled": {
            "type": "boolean"
          },
          "IsMessageBusEventPublishEnabled": {
            "type": "boolean"
          },
          "AttributesSupportPrePostHtml": {
            "type": "boolean"
          },
          "AttributesSupportShowOnBulk": {
            "type": "boolean"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "IsEntity": false,
          "IsSecured": false,
          "IsCommon": false,
          "IsIndexingEnabled": false,
          "IsAchievementsEnabled": false,
          "IsMessageBusEventPublishEnabled": false,
          "AttributesSupportPrePostHtml": false,
          "AttributesSupportShowOnBulk": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "cfc18b4e-f2d2-4570-a5a0-7e2a614dd540"
        }
      },
      "Rock.Model.FieldType": {
        "required": [
          "Assembly",
          "Class",
          "IsSystem",
          "Name"
        ],
        "type": "object",
        "properties": {
          "IsSystem": {
            "type": "boolean"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Assembly": {
            "type": "string"
          },
          "Class": {
            "type": "string"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "IsSystem": false,
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "6c306450-ec5b-4304-a840-a3506c00c523"
        }
      },
      "Rock.Web.Cache.AttributeCache": {
        "type": "object",
        "properties": {
          "AttributeIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "IsSystem": {
            "type": "boolean"
          },
          "FieldTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "EntityTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "EntityTypeQualifierColumn": {
            "type": "string"
          },
          "EntityTypeQualifierValue": {
            "type": "string"
          },
          "Key": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Order": {
            "type": "integer",
            "format": "int32"
          },
          "IconCssClass": {
            "type": "string"
          },
          "IsGridColumn": {
            "type": "boolean"
          },
          "DefaultValue": {
            "type": "string"
          },
          "DefaultPersistedTextValue": {
            "type": "string"
          },
          "DefaultPersistedHtmlValue": {
            "type": "string"
          },
          "DefaultPersistedCondensedTextValue": {
            "type": "string"
          },
          "DefaultPersistedCondensedHtmlValue": {
            "type": "string"
          },
          "IsDefaultPersistedValueDirty": {
            "type": "boolean"
          },
          "IsPersistedValueSupported": {
            "type": "boolean",
            "readOnly": true
          },
          "IsMultiValue": {
            "type": "boolean"
          },
          "IsRequired": {
            "type": "boolean"
          },
          "AllowSearch": {
            "type": "boolean"
          },
          "AttributeColor": {
            "type": "string"
          },
          "IsIndexEnabled": {
            "type": "boolean"
          },
          "IsAnalytic": {
            "type": "boolean"
          },
          "IsAnalyticHistory": {
            "type": "boolean"
          },
          "EnableHistory": {
            "type": "boolean"
          },
          "PreHtml": {
            "type": "string"
          },
          "PostHtml": {
            "type": "string"
          },
          "AbbreviatedName": {
            "type": "string"
          },
          "ShowOnBulk": {
            "type": "boolean"
          },
          "IsPublic": {
            "type": "boolean"
          },
          "IsActive": {
            "type": "boolean"
          },
          "CategoryIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "ConfigurationValues": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "QualifierValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Field.ConfigurationValue"
            }
          },
          "TypeId": {
            "type": "integer",
            "format": "int32"
          },
          "TypeName": {
            "type": "string"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "SupportedActions": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "IdKey": {
            "type": "string"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        }
      },
      "Rock.Web.Cache.AttributeValueCache": {
        "type": "object",
        "properties": {
          "AttributeId": {
            "type": "integer",
            "format": "int32"
          },
          "EntityId": {
            "type": "integer",
            "format": "int32"
          },
          "Value": {
            "type": "string"
          },
          "ValueFormatted": {
            "type": "string",
            "readOnly": true
          },
          "PersistedTextValue": {
            "type": "string"
          },
          "PersistedHtmlValue": {
            "type": "string"
          },
          "PersistedCondensedTextValue": {
            "type": "string"
          },
          "PersistedCondensedHtmlValue": {
            "type": "string"
          },
          "IsPersistedValueDirty": {
            "type": "boolean"
          }
        }
      },
      "Rock.Model.BinaryFile": {
        "required": [
          "FileName",
          "IsSystem",
          "IsTemporary",
          "MimeType"
        ],
        "type": "object",
        "properties": {
          "Url": {
            "type": "string"
          },
          "IsTemporary": {
            "type": "boolean"
          },
          "IsSystem": {
            "type": "boolean"
          },
          "BinaryFileTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "FileName": {
            "type": "string"
          },
          "FileSize": {
            "type": "integer",
            "format": "int64"
          },
          "MimeType": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "StorageEntityTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "Path": {
            "type": "string"
          },
          "Width": {
            "type": "integer",
            "format": "int32"
          },
          "Height": {
            "type": "integer",
            "format": "int32"
          },
          "ContentLastModified": {
            "type": "string",
            "format": "date-time"
          },
          "AdditionalInformation": {
            "type": "string"
          },
          "ParentEntityTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "ParentEntityId": {
            "type": "integer",
            "format": "int32"
          },
          "BinaryFileType": {
            "$ref": "#/components/schemas/Rock.Model.BinaryFileType"
          },
          "Document": {
            "$ref": "#/components/schemas/Rock.Model.Document"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "IsTemporary": false,
          "IsSystem": false,
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "6132c5df-18c9-4171-8519-d739ee35d253"
        }
      },
      "Rock.Model.BinaryFileType": {
        "required": [
          "IsSystem",
          "Name"
        ],
        "type": "object",
        "properties": {
          "IsSystem": {
            "type": "boolean"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "IconCssClass": {
            "type": "string"
          },
          "StorageEntityTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "CacheToServerFileSystem": {
            "type": "boolean"
          },
          "RequiresViewSecurity": {
            "type": "boolean"
          },
          "MaxWidth": {
            "type": "integer",
            "format": "int32"
          },
          "MaxHeight": {
            "type": "integer",
            "format": "int32"
          },
          "PreferredFormat": {
            "type": "string",
            "enum": [
              "Undefined",
              "JPG",
              "GIF",
              "PNG",
              "PDF",
              "Word",
              "Excel",
              "Text",
              "HTML"
            ]
          },
          "PreferredResolution": {
            "type": "string",
            "enum": [
              "Undefined",
              "DPI72",
              "DPI150",
              "DPI300",
              "DPI600"
            ]
          },
          "PreferredColorDepth": {
            "type": "string",
            "enum": [
              "Undefined",
              "BlackWhite",
              "Grayscale8bit",
              "Grayscale24bit",
              "Color8bit",
              "Color24bit"
            ]
          },
          "PreferredRequired": {
            "type": "boolean"
          },
          "CacheControlHeaderSettings": {
            "type": "string"
          },
          "MaxFileSizeBytes": {
            "type": "integer",
            "format": "int32"
          },
          "StorageEntityType": {
            "$ref": "#/components/schemas/Rock.Model.EntityType"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "IsSystem": false,
          "CacheToServerFileSystem": false,
          "RequiresViewSecurity": false,
          "PreferredFormat": -1,
          "PreferredResolution": -1,
          "PreferredColorDepth": -1,
          "PreferredRequired": false,
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "791818aa-d23e-44b4-8b4b-5b277ffac0de"
        }
      },
      "Rock.Model.Block": {
        "required": [
          "BlockTypeId",
          "IsSystem",
          "Name",
          "Order",
          "OutputCacheDuration",
          "Zone"
        ],
        "type": "object",
        "properties": {
          "BlockLocation": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "Layout",
              "Page",
              "Site",
              "None"
            ]
          },
          "IsSystem": {
            "type": "boolean"
          },
          "PageId": {
            "type": "integer",
            "format": "int32"
          },
          "LayoutId": {
            "type": "integer",
            "format": "int32"
          },
          "SiteId": {
            "type": "integer",
            "format": "int32"
          },
          "BlockTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "Zone": {
            "type": "string"
          },
          "Order": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string"
          },
          "CssClass": {
            "type": "string"
          },
          "PreHtml": {
            "type": "string"
          },
          "PostHtml": {
            "type": "string"
          },
          "OutputCacheDuration": {
            "type": "integer",
            "format": "int32"
          },
          "AdditionalSettings": {
            "type": "string"
          },
          "BlockType": {
            "$ref": "#/components/schemas/Rock.Model.BlockType"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "BlockLocation": 3,
          "IsSystem": false,
          "BlockTypeId": 0,
          "Order": 0,
          "OutputCacheDuration": 0,
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "c35ef344-c269-4b55-a3eb-51200b586b13"
        }
      },
      "Rock.Model.BlockType": {
        "required": [
          "IsCommon",
          "IsSystem",
          "Name"
        ],
        "type": "object",
        "properties": {
          "IsSystem": {
            "type": "boolean"
          },
          "IsCommon": {
            "type": "boolean"
          },
          "Name": {
            "type": "string"
          },
          "Category": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "IsSystem": false,
          "IsCommon": false,
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "d8a81157-34cc-43d8-a0c1-f02f8e26653f"
        }
      },
      "Rock.Model.Campus": {
        "required": [
          "IsSystem",
          "Name"
        ],
        "type": "object",
        "properties": {
          "IsSystem": {
            "type": "boolean"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "IsActive": {
            "type": "boolean"
          },
          "ShortCode": {
            "type": "string"
          },
          "Url": {
            "type": "string"
          },
          "LocationId": {
            "type": "integer",
            "format": "int32"
          },
          "PhoneNumber": {
            "type": "string"
          },
          "LeaderPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ServiceTimes": {
            "type": "string"
          },
          "Order": {
            "type": "integer",
            "format": "int32"
          },
          "TimeZoneId": {
            "type": "string"
          },
          "CampusStatusValueId": {
            "type": "integer",
            "format": "int32"
          },
          "CampusTypeValueId": {
            "type": "integer",
            "format": "int32"
          },
          "TeamGroupId": {
            "type": "integer",
            "format": "int32"
          },
          "OpenedDate": {
            "type": "string",
            "format": "date-time"
          },
          "ClosedDate": {
            "type": "string",
            "format": "date-time"
          },
          "TitheMetric": {
            "type": "number",
            "format": "double"
          },
          "Location": {
            "$ref": "#/components/schemas/Rock.Model.Location"
          },
          "LeaderPersonAlias": {
            "$ref": "#/components/schemas/Rock.Model.PersonAlias"
          },
          "CampusStatusValue": {
            "$ref": "#/components/schemas/Rock.Model.DefinedValue"
          },
          "CampusTypeValue": {
            "$ref": "#/components/schemas/Rock.Model.DefinedValue"
          },
          "TeamGroup": {
            "$ref": "#/components/schemas/Rock.Model.Group"
          },
          "CampusSchedules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rock.Model.CampusSchedule"
            }
          },
          "CampusTopics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rock.Model.CampusTopic"
            }
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "IsSystem": false,
          "Order": 0,
          "CampusSchedules": [],
          "CampusTopics": [],
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "94070820-6776-4031-97ce-e1b8f1e7525d"
        }
      },
      "Rock.Model.CampusSchedule": {
        "required": [
          "Order"
        ],
        "type": "object",
        "properties": {
          "CampusId": {
            "type": "integer",
            "format": "int32"
          },
          "ScheduleId": {
            "type": "integer",
            "format": "int32"
          },
          "ScheduleTypeValueId": {
            "type": "integer",
            "format": "int32"
          },
          "Order": {
            "type": "integer",
            "format": "int32"
          },
          "Schedule": {
            "$ref": "#/components/schemas/Rock.Model.Schedule"
          },
          "ScheduleTypeValue": {
            "$ref": "#/components/schemas/Rock.Model.DefinedValue"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "CampusId": 0,
          "ScheduleId": 0,
          "Order": 0,
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "8292fe6e-dd4c-4435-a261-9efd7e86152f"
        }
      },
      "Rock.Model.CampusTopic": {
        "type": "object",
        "properties": {
          "TopicTypeValueId": {
            "type": "integer",
            "format": "int32"
          },
          "Email": {
            "pattern": "\\s*(?:[A-Za-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[A-Za-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?\\.)+[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[A-Za-z0-9-]*[A-Za-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])\\s*",
            "type": "string"
          },
          "IsPublic": {
            "type": "boolean"
          },
          "Campus": {
            "$ref": "#/components/schemas/Rock.Model.Campus"
          },
          "TopicTypeValue": {
            "$ref": "#/components/schemas/Rock.Model.DefinedValue"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "TopicTypeValueId": 0,
          "IsPublic": false,
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "2628a83f-a5fe-493d-bd6e-29c7dfd0f228"
        }
      },
      "Rock.Model.DataView": {
        "required": [
          "EntityTypeId",
          "IsSystem",
          "Name"
        ],
        "type": "object",
        "properties": {
          "IsSystem": {
            "type": "boolean"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "CategoryId": {
            "type": "integer",
            "format": "int32"
          },
          "EntityTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "DataViewFilterId": {
            "type": "integer",
            "format": "int32"
          },
          "TransformEntityTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "PersistedScheduleIntervalMinutes": {
            "type": "integer",
            "format": "int32"
          },
          "PersistedLastRefreshDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "IncludeDeceased": {
            "type": "boolean"
          },
          "PersistedLastRunDurationMilliseconds": {
            "type": "integer",
            "format": "int32"
          },
          "LastRunDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "RunCount": {
            "type": "integer",
            "format": "int32"
          },
          "TimeToRunDurationMilliseconds": {
            "type": "number",
            "format": "double"
          },
          "RunCountLastRefreshDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "DisableUseOfReadOnlyContext": {
            "type": "boolean"
          },
          "PersistedScheduleId": {
            "type": "integer",
            "format": "int32"
          },
          "IconCssClass": {
            "type": "string"
          },
          "HighlightColor": {
            "type": "string"
          },
          "Category": {
            "$ref": "#/components/schemas/Rock.Model.Category"
          },
          "EntityType": {
            "$ref": "#/components/schemas/Rock.Model.EntityType"
          },
          "DataViewFilter": {
            "$ref": "#/components/schemas/Rock.Model.DataViewFilter"
          },
          "TransformEntityType": {
            "$ref": "#/components/schemas/Rock.Model.EntityType"
          },
          "PersistedSchedule": {
            "$ref": "#/components/schemas/Rock.Model.Schedule"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "IsSystem": false,
          "IncludeDeceased": false,
          "DisableUseOfReadOnlyContext": false,
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "a1fc41c7-ba64-4958-a8b2-87c4f194e6d6"
        }
      },
      "Rock.Model.DataViewFilter": {
        "type": "object",
        "properties": {
          "Expanded": {
            "type": "boolean"
          },
          "ExpressionType": {
            "type": "string",
            "enum": [
              "Filter",
              "GroupAll",
              "GroupAny",
              "GroupAllFalse",
              "GroupAnyFalse"
            ]
          },
          "ParentId": {
            "type": "integer",
            "format": "int32"
          },
          "EntityTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "Selection": {
            "type": "string"
          },
          "DataViewId": {
            "type": "integer",
            "format": "int32"
          },
          "RelatedDataViewId": {
            "type": "integer",
            "format": "int32"
          },
          "EntityType": {
            "$ref": "#/components/schemas/Rock.Model.EntityType"
          },
          "ChildFilters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rock.Model.DataViewFilter"
            }
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "Expanded": false,
          "ExpressionType": 0,
          "ChildFilters": [],
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "d3d60eaf-d23e-4d77-b989-20781b655a6f"
        }
      },
      "Rock.Model.DefinedValue": {
        "required": [
          "DefinedTypeId",
          "IsActive",
          "IsSystem",
          "Order",
          "Value"
        ],
        "type": "object",
        "properties": {
          "IsSystem": {
            "type": "boolean"
          },
          "DefinedTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "Order": {
            "type": "integer",
            "format": "int32"
          },
          "Value": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "IsActive": {
            "type": "boolean"
          },
          "CategoryId": {
            "type": "integer",
            "format": "int32"
          },
          "CategoryName": {
            "type": "string",
            "readOnly": true
          },
          "Category": {
            "$ref": "#/components/schemas/Rock.Model.Category"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "IsSystem": false,
          "DefinedTypeId": 0,
          "Order": 0,
          "IsActive": true,
          "CategoryName": "",
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "c28b36b0-6e64-4c99-8c28-7db65b6fed96"
        }
      },
      "Rock.Model.Device": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "DeviceTypeValueId": {
            "type": "integer",
            "format": "int32"
          },
          "LocationId": {
            "type": "integer",
            "format": "int32"
          },
          "IPAddress": {
            "type": "string"
          },
          "PrinterDeviceId": {
            "type": "integer",
            "format": "int32"
          },
          "ProxyDeviceId": {
            "type": "integer",
            "format": "int32"
          },
          "PrintFrom": {
            "type": "string",
            "enum": [
              "Client",
              "Server"
            ]
          },
          "PrintToOverride": {
            "type": "string",
            "enum": [
              "Default",
              "Kiosk",
              "Location"
            ]
          },
          "IsActive": {
            "type": "boolean"
          },
          "HasCamera": {
            "type": "boolean"
          },
          "CameraBarcodeConfigurationType": {
            "type": "string",
            "enum": [
              "Off",
              "Available",
              "AlwaysOn",
              "Passive"
            ]
          },
          "KioskType": {
            "type": "string",
            "enum": [
              "IPad",
              "WindowsApp",
              "Browser"
            ]
          },
          "DeviceType": {
            "$ref": "#/components/schemas/Rock.Model.DefinedValue"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "DeviceTypeValueId": 0,
          "PrintFrom": 0,
          "PrintToOverride": 0,
          "IsActive": true,
          "HasCamera": false,
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "39820508-6dc9-4220-90d2-855356854b3d"
        }
      },
      "Rock.Model.Document": {
        "required": [
          "DocumentTypeId",
          "EntityId",
          "IsSystem",
          "Name"
        ],
        "type": "object",
        "properties": {
          "IsSystem": {
            "type": "boolean"
          },
          "DocumentTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "EntityId": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "DocumentType": {
            "$ref": "#/components/schemas/Rock.Model.DocumentType"
          },
          "BinaryFile": {
            "$ref": "#/components/schemas/Rock.Model.BinaryFile"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "IsSystem": false,
          "DocumentTypeId": 0,
          "EntityId": 0,
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "316eca70-9d4f-42c8-96ba-00f815e9c4ef"
        }
      },
      "Rock.Model.DocumentType": {
        "required": [
          "EntityTypeId",
          "IsImage",
          "IsSystem",
          "Name",
          "Order"
        ],
        "type": "object",
        "properties": {
          "IsSystem": {
            "type": "boolean"
          },
          "Name": {
            "type": "string"
          },
          "EntityTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "EntityTypeQualifierColumn": {
            "type": "string"
          },
          "EntityTypeQualifierValue": {
            "type": "string"
          },
          "UserSelectable": {
            "type": "boolean"
          },
          "IconCssClass": {
            "type": "string"
          },
          "Order": {
            "type": "integer",
            "format": "int32"
          },
          "BinaryFileTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "DefaultDocumentNameTemplate": {
            "type": "string"
          },
          "MaxDocumentsPerEntity": {
            "type": "integer",
            "format": "int32"
          },
          "IsImage": {
            "type": "boolean"
          },
          "EntityType": {
            "$ref": "#/components/schemas/Rock.Model.EntityType"
          },
          "BinaryFileType": {
            "$ref": "#/components/schemas/Rock.Model.BinaryFileType"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "IsSystem": false,
          "EntityTypeId": 0,
          "UserSelectable": false,
          "Order": 0,
          "BinaryFileTypeId": 0,
          "IsImage": false,
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "dad2b513-9df9-4c0f-a916-b117bb0cc0c9"
        }
      },
      "Rock.Model.Group": {
        "required": [
          "GroupTypeId",
          "IsActive",
          "IsPublic",
          "IsSecurityRole",
          "IsSystem",
          "Name",
          "Order"
        ],
        "type": "object",
        "properties": {
          "IsSystem": {
            "type": "boolean"
          },
          "ParentGroupId": {
            "type": "integer",
            "format": "int32"
          },
          "GroupTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "CampusId": {
            "type": "integer",
            "format": "int32"
          },
          "ScheduleId": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "IsSecurityRole": {
            "type": "boolean"
          },
          "ElevatedSecurityLevel": {
            "type": "string",
            "enum": [
              "None",
              "High",
              "Extreme"
            ]
          },
          "IsActive": {
            "type": "boolean"
          },
          "Order": {
            "type": "integer",
            "format": "int32"
          },
          "AllowGuests": {
            "type": "boolean"
          },
          "IsPublic": {
            "type": "boolean"
          },
          "GroupCapacity": {
            "type": "integer",
            "format": "int32"
          },
          "RequiredSignatureDocumentTemplateId": {
            "type": "integer",
            "format": "int32"
          },
          "InactiveDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "IsArchived": {
            "type": "boolean"
          },
          "ArchivedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ArchivedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "StatusValueId": {
            "type": "integer",
            "format": "int32"
          },
          "SchedulingMustMeetRequirements": {
            "type": "boolean"
          },
          "AttendanceRecordRequiredForCheckIn": {
            "type": "string",
            "enum": [
              "ScheduleNotRequired",
              "PreSelect",
              "ScheduleRequired"
            ]
          },
          "ScheduleCancellationPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "GroupAdministratorPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "InactiveReasonValueId": {
            "type": "integer",
            "format": "int32"
          },
          "InactiveReasonNote": {
            "type": "string"
          },
          "RSVPReminderSystemCommunicationId": {
            "type": "integer",
            "format": "int32"
          },
          "RSVPReminderOffsetDays": {
            "type": "integer",
            "format": "int32"
          },
          "DisableScheduleToolboxAccess": {
            "type": "boolean"
          },
          "DisableScheduling": {
            "type": "boolean"
          },
          "GroupSalutation": {
            "type": "string"
          },
          "GroupSalutationFull": {
            "type": "string"
          },
          "ConfirmationAdditionalDetails": {
            "type": "string"
          },
          "ReminderSystemCommunicationId": {
            "type": "integer",
            "format": "int32"
          },
          "ReminderOffsetDays": {
            "type": "integer",
            "format": "int32"
          },
          "ReminderAdditionalDetails": {
            "type": "string"
          },
          "ScheduleConfirmationLogic": {
            "type": "string",
            "enum": [
              "Ask",
              "AutoAccept"
            ]
          },
          "RelationshipGrowthEnabledOverride": {
            "type": "boolean"
          },
          "RelationshipStrengthOverride": {
            "type": "integer",
            "format": "int32"
          },
          "LeaderToLeaderRelationshipMultiplierOverride": {
            "type": "number",
            "format": "double"
          },
          "LeaderToNonLeaderRelationshipMultiplierOverride": {
            "type": "number",
            "format": "double"
          },
          "NonLeaderToNonLeaderRelationshipMultiplierOverride": {
            "type": "number",
            "format": "double"
          },
          "NonLeaderToLeaderRelationshipMultiplierOverride": {
            "type": "number",
            "format": "double"
          },
          "RSVPReminderSystemCommunication": {
            "$ref": "#/components/schemas/Rock.Model.SystemCommunication"
          },
          "GroupType": {
            "$ref": "#/components/schemas/Rock.Model.GroupType"
          },
          "Campus": {
            "$ref": "#/components/schemas/Rock.Model.Campus"
          },
          "Schedule": {
            "$ref": "#/components/schemas/Rock.Model.Schedule"
          },
          "RequiredSignatureDocumentTemplate": {
            "$ref": "#/components/schemas/Rock.Model.SignatureDocumentTemplate"
          },
          "ArchivedByPersonAlias": {
            "$ref": "#/components/schemas/Rock.Model.PersonAlias"
          },
          "GroupAdministratorPersonAlias": {
            "$ref": "#/components/schemas/Rock.Model.PersonAlias"
          },
          "Members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rock.Model.GroupMember"
            }
          },
          "GroupLocations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rock.Model.GroupLocation"
            }
          },
          "GroupRequirements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rock.Model.GroupRequirement"
            }
          },
          "GroupSyncs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rock.Model.GroupSync"
            }
          },
          "StatusValue": {
            "$ref": "#/components/schemas/Rock.Model.DefinedValue"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "IsSystem": false,
          "GroupTypeId": 0,
          "IsSecurityRole": false,
          "ElevatedSecurityLevel": 0,
          "IsActive": true,
          "Order": 0,
          "IsPublic": true,
          "IsArchived": false,
          "SchedulingMustMeetRequirements": false,
          "AttendanceRecordRequiredForCheckIn": 0,
          "DisableScheduleToolboxAccess": false,
          "DisableScheduling": false,
          "Members": [],
          "GroupLocations": [],
          "GroupRequirements": [],
          "GroupSyncs": [],
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "800d77a8-8fa7-4bf5-b5c7-f48d894c9e14"
        }
      },
      "Rock.Model.GroupLocation": {
        "required": [
          "Order"
        ],
        "type": "object",
        "properties": {
          "GroupId": {
            "type": "integer",
            "format": "int32"
          },
          "LocationId": {
            "type": "integer",
            "format": "int32"
          },
          "GroupLocationTypeValueId": {
            "type": "integer",
            "format": "int32"
          },
          "IsMailingLocation": {
            "type": "boolean"
          },
          "IsMappedLocation": {
            "type": "boolean"
          },
          "IsOverflowLocation": {
            "type": "boolean"
          },
          "GroupMemberPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "Order": {
            "type": "integer",
            "format": "int32"
          },
          "Location": {
            "$ref": "#/components/schemas/Rock.Model.Location"
          },
          "GroupLocationTypeValue": {
            "$ref": "#/components/schemas/Rock.Model.DefinedValue"
          },
          "Schedules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rock.Model.Schedule"
            }
          },
          "GroupLocationScheduleConfigs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rock.Model.GroupLocationScheduleConfig"
            }
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "GroupId": 0,
          "LocationId": 0,
          "IsMailingLocation": false,
          "IsMappedLocation": false,
          "IsOverflowLocation": false,
          "Order": 0,
          "Schedules": [],
          "GroupLocationScheduleConfigs": [],
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "b2c1236d-04f4-43b3-91ca-06f09e6aedcb"
        }
      },
      "Rock.Model.GroupLocationScheduleConfig": {
        "type": "object",
        "properties": {
          "GroupLocationId": {
            "type": "integer",
            "format": "int32"
          },
          "ScheduleId": {
            "type": "integer",
            "format": "int32"
          },
          "MinimumCapacity": {
            "type": "integer",
            "format": "int32"
          },
          "DesiredCapacity": {
            "type": "integer",
            "format": "int32"
          },
          "MaximumCapacity": {
            "type": "integer",
            "format": "int32"
          },
          "ConfirmationAdditionalDetails": {
            "type": "string"
          },
          "ConfigurationName": {
            "type": "string"
          },
          "ReminderAdditionalDetails": {
            "type": "string"
          },
          "GroupLocation": {
            "$ref": "#/components/schemas/Rock.Model.GroupLocation"
          },
          "Schedule": {
            "$ref": "#/components/schemas/Rock.Model.Schedule"
          }
        }
      },
      "Rock.Model.GroupMember": {
        "required": [
          "GroupId",
          "GroupMemberStatus",
          "GroupRoleId",
          "GroupTypeId",
          "IsSystem",
          "PersonId"
        ],
        "type": "object",
        "properties": {
          "IsSystem": {
            "type": "boolean"
          },
          "GroupId": {
            "type": "integer",
            "format": "int32"
          },
          "GroupTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "PersonId": {
            "type": "integer",
            "format": "int32"
          },
          "GroupRoleId": {
            "type": "integer",
            "format": "int32"
          },
          "Note": {
            "type": "string"
          },
          "GroupMemberStatus": {
            "type": "string",
            "enum": [
              "Inactive",
              "Active",
              "Pending"
            ]
          },
          "GuestCount": {
            "type": "integer",
            "format": "int32"
          },
          "DateTimeAdded": {
            "type": "string",
            "format": "date-time"
          },
          "IsNotified": {
            "type": "boolean"
          },
          "GroupOrder": {
            "type": "integer",
            "format": "int32"
          },
          "InactiveDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "IsArchived": {
            "type": "boolean"
          },
          "ArchivedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ArchivedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ScheduleTemplateId": {
            "type": "integer",
            "format": "int32"
          },
          "ScheduleStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "ScheduleReminderEmailOffsetDays": {
            "type": "integer",
            "format": "int32"
          },
          "CommunicationPreference": {
            "type": "string",
            "enum": [
              "RecipientPreference",
              "Email",
              "SMS",
              "PushNotification"
            ]
          },
          "Person": {
            "$ref": "#/components/schemas/Rock.Model.Person"
          },
          "GroupRole": {
            "$ref": "#/components/schemas/Rock.Model.GroupTypeRole"
          },
          "ArchivedByPersonAlias": {
            "$ref": "#/components/schemas/Rock.Model.PersonAlias"
          },
          "GroupMemberRequirements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rock.Model.GroupMemberRequirement"
            }
          },
          "ScheduleTemplate": {
            "$ref": "#/components/schemas/Rock.Model.GroupMemberScheduleTemplate"
          },
          "GroupMemberAssignments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rock.Model.GroupMemberAssignment"
            }
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "IsSystem": false,
          "GroupId": 0,
          "GroupTypeId": 0,
          "PersonId": 0,
          "GroupRoleId": 0,
          "GroupMemberStatus": 1,
          "IsNotified": false,
          "IsArchived": false,
          "CommunicationPreference": 0,
          "GroupMemberRequirements": [],
          "GroupMemberAssignments": [],
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "a49bb89f-082a-42ad-a259-c601cb6fca64"
        }
      },
      "Rock.Model.GroupMemberAssignment": {
        "required": [
          "GroupId"
        ],
        "type": "object",
        "properties": {
          "GroupId": {
            "type": "integer",
            "format": "int32"
          },
          "GroupMemberId": {
            "type": "integer",
            "format": "int32"
          },
          "LocationId": {
            "type": "integer",
            "format": "int32"
          },
          "ScheduleId": {
            "type": "integer",
            "format": "int32"
          },
          "ConfirmationSentDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "Location": {
            "$ref": "#/components/schemas/Rock.Model.Location"
          },
          "Schedule": {
            "$ref": "#/components/schemas/Rock.Model.Schedule"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "GroupId": 0,
          "GroupMemberId": 0,
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "8a28e523-9152-4eb5-b6a9-a1223e323f8a"
        }
      },
      "Rock.Model.GroupMemberRequirement": {
        "required": [
          "GroupMemberId",
          "GroupRequirementId"
        ],
        "type": "object",
        "properties": {
          "GroupMemberId": {
            "type": "integer",
            "format": "int32"
          },
          "GroupRequirementId": {
            "type": "integer",
            "format": "int32"
          },
          "RequirementMetDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "RequirementFailDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "RequirementWarningDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "LastRequirementCheckDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "DoesNotMeetWorkflowId": {
            "type": "integer",
            "format": "int32"
          },
          "WarningWorkflowId": {
            "type": "integer",
            "format": "int32"
          },
          "WasManuallyCompleted": {
            "type": "boolean"
          },
          "ManuallyCompletedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ManuallyCompletedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "WasOverridden": {
            "type": "boolean"
          },
          "OverriddenByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "OverriddenDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "DueDate": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "GroupMemberId": 0,
          "GroupRequirementId": 0,
          "WasManuallyCompleted": false,
          "WasOverridden": false,
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "daf91344-a7d1-4a3b-8bec-8e101ae3ec8e"
        }
      },
      "Rock.Model.GroupMemberScheduleTemplate": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "GroupTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "ScheduleId": {
            "type": "integer",
            "format": "int32"
          },
          "GroupType": {
            "$ref": "#/components/schemas/Rock.Model.GroupType"
          },
          "Schedule": {
            "$ref": "#/components/schemas/Rock.Model.Schedule"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "ScheduleId": 0,
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "d03057d0-3db5-4f66-a633-d8f0d996f186"
        }
      },
      "Rock.Model.GroupRequirement": {
        "required": [
          "GroupRequirementTypeId"
        ],
        "type": "object",
        "properties": {
          "GroupId": {
            "type": "integer",
            "format": "int32"
          },
          "GroupTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "GroupRequirementTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "GroupRoleId": {
            "type": "integer",
            "format": "int32"
          },
          "MustMeetRequirementToAddMember": {
            "type": "boolean"
          },
          "AppliesToAgeClassification": {
            "type": "string",
            "enum": [
              "All",
              "Adults",
              "Children"
            ]
          },
          "AppliesToDataViewId": {
            "type": "integer",
            "format": "int32"
          },
          "AllowLeadersToOverride": {
            "type": "boolean"
          },
          "DueDateAttributeId": {
            "type": "integer",
            "format": "int32"
          },
          "DueDateStaticDate": {
            "type": "string",
            "format": "date-time"
          },
          "GroupRequirementType": {
            "$ref": "#/components/schemas/Rock.Model.GroupRequirementType"
          },
          "DueDateAttribute": {
            "$ref": "#/components/schemas/Rock.Model.Attribute"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "GroupRequirementTypeId": 0,
          "MustMeetRequirementToAddMember": false,
          "AppliesToAgeClassification": 0,
          "AllowLeadersToOverride": false,
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "f55d36f0-0d56-4b76-a51f-100e381fb5b9"
        }
      },
      "Rock.Model.GroupRequirementType": {
        "required": [
          "CanExpire",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "CanExpire": {
            "type": "boolean"
          },
          "ExpireInDays": {
            "type": "integer",
            "format": "int32"
          },
          "RequirementCheckType": {
            "type": "string",
            "enum": [
              "Sql",
              "Dataview",
              "Manual"
            ]
          },
          "SqlExpression": {
            "type": "string"
          },
          "DataViewId": {
            "type": "integer",
            "format": "int32"
          },
          "WarningSqlExpression": {
            "type": "string"
          },
          "WarningDataViewId": {
            "type": "integer",
            "format": "int32"
          },
          "PositiveLabel": {
            "type": "string"
          },
          "NegativeLabel": {
            "type": "string"
          },
          "WarningLabel": {
            "type": "string"
          },
          "CheckboxLabel": {
            "type": "string"
          },
          "IconCssClass": {
            "type": "string"
          },
          "DueDateType": {
            "type": "string",
            "enum": [
              "Immediate",
              "ConfiguredDate",
              "GroupAttribute",
              "DaysAfterJoining"
            ]
          },
          "DueDateOffsetInDays": {
            "type": "integer",
            "format": "int32"
          },
          "CategoryId": {
            "type": "integer",
            "format": "int32"
          },
          "DoesNotMeetWorkflowTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "ShouldAutoInitiateDoesNotMeetWorkflow": {
            "type": "boolean"
          },
          "DoesNotMeetWorkflowLinkText": {
            "type": "string"
          },
          "WarningWorkflowTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "ShouldAutoInitiateWarningWorkflow": {
            "type": "boolean"
          },
          "WarningWorkflowLinkText": {
            "type": "string"
          },
          "Summary": {
            "type": "string"
          },
          "Category": {
            "$ref": "#/components/schemas/Rock.Model.Category"
          },
          "DoesNotMeetWorkflowType": {
            "$ref": "#/components/schemas/Rock.Model.WorkflowType"
          },
          "WarningWorkflowType": {
            "$ref": "#/components/schemas/Rock.Model.WorkflowType"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "CanExpire": false,
          "RequirementCheckType": 0,
          "DueDateType": 0,
          "ShouldAutoInitiateDoesNotMeetWorkflow": false,
          "ShouldAutoInitiateWarningWorkflow": false,
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "a230e94d-97b6-41f7-b6fe-9a15d855c14e"
        }
      },
      "Rock.Model.GroupSync": {
        "required": [
          "GroupId",
          "GroupTypeRoleId",
          "SyncDataViewId"
        ],
        "type": "object",
        "properties": {
          "GroupId": {
            "type": "integer",
            "format": "int32"
          },
          "GroupTypeRoleId": {
            "type": "integer",
            "format": "int32"
          },
          "SyncDataViewId": {
            "type": "integer",
            "format": "int32"
          },
          "WelcomeSystemCommunicationId": {
            "type": "integer",
            "format": "int32"
          },
          "ExitSystemCommunicationId": {
            "type": "integer",
            "format": "int32"
          },
          "AddUserAccountsDuringSync": {
            "type": "boolean"
          },
          "ScheduleIntervalMinutes": {
            "type": "integer",
            "format": "int32"
          },
          "LastRefreshDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "Group": {
            "$ref": "#/components/schemas/Rock.Model.Group"
          },
          "GroupTypeRole": {
            "$ref": "#/components/schemas/Rock.Model.GroupTypeRole"
          },
          "SyncDataView": {
            "$ref": "#/components/schemas/Rock.Model.DataView"
          },
          "WelcomeSystemCommunication": {
            "$ref": "#/components/schemas/Rock.Model.SystemCommunication"
          },
          "ExitSystemCommunication": {
            "$ref": "#/components/schemas/Rock.Model.SystemCommunication"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "GroupId": 0,
          "GroupTypeRoleId": 0,
          "SyncDataViewId": 0,
          "AddUserAccountsDuringSync": false,
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "27a33808-f134-4efb-af8e-d0f5df9b93a5"
        }
      },
      "Rock.Model.GroupType": {
        "required": [
          "GroupMemberTerm",
          "GroupTerm",
          "IsCapacityRequired",
          "IsSystem",
          "Name",
          "Order",
          "ShowAdministrator"
        ],
        "type": "object",
        "properties": {
          "IsSystem": {
            "type": "boolean"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "GroupTerm": {
            "type": "string"
          },
          "GroupMemberTerm": {
            "type": "string"
          },
          "DefaultGroupRoleId": {
            "type": "integer",
            "format": "int32"
          },
          "AllowMultipleLocations": {
            "type": "boolean"
          },
          "ShowInGroupList": {
            "type": "boolean"
          },
          "ShowInNavigation": {
            "type": "boolean"
          },
          "IconCssClass": {
            "type": "string"
          },
          "TakesAttendance": {
            "type": "boolean"
          },
          "AttendanceCountsAsWeekendService": {
            "type": "boolean"
          },
          "SendAttendanceReminder": {
            "type": "boolean"
          },
          "ShowConnectionStatus": {
            "type": "boolean"
          },
          "ShowMaritalStatus": {
            "type": "boolean"
          },
          "AttendanceRule": {
            "type": "string",
            "enum": [
              "None",
              "AddOnCheckIn",
              "AlreadyBelongs"
            ]
          },
          "GroupCapacityRule": {
            "type": "string",
            "enum": [
              "None",
              "Hard",
              "Soft"
            ]
          },
          "AttendancePrintTo": {
            "type": "string",
            "enum": [
              "Default",
              "Kiosk",
              "Location"
            ]
          },
          "Order": {
            "type": "integer",
            "format": "int32"
          },
          "InheritedGroupTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "AllowedScheduleTypes": {
            "type": "string",
            "enum": [
              "None",
              "Weekly",
              "Custom",
              "Named"
            ]
          },
          "LocationSelectionMode": {
            "type": "string",
            "enum": [
              "None",
              "Address",
              "Named",
              "Point",
              "Polygon",
              "GroupMember",
              "All"
            ]
          },
          "EnableLocationSchedules": {
            "type": "boolean"
          },
          "GroupTypePurposeValueId": {
            "type": "integer",
            "format": "int32"
          },
          "IgnorePersonInactivated": {
            "type": "boolean"
          },
          "IsIndexEnabled": {
            "type": "boolean"
          },
          "GroupsRequireCampus": {
            "type": "boolean"
          },
          "GroupAttendanceRequiresLocation": {
            "type": "boolean"
          },
          "GroupAttendanceRequiresSchedule": {
            "type": "boolean"
          },
          "GroupViewLavaTemplate": {
            "type": "string"
          },
          "AllowSpecificGroupMemberAttributes": {
            "type": "boolean"
          },
          "EnableSpecificGroupRequirements": {
            "type": "boolean"
          },
          "AllowGroupSync": {
            "type": "boolean"
          },
          "AllowSpecificGroupMemberWorkflows": {
            "type": "boolean"
          },
          "EnableGroupHistory": {
            "type": "boolean"
          },
          "EnableGroupTag": {
            "type": "boolean"
          },
          "GroupTypeColor": {
            "type": "string"
          },
          "GroupStatusDefinedTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "EnableRSVP": {
            "type": "boolean"
          },
          "EnableInactiveReason": {
            "type": "boolean"
          },
          "RequiresInactiveReason": {
            "type": "boolean"
          },
          "AllowAnyChildGroupType": {
            "type": "boolean"
          },
          "IsCapacityRequired": {
            "type": "boolean"
          },
          "ScheduleConfirmationLogic": {
            "type": "string",
            "enum": [
              "Ask",
              "AutoAccept"
            ]
          },
          "AttendanceReminderSystemCommunicationId": {
            "type": "integer",
            "format": "int32"
          },
          "AttendanceReminderSendStartOffsetMinutes": {
            "type": "integer",
            "format": "int32"
          },
          "AttendanceReminderFollowupDays": {
            "type": "string"
          },
          "IsPeerNetworkEnabled": {
            "type": "boolean"
          },
          "RelationshipGrowthEnabled": {
            "type": "boolean"
          },
          "RelationshipStrength": {
            "type": "integer",
            "format": "int32"
          },
          "LeaderToLeaderRelationshipMultiplier": {
            "type": "number",
            "format": "double"
          },
          "LeaderToNonLeaderRelationshipMultiplier": {
            "type": "number",
            "format": "double"
          },
          "NonLeaderToNonLeaderRelationshipMultiplier": {
            "type": "number",
            "format": "double"
          },
          "NonLeaderToLeaderRelationshipMultiplier": {
            "type": "number",
            "format": "double"
          },
          "IsSchedulingEnabled": {
            "type": "boolean"
          },
          "ScheduleConfirmationSystemCommunicationId": {
            "type": "integer",
            "format": "int32"
          },
          "ScheduleReminderSystemCommunicationId": {
            "type": "integer",
            "format": "int32"
          },
          "RSVPReminderSystemCommunicationId": {
            "type": "integer",
            "format": "int32"
          },
          "RSVPReminderOffsetDays": {
            "type": "integer",
            "format": "int32"
          },
          "ScheduleCancellationWorkflowTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "ScheduleConfirmationEmailOffsetDays": {
            "type": "integer",
            "format": "int32"
          },
          "ScheduleReminderEmailOffsetDays": {
            "type": "integer",
            "format": "int32"
          },
          "RequiresReasonIfDeclineSchedule": {
            "type": "boolean"
          },
          "AdministratorTerm": {
            "type": "string"
          },
          "ShowAdministrator": {
            "type": "boolean"
          },
          "ChildGroupTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rock.Model.GroupType"
            }
          },
          "Roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rock.Model.GroupTypeRole"
            }
          },
          "LocationTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rock.Model.GroupTypeLocationType"
            }
          },
          "DefaultGroupRole": {
            "$ref": "#/components/schemas/Rock.Model.GroupTypeRole"
          },
          "GroupTypePurposeValue": {
            "$ref": "#/components/schemas/Rock.Model.DefinedValue"
          },
          "ScheduleConfirmationSystemCommunication": {
            "$ref": "#/components/schemas/Rock.Model.SystemCommunication"
          },
          "ScheduleReminderSystemCommunication": {
            "$ref": "#/components/schemas/Rock.Model.SystemCommunication"
          },
          "ScheduleCancellationWorkflowType": {
            "$ref": "#/components/schemas/Rock.Model.WorkflowType"
          },
          "GroupRequirements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rock.Model.GroupRequirement"
            }
          },
          "AttendanceReminderSystemCommunication": {
            "$ref": "#/components/schemas/Rock.Model.SystemCommunication"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "IsSystem": false,
          "GroupTerm": "Group",
          "GroupMemberTerm": "Member",
          "AllowMultipleLocations": false,
          "ShowInGroupList": true,
          "ShowInNavigation": true,
          "TakesAttendance": false,
          "AttendanceCountsAsWeekendService": false,
          "SendAttendanceReminder": false,
          "ShowConnectionStatus": false,
          "ShowMaritalStatus": false,
          "AttendanceRule": 0,
          "GroupCapacityRule": 0,
          "AttendancePrintTo": 0,
          "Order": 0,
          "AllowedScheduleTypes": 0,
          "LocationSelectionMode": 0,
          "IgnorePersonInactivated": false,
          "IsIndexEnabled": false,
          "GroupsRequireCampus": false,
          "GroupAttendanceRequiresLocation": false,
          "GroupAttendanceRequiresSchedule": false,
          "GroupViewLavaTemplate": "{% if Group.GroupType.GroupCapacityRule != 'None' and Group.GroupCapacity != '' %}\r\n\t\t{% assign warningLevel = 'warning' %}\r\n\r\n\t\t{% if Group.GroupType.GroupCapacityRule == 'Hard' %}\r\n\t\t\t{% assign warningLevel = 'danger' %}\r\n\t\t{% endif %}\r\n\r\n\t\t{% assign activeMemberCount = countActive | Plus:1 %} {% comment %}the counter is zero based{% endcomment %}\r\n\t\t{% assign overageAmount = activeMemberCount | Minus:Group.GroupCapacity %}\r\n\r\n\t\t{% if overageAmount > 0 %}\r\n\t\t\t<div class=\"alert alert-{{ warningLevel }} margin-t-sm\">This group is over capacity by {{ overageAmount }} {{ 'individual' | PluralizeForQuantity:overageAmount }}.</div>\r\n\t\t{% endif %}\r\n\t{% endif %}\r\n\r\n\r\n\r\n{% if Group.Description != '' -%}\r\n    <p class='description'>{{ Group.Description }}</p>\r\n{% endif -%}\r\n\r\n<div class=\"row\">\r\n   <div class=\"col-md-6\">\r\n        <dl>\r\n            {% if Group.ParentGroup != null %}\r\n            <dt> Parent Group </ dt>\r\n               <dd>{{ Group.ParentGroup.Name }}</dd>\r\n            {% endif %}\r\n            {% if Group.RequiredSignatureDocumentTemplate != null %}\r\n            <dt> Required Signed Document </dt>\r\n               <dd>{{ Group.RequiredSignatureDocumentTemplate.Name }}</ dd >\r\n            {% endif %}\r\n            {% if Group.Schedule != null %}\r\n\r\n            <dt> Schedule </dt>\r\n            <dd>{{ Group.Schedule.FriendlyScheduleText }}</ dd >\r\n            {% endif %}\r\n            {% if Group.GroupCapacity != null and Group.GroupCapacity != '' %}\r\n\r\n            <dt> Capacity </dt>\r\n\r\n            <dd>{{ Group.GroupCapacity }}</dd>\r\n            {% endif %}\r\n        {% if Group.GroupType.ShowAdministrator and Group.GroupAdministratorPersonAlias != null and Group.GroupAdministratorPersonAlias != '' %}\r\n            <dt> {{ Group.GroupType.AdministratorTerm }}</dt>\r\n            <dd>{{ Group.GroupAdministratorPersonAlias.Person.FullName }}</dd>\r\n            {% endif %}\r\n        </dl>\r\n        <dl>\r\n        {% for attribute in Group.AttributeValues %}\r\n            {% if attribute.ValueFormatted != '' %}\r\n                <dt>{{ attribute.AttributeName }}</dt>\r\n                <dd>{{ attribute.ValueFormatted }}</dd>\r\n            {% endif %}\r\n        {% endfor %}\r\n        </dl>\r\n    </div>\r\n\r\n    <div class=\"col-md-6 location-maps\">\r\n\t{% assign googleAPIKey = 'Global' | Attribute: 'GoogleAPIKey' %}\r\n\t{% assign staticMapStyle = MapStyle | Attribute: 'StaticMapStyle' %}\r\n\r\n\t{% if Group.GroupLocations != null %}\r\n\t{% assign groupLocations = Group.GroupLocations %}\r\n\t{% assign locationCount = groupLocations | Size %}\r\n\t    {% if locationCount > 0 and googleAPIKey != null and googleAPIKey !='' and staticMapStyle != null and staticMapStyle != '' %}\r\n\t\t{% for groupLocation in groupLocations %}\r\n\t    \t{% if groupLocation.Location.GeoPoint != null and groupLocation.Location.GeoPoint != '' %}\r\n\t    \t{% capture markerPoints %}{{ groupLocation.Location.Latitude }},{{ groupLocation.Location.Longitude }}{% endcapture %}\r\n\t    \t{% assign mapLink = staticMapStyle | Replace:'{MarkerPoints}', markerPoints %}\r\n\t    \t{% assign mapLink = mapLink | Replace:'{PolygonPoints}','' %}\r\n\t    \t{% assign mapLink = mapLink | Append:'&sensor=false&size=450x250&zoom=13&format=png&key=' %}\r\n            {% assign mapLink = mapLink | Append: googleAPIKey %}\r\n\t    \t<div class=\"group-location-map\">\r\n\t    \t    {% if groupLocation.GroupLocationTypeValue != null %}\r\n\t    \t    <h4> {{ groupLocation.GroupLocationTypeValue.Value }} </h4>\r\n\t    \t    {% endif %}\r\n\t    \t    <a href = '{{ GroupMapUrl }}'>\r\n\t    \t    <img class='img-thumbnail' src='{{ mapLink }}'/>\r\n\t    \t    </a>\r\n\t    \t    {% if groupLocation.Location.FormattedAddress != null and groupLocation.Location.FormattedAddress != '' and ShowLocationAddresses == true %}\r\n\t    \t    {{ groupLocation.Location.FormattedAddress }}\r\n\t    \t    {% endif %}\r\n\t    \t </div>\r\n\t\t    {% endif %}\r\n\t\t    {% if groupLocation.Location.GeoFence != null and groupLocation.Location.GeoFence != '' %}\r\n\r\n\t\t    {% assign mapLink = staticMapStyle | Replace:'{MarkerPoints}','' %}\r\n\t\t    {% assign googlePolygon = 'enc:' | Append: groupLocation.Location.GooglePolygon %}\r\n\t    \t{% assign mapLink = mapLink | Replace:'{PolygonPoints}', googlePolygon %}\r\n\t    \t{% assign mapLink = mapLink | Append:'&sensor=false&size=350x200&format=png&key=' %}\r\n\t    \t{% assign mapLink = mapLink | Append: googleAPIKey %}\r\n\t\t    <div class='group-location-map'>\r\n\t\t        {% if groupLocation.GroupLocationTypeValue != null %}\r\n\t\t        <h4> {{ groupLocation.GroupLocationTypeValue.Value }} </h4>\r\n\t\t        {% endif %}\r\n\t\t    <a href = '{{ GroupMapUrl }}'><img class='img-thumbnail' src='{{ mapLink }}'/></a>\r\n\t\t    </div>\r\n\t\t    {% endif %}\r\n\t\t{% endfor %}\r\n\t\t{% endif %}\r\n\t{% endif %}\r\n\t{% if Group.Linkages != null %}\r\n\t{% assign linkages = Group.Linkages %}\r\n\t{% assign linkageCount = linkages | Size %}\r\n\t{% if linkageCount > 0 %}\r\n\t{% assign countRegistration = 0 %}\r\n\t{% assign countLoop = 0 %}\r\n\t{% assign countEventItemOccurrences = 0 %}\r\n\t{% assign countContentItems = 0 %}\r\n\t{% for linkage in linkages %}\r\n\t\t{% if linkage.RegistrationInstanceId != null and linkage.RegistrationInstanceId != '' %}\r\n\t\t\t{% if countRegistration == 0 %}\r\n\t\t\t<strong> Registrations</strong>\r\n\t\t\t<ul class=\"list-unstyled\">\r\n\t\t\t{% endif %}\r\n\t\t\t<li><a href = '{{ RegistrationInstancePage }}?RegistrationInstanceId={{ linkage.RegistrationInstanceId }}'>{% if linkage.EventItemOccurrence != null %} {{ linkage.EventItemOccurrence.EventItem.Name }} ({% if linkage.EventItemOccurrence.Campus != null %} {{ linkage.EventItemOccurrence.Campus.Name }}  {% else %}  All Campuses {% endif %}) {% endif %} - {{ linkage.RegistrationInstance.Name }}</a></li>\r\n\t\t\t{% assign countRegistration = countRegistration | Plus: 1 %}\r\n\t\t{% endif %}\r\n\t\t{% assign countLoop = countLoop | Plus: 1 %}\r\n\t\t{% if countRegistration > 0 and countLoop == linkageCount %}\r\n\t\t</ul>\r\n\t\t{% endif %}\r\n\t{% endfor %}\r\n\t{% assign countLoop = 0 %}\r\n\t{% for linkage in linkages %}\r\n\t\t{% if linkage.EventItemOccurrence != null and linkage.EventItemOccurrence.EventItem != null %}\r\n\t\t\t{% if countEventItemOccurrences == 0 %}\r\n\t\t\t<strong> Event Item Occurrences</strong>\r\n\t\t\t<ul class=\"list-unstyled\">\r\n\t\t\t{% endif %}\r\n\t\t\t<li><a href = '{{ EventItemOccurrencePage }}?EventItemOccurrenceId={{ linkage.EventItemOccurrence.Id }}'>{% if linkage.EventItemOccurrence != null %} {{ linkage.EventItemOccurrence.EventItem.Name }} -{% if linkage.EventItemOccurrence.Campus != null %} {{ linkage.EventItemOccurrence.Campus.Name }}  {% else %}  All Campuses {% endif %} {% endif %}</a></li>\r\n\t\t\t{% assign countEventItemOccurrences = countEventItemOccurrences | Plus: 1 %}\r\n\t\t{% endif %}\r\n\t\t{% assign countLoop = countLoop | Plus: 1 %}\r\n\t\t{% if countEventItemOccurrences > 0 and countLoop == linkageCount %}\r\n\t\t\t</ul>\r\n\t\t{% endif %}\r\n\t{% endfor %}\r\n\t{% assign countLoop = 0 %}\r\n\t{% for linkage in linkages %}\r\n\t\t{% if linkage.EventItemOccurrence != null and linkage.EventItemOccurrence.EventItem != null %}\r\n\t\t\t{% assign contentChannelItemsCount = linkage.EventItemOccurrence.ContentChannelItems | Size %}\r\n\t\t\t{% if contentChannelItemsCount > 0 %}\r\n\t\t\t{% assign contentChannelItems = linkage.EventItemOccurrence.ContentChannelItems %}\r\n\t\t\t\t{% for contentChannelItem in contentChannelItems %}\r\n\t\t\t\t{% if contentChannelItem.ContentChannelItem != null %}\r\n\t\t\t\t\t{% if countContentItems == 0 %}\r\n\t\t\t\t\t<strong> Content Items</strong>\r\n\t\t\t\t\t<ul class=\"list-unstyled\">\r\n\t\t\t\t\t{% endif %}\r\n\t\t\t\t\t<li><a href = '{{ ContentItemPage }}?ContentItemId={{ contentChannelItem.ContentChannelItemId }}'>{{ contentChannelItem.ContentChannelItem.Title }} <small>({{ contentChannelItem.ContentChannelItem.ContentChannelType.Name }})</small></a></li>\r\n\t\t\t\t\t{% assign countContentItems = countContentItems | Plus: 1 %}\r\n\t\t\t\t{% endif %}\r\n\t\t\t\t{% endfor %}\r\n\t\t\t{% endif %}\r\n    \t{% endif %}\r\n    \t{% assign countLoop = countLoop | Plus: 1 %}\r\n    \t{% if countContentItems > 0 and countLoop == linkageCount %}\r\n\t\t\t</ul>\r\n\t\t{% endif %}\r\n\t{% endfor %}\r\n\t{% endif %}\r\n{% endif %}\r\n\t</div>\r\n</div>",
          "AllowSpecificGroupMemberAttributes": false,
          "EnableSpecificGroupRequirements": false,
          "AllowGroupSync": false,
          "AllowSpecificGroupMemberWorkflows": false,
          "EnableGroupHistory": false,
          "EnableGroupTag": false,
          "EnableRSVP": false,
          "EnableInactiveReason": false,
          "RequiresInactiveReason": false,
          "AllowAnyChildGroupType": false,
          "IsCapacityRequired": false,
          "ScheduleConfirmationLogic": 0,
          "IsPeerNetworkEnabled": false,
          "RelationshipGrowthEnabled": false,
          "RelationshipStrength": 0,
          "LeaderToLeaderRelationshipMultiplier": 0,
          "LeaderToNonLeaderRelationshipMultiplier": 0,
          "NonLeaderToNonLeaderRelationshipMultiplier": 0,
          "NonLeaderToLeaderRelationshipMultiplier": 0,
          "IsSchedulingEnabled": false,
          "ScheduleConfirmationEmailOffsetDays": 4,
          "ScheduleReminderEmailOffsetDays": 2,
          "RequiresReasonIfDeclineSchedule": false,
          "AdministratorTerm": "Administrator",
          "ShowAdministrator": false,
          "ChildGroupTypes": [],
          "Roles": [],
          "LocationTypes": [],
          "GroupRequirements": [],
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "b8da1b83-1b6d-471b-8aaf-c7311ee9fb48"
        }
      },
      "Rock.Model.GroupTypeLocationType": {
        "type": "object",
        "properties": {
          "GroupTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "LocationTypeValueId": {
            "type": "integer",
            "format": "int32"
          },
          "GroupType": {
            "$ref": "#/components/schemas/Rock.Model.GroupType"
          },
          "LocationTypeValue": {
            "$ref": "#/components/schemas/Rock.Model.DefinedValue"
          }
        }
      },
      "Rock.Model.GroupTypeRole": {
        "required": [
          "IsSystem",
          "Name"
        ],
        "type": "object",
        "properties": {
          "IsSystem": {
            "type": "boolean"
          },
          "GroupTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Order": {
            "type": "integer",
            "format": "int32"
          },
          "MaxCount": {
            "type": "integer",
            "format": "int32"
          },
          "MinCount": {
            "type": "integer",
            "format": "int32"
          },
          "IsLeader": {
            "type": "boolean"
          },
          "ReceiveRequirementsNotifications": {
            "type": "boolean"
          },
          "CanView": {
            "type": "boolean"
          },
          "CanEdit": {
            "type": "boolean"
          },
          "CanManageMembers": {
            "type": "boolean"
          },
          "IsExcludedFromPeerNetwork": {
            "type": "boolean"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "IsSystem": false,
          "Order": 0,
          "IsLeader": false,
          "ReceiveRequirementsNotifications": false,
          "CanView": false,
          "CanEdit": false,
          "CanManageMembers": false,
          "IsExcludedFromPeerNetwork": false,
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "8fa3ebde-735e-464e-a701-9254f43a15fe"
        }
      },
      "Rock.Model.Layout": {
        "required": [
          "FileName",
          "IsSystem",
          "Name"
        ],
        "type": "object",
        "properties": {
          "IsSystem": {
            "type": "boolean"
          },
          "SiteId": {
            "type": "integer",
            "format": "int32"
          },
          "FileName": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "LayoutMobilePhone": {
            "type": "string"
          },
          "LayoutMobileTablet": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Blocks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rock.Model.Block"
            }
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "IsSystem": false,
          "SiteId": 0,
          "Blocks": [],
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "93da6f79-94d2-4022-ae5c-0d272048d3be"
        }
      },
      "Rock.Model.Location": {
        "type": "object",
        "properties": {
          "IsNamedLocation": {
            "type": "boolean"
          },
          "GeoFenceCoordinates": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "double"
              }
            }
          },
          "Latitude": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "Longitude": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "ParentLocationId": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string"
          },
          "IsActive": {
            "type": "boolean"
          },
          "LocationTypeValueId": {
            "type": "integer",
            "format": "int32"
          },
          "GeoPoint": {
            "$ref": "#/components/schemas/System.Data.Entity.Spatial.DbGeography"
          },
          "GeoFence": {
            "$ref": "#/components/schemas/System.Data.Entity.Spatial.DbGeography"
          },
          "Street1": {
            "type": "string"
          },
          "Street2": {
            "type": "string"
          },
          "City": {
            "type": "string"
          },
          "County": {
            "type": "string"
          },
          "State": {
            "type": "string"
          },
          "Country": {
            "type": "string"
          },
          "PostalCode": {
            "type": "string"
          },
          "Barcode": {
            "type": "string"
          },
          "AssessorParcelId": {
            "type": "string"
          },
          "StandardizeAttemptedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "StandardizeAttemptedServiceType": {
            "type": "string"
          },
          "StandardizeAttemptedResult": {
            "type": "string"
          },
          "StandardizedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "GeocodeAttemptedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "GeocodeAttemptedServiceType": {
            "type": "string"
          },
          "GeocodeAttemptedResult": {
            "type": "string"
          },
          "GeocodedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "IsGeoPointLocked": {
            "type": "boolean"
          },
          "PrinterDeviceId": {
            "type": "integer",
            "format": "int32"
          },
          "ImageId": {
            "type": "integer",
            "format": "int32"
          },
          "SoftRoomThreshold": {
            "type": "integer",
            "format": "int32"
          },
          "FirmRoomThreshold": {
            "type": "integer",
            "format": "int32"
          },
          "LocationTypeValue": {
            "$ref": "#/components/schemas/Rock.Model.DefinedValue"
          },
          "ChildLocations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rock.Model.Location"
            }
          },
          "PrinterDevice": {
            "$ref": "#/components/schemas/Rock.Model.Device"
          },
          "Image": {
            "$ref": "#/components/schemas/Rock.Model.BinaryFile"
          },
          "Distance": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "IsNamedLocation": false,
          "IsActive": true,
          "ChildLocations": [],
          "Distance": 0,
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "7b37b4d8-b9bb-4341-b452-1084686a50f4"
        }
      },
      "Rock.Model.Page": {
        "required": [
          "DisplayInNavWhen",
          "IncludeAdminFooter",
          "InternalName",
          "MenuDisplayChildPages",
          "MenuDisplayDescription",
          "MenuDisplayIcon",
          "Order"
        ],
        "type": "object",
        "properties": {
          "InternalName": {
            "type": "string"
          },
          "PageTitle": {
            "type": "string"
          },
          "BotGuardianLevel": {
            "type": "string",
            "enum": [
              "Inherit",
              "Disable",
              "Enable"
            ]
          },
          "BrowserTitle": {
            "type": "string"
          },
          "ParentPageId": {
            "type": "integer",
            "format": "int32"
          },
          "IsSystem": {
            "type": "boolean"
          },
          "LayoutId": {
            "type": "integer",
            "format": "int32"
          },
          "RequiresEncryption": {
            "type": "boolean"
          },
          "EnableViewState": {
            "type": "boolean"
          },
          "PageDisplayTitle": {
            "type": "boolean"
          },
          "PageDisplayBreadCrumb": {
            "type": "boolean"
          },
          "PageDisplayIcon": {
            "type": "boolean"
          },
          "PageDisplayDescription": {
            "type": "boolean"
          },
          "DisplayInNavWhen": {
            "type": "string",
            "enum": [
              "WhenAllowed",
              "Always",
              "Never"
            ]
          },
          "MenuDisplayDescription": {
            "type": "boolean"
          },
          "MenuDisplayIcon": {
            "type": "boolean"
          },
          "MenuDisplayChildPages": {
            "type": "boolean"
          },
          "BreadCrumbDisplayName": {
            "type": "boolean"
          },
          "BreadCrumbDisplayIcon": {
            "type": "boolean"
          },
          "Order": {
            "type": "integer",
            "format": "int32"
          },
          "Description": {
            "type": "string"
          },
          "KeyWords": {
            "type": "string"
          },
          "HeaderContent": {
            "type": "string"
          },
          "AllowIndexing": {
            "type": "boolean"
          },
          "IconCssClass": {
            "type": "string"
          },
          "IncludeAdminFooter": {
            "type": "boolean"
          },
          "BodyCssClass": {
            "type": "string"
          },
          "IconBinaryFileId": {
            "type": "integer",
            "format": "int32"
          },
          "AdditionalSettingsJson": {
            "type": "string"
          },
          "MedianPageLoadTimeDurationSeconds": {
            "type": "number",
            "format": "double"
          },
          "CacheControlHeaderSettings": {
            "type": "string"
          },
          "RateLimitRequestPerPeriod": {
            "type": "integer",
            "format": "int32"
          },
          "RateLimitPeriod": {
            "type": "integer",
            "format": "int32"
          },
          "IsRateLimited": {
            "type": "boolean",
            "readOnly": true
          },
          "Blocks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rock.Model.Block"
            }
          },
          "Pages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rock.Model.Page"
            }
          },
          "PageRoutes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rock.Model.PageRoute"
            }
          },
          "PageContexts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rock.Model.PageContext"
            }
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "BotGuardianLevel": -1,
          "IsSystem": false,
          "LayoutId": 0,
          "RequiresEncryption": false,
          "EnableViewState": true,
          "PageDisplayTitle": true,
          "PageDisplayBreadCrumb": true,
          "PageDisplayIcon": true,
          "PageDisplayDescription": true,
          "DisplayInNavWhen": 0,
          "MenuDisplayDescription": false,
          "MenuDisplayIcon": false,
          "MenuDisplayChildPages": true,
          "BreadCrumbDisplayName": true,
          "BreadCrumbDisplayIcon": false,
          "Order": 0,
          "OutputCacheDuration": 0,
          "AllowIndexing": true,
          "IncludeAdminFooter": true,
          "IsRateLimited": false,
          "Blocks": [],
          "Pages": [],
          "PageRoutes": [],
          "PageContexts": [],
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "2d05a547-91ec-4ea1-9a6d-c95845be60f2"
        }
      },
      "Rock.Model.PageContext": {
        "required": [
          "Entity",
          "IdParameter",
          "IsSystem",
          "PageId"
        ],
        "type": "object",
        "properties": {
          "IsSystem": {
            "type": "boolean"
          },
          "PageId": {
            "type": "integer",
            "format": "int32"
          },
          "Entity": {
            "type": "string"
          },
          "IdParameter": {
            "type": "string"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "IsSystem": false,
          "PageId": 0,
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "33ce7feb-b619-4c33-95eb-6e24ef1acff3"
        }
      },
      "Rock.Model.PageRoute": {
        "required": [
          "IsSystem",
          "PageId",
          "Route"
        ],
        "type": "object",
        "properties": {
          "IsSystem": {
            "type": "boolean"
          },
          "PageId": {
            "type": "integer",
            "format": "int32"
          },
          "Route": {
            "type": "string"
          },
          "IsGlobal": {
            "type": "boolean"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "IsSystem": false,
          "PageId": 0,
          "IsGlobal": false,
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "59281061-c433-4cd3-b219-9d64c180592f"
        }
      },
      "Rock.Model.Person": {
        "required": [
          "Gender",
          "IsSystem"
        ],
        "type": "object",
        "properties": {
          "IsSystem": {
            "type": "boolean"
          },
          "RecordTypeValueId": {
            "type": "integer",
            "format": "int32"
          },
          "RecordStatusValueId": {
            "type": "integer",
            "format": "int32"
          },
          "RecordStatusLastModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "RecordStatusReasonValueId": {
            "type": "integer",
            "format": "int32"
          },
          "ConnectionStatusValueId": {
            "type": "integer",
            "format": "int32"
          },
          "ReviewReasonValueId": {
            "type": "integer",
            "format": "int32"
          },
          "IsDeceased": {
            "type": "boolean"
          },
          "TitleValueId": {
            "type": "integer",
            "format": "int32"
          },
          "FirstName": {
            "type": "string"
          },
          "NickName": {
            "type": "string"
          },
          "MiddleName": {
            "type": "string"
          },
          "LastName": {
            "type": "string"
          },
          "SuffixValueId": {
            "type": "integer",
            "format": "int32"
          },
          "PhotoId": {
            "type": "integer",
            "format": "int32"
          },
          "BirthDay": {
            "type": "integer",
            "format": "int32"
          },
          "BirthMonth": {
            "type": "integer",
            "format": "int32"
          },
          "BirthYear": {
            "type": "integer",
            "format": "int32"
          },
          "Age": {
            "type": "integer",
            "format": "int32"
          },
          "Gender": {
            "type": "string",
            "enum": [
              "Unknown",
              "Male",
              "Female"
            ]
          },
          "MaritalStatusValueId": {
            "type": "integer",
            "format": "int32"
          },
          "AnniversaryDate": {
            "type": "string",
            "format": "date-time"
          },
          "GraduationYear": {
            "type": "integer",
            "format": "int32"
          },
          "GivingId": {
            "type": "string"
          },
          "GivingLeaderId": {
            "type": "integer",
            "format": "int32"
          },
          "Email": {
            "pattern": "\\s*(?:[A-Za-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[A-Za-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?\\.)+[A-Za-z0-9](?:[A-Za-z0-9-]*[A-Za-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[A-Za-z0-9-]*[A-Za-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])\\s*",
            "type": "string"
          },
          "IsEmailActive": {
            "type": "boolean"
          },
          "EmailNote": {
            "type": "string"
          },
          "EmailPreference": {
            "type": "string",
            "enum": [
              "EmailAllowed",
              "NoMassEmails",
              "DoNotEmail"
            ]
          },
          "CommunicationPreference": {
            "type": "string",
            "enum": [
              "RecipientPreference",
              "Email",
              "SMS",
              "PushNotification"
            ]
          },
          "ReviewReasonNote": {
            "type": "string"
          },
          "InactiveReasonNote": {
            "type": "string"
          },
          "SystemNote": {
            "type": "string"
          },
          "ViewedCount": {
            "type": "integer",
            "format": "int32"
          },
          "TopSignalColor": {
            "type": "string"
          },
          "TopSignalIconCssClass": {
            "type": "string"
          },
          "TopSignalId": {
            "type": "integer",
            "format": "int32"
          },
          "AgeClassification": {
            "type": "string",
            "enum": [
              "Unknown",
              "Adult",
              "Child"
            ]
          },
          "PrimaryFamilyId": {
            "type": "integer",
            "format": "int32"
          },
          "PrimaryCampusId": {
            "type": "integer",
            "format": "int32"
          },
          "IsLockedAsChild": {
            "type": "boolean"
          },
          "DeceasedDate": {
            "type": "string",
            "format": "date-time"
          },
          "ContributionFinancialAccountId": {
            "type": "integer",
            "format": "int32"
          },
          "AccountProtectionProfile": {
            "type": "string",
            "enum": [
              "Low",
              "Medium",
              "High",
              "Extreme"
            ]
          },
          "PreferredLanguageValueId": {
            "type": "integer",
            "format": "int32"
          },
          "ReminderCount": {
            "type": "integer",
            "format": "int32"
          },
          "RaceValueId": {
            "type": "integer",
            "format": "int32"
          },
          "EthnicityValueId": {
            "type": "integer",
            "format": "int32"
          },
          "BirthDateKey": {
            "type": "integer",
            "format": "int32"
          },
          "AgeBracket": {
            "type": "string",
            "enum": [
              "Unknown",
              "ZeroToFive",
              "SixToTwelve",
              "ThirteenToSeventeen",
              "EighteenToTwentyFour",
              "TwentyFiveToThirtyFour",
              "ThirtyFiveToFortyFour",
              "FortyFiveToFiftyFour",
              "FiftyFiveToSixtyFour",
              "SixtyFiveOrOlder"
            ]
          },
          "FirstNamePronunciationOverride": {
            "type": "string"
          },
          "NickNamePronunciationOverride": {
            "type": "string"
          },
          "LastNamePronunciationOverride": {
            "type": "string"
          },
          "PronunciationNote": {
            "type": "string"
          },
          "PrimaryAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "Users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rock.Model.UserLogin"
            }
          },
          "PhoneNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rock.Model.PhoneNumber"
            }
          },
          "MaritalStatusValue": {
            "$ref": "#/components/schemas/Rock.Model.DefinedValue"
          },
          "ConnectionStatusValue": {
            "$ref": "#/components/schemas/Rock.Model.DefinedValue"
          },
          "ReviewReasonValue": {
            "$ref": "#/components/schemas/Rock.Model.DefinedValue"
          },
          "RecordStatusValue": {
            "$ref": "#/components/schemas/Rock.Model.DefinedValue"
          },
          "RecordStatusReasonValue": {
            "$ref": "#/components/schemas/Rock.Model.DefinedValue"
          },
          "RecordTypeValue": {
            "$ref": "#/components/schemas/Rock.Model.DefinedValue"
          },
          "SuffixValue": {
            "$ref": "#/components/schemas/Rock.Model.DefinedValue"
          },
          "TitleValue": {
            "$ref": "#/components/schemas/Rock.Model.DefinedValue"
          },
          "Photo": {
            "$ref": "#/components/schemas/Rock.Model.BinaryFile"
          },
          "PreferredLanguageValue": {
            "$ref": "#/components/schemas/Rock.Model.DefinedValue"
          },
          "DaysUntilBirthday": {
            "type": "integer",
            "format": "int32"
          },
          "RaceValue": {
            "$ref": "#/components/schemas/Rock.Model.DefinedValue"
          },
          "EthnicityValue": {
            "$ref": "#/components/schemas/Rock.Model.DefinedValue"
          },
          "GivingGroupId": {
            "type": "integer",
            "format": "int32"
          },
          "FullName": {
            "type": "string"
          },
          "Initials": {
            "type": "string"
          },
          "BirthdayDayOfWeek": {
            "type": "string"
          },
          "BirthdayDayOfWeekShort": {
            "type": "string"
          },
          "BirthDate": {
            "type": "string",
            "format": "date-time"
          },
          "NextBirthDay": {
            "type": "string",
            "format": "date-time"
          },
          "DaysToBirthday": {
            "type": "integer",
            "format": "int32"
          },
          "DaysToAnniversary": {
            "type": "integer",
            "format": "int32"
          },
          "NextAnniversary": {
            "type": "string",
            "format": "date-time"
          },
          "DaysUntilAnniversary": {
            "type": "integer",
            "format": "int32"
          },
          "GradeOffset": {
            "type": "integer",
            "format": "int32"
          },
          "HasGraduated": {
            "type": "boolean"
          },
          "GradeFormatted": {
            "type": "string"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "IsSystem": false,
          "IsDeceased": false,
          "Gender": 0,
          "GivingLeaderId": 0,
          "IsEmailActive": true,
          "EmailPreference": 0,
          "CommunicationPreference": 1,
          "AgeClassification": 0,
          "IsLockedAsChild": false,
          "AccountProtectionProfile": 0,
          "AgeBracket": 0,
          "Users": [],
          "PhoneNumbers": [],
          "FullName": " ",
          "Initials": "",
          "BirthdayDayOfWeek": "",
          "BirthdayDayOfWeekShort": "",
          "DaysToBirthday": 2147483647,
          "DaysToAnniversary": 2147483647,
          "GradeFormatted": "",
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "66432838-961c-4cf8-8392-54b337fa9619"
        }
      },
      "Rock.Model.PersonAlias": {
        "required": [
          "PersonId"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "PersonId": {
            "type": "integer",
            "format": "int32"
          },
          "AliasedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "LastVisitDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "InternalMessage": {
            "type": "string"
          },
          "Person": {
            "$ref": "#/components/schemas/Rock.Model.Person"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "PersonId": 0,
          "Id": 0,
          "IdKey": "",
          "Guid": "1f1e3860-180c-4be3-9009-bfdb3fb9b2b0"
        }
      },
      "Rock.Model.PhoneNumber": {
        "required": [
          "FullNumber",
          "IsMessagingEnabled",
          "IsSystem",
          "Number",
          "PersonId"
        ],
        "type": "object",
        "properties": {
          "FullNumber": {
            "type": "string"
          },
          "NumberFormattedWithCountryCode": {
            "type": "string"
          },
          "IsSystem": {
            "type": "boolean"
          },
          "PersonId": {
            "type": "integer",
            "format": "int32"
          },
          "CountryCode": {
            "type": "string"
          },
          "Number": {
            "type": "string"
          },
          "NumberFormatted": {
            "type": "string"
          },
          "Extension": {
            "type": "string"
          },
          "NumberTypeValueId": {
            "type": "integer",
            "format": "int32"
          },
          "IsMessagingEnabled": {
            "type": "boolean"
          },
          "IsUnlisted": {
            "type": "boolean"
          },
          "Description": {
            "type": "string"
          },
          "NumberTypeValue": {
            "$ref": "#/components/schemas/Rock.Model.DefinedValue"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "FullNumber": "",
          "NumberFormattedWithCountryCode": "",
          "IsSystem": false,
          "PersonId": 0,
          "IsMessagingEnabled": false,
          "IsUnlisted": false,
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "a7e660be-3e52-4058-b888-ce7cc86d291b"
        }
      },
      "Rock.Model.Schedule": {
        "required": [
          "IsActive"
        ],
        "type": "object",
        "properties": {
          "iCalendarContent": {
            "type": "string"
          },
          "FriendlyScheduleText": {
            "type": "string"
          },
          "AbbreviatedName": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "CheckInStartOffsetMinutes": {
            "type": "integer",
            "format": "int32"
          },
          "CheckInEndOffsetMinutes": {
            "type": "integer",
            "format": "int32"
          },
          "EffectiveStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "EffectiveEndDate": {
            "type": "string",
            "format": "date-time"
          },
          "WeeklyDayOfWeek": {
            "type": "string",
            "enum": [
              "Sunday",
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday",
              "Saturday"
            ]
          },
          "WeeklyTimeOfDay": {
            "type": "string"
          },
          "CategoryId": {
            "type": "integer",
            "format": "int32"
          },
          "AutoInactivateWhenComplete": {
            "type": "boolean"
          },
          "IsActive": {
            "type": "boolean"
          },
          "Order": {
            "type": "integer",
            "format": "int32"
          },
          "IsPublic": {
            "type": "boolean"
          },
          "Category": {
            "$ref": "#/components/schemas/Rock.Model.Category"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "iCalendarContent": "",
          "FriendlyScheduleText": "No Schedule",
          "AutoInactivateWhenComplete": false,
          "IsActive": true,
          "Order": 0,
          "IsPublic": true,
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "0216be61-c233-4cc0-8566-2a70122c6605"
        }
      },
      "Rock.Model.SignatureDocumentTemplate": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ProviderEntityTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "ProviderTemplateKey": {
            "type": "string"
          },
          "BinaryFileTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "InviteSystemCommunicationId": {
            "type": "integer",
            "format": "int32"
          },
          "LavaTemplate": {
            "type": "string"
          },
          "IsActive": {
            "type": "boolean"
          },
          "DocumentTerm": {
            "type": "string"
          },
          "SignatureType": {
            "type": "string",
            "enum": [
              "Typed",
              "Drawn"
            ]
          },
          "CompletionSystemCommunicationId": {
            "type": "integer",
            "format": "int32"
          },
          "IsValidInFuture": {
            "type": "boolean"
          },
          "ValidityDurationInDays": {
            "type": "integer",
            "format": "int32"
          },
          "ProviderEntityType": {
            "$ref": "#/components/schemas/Rock.Model.EntityType"
          },
          "BinaryFileType": {
            "$ref": "#/components/schemas/Rock.Model.BinaryFileType"
          },
          "InviteSystemCommunication": {
            "$ref": "#/components/schemas/Rock.Model.SystemCommunication"
          },
          "CompletionSystemCommunication": {
            "$ref": "#/components/schemas/Rock.Model.SystemCommunication"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "IsActive": true,
          "SignatureType": 0,
          "IsValidInFuture": false,
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "98c6dd5e-9ee8-4fd0-a208-7da9ad5fd8d9"
        }
      },
      "Rock.Model.Site": {
        "required": [
          "IsSystem",
          "Name"
        ],
        "type": "object",
        "properties": {
          "IsSystem": {
            "type": "boolean"
          },
          "Name": {
            "type": "string"
          },
          "IsActive": {
            "type": "boolean"
          },
          "ConfigurationMobilePhoneBinaryFileId": {
            "type": "integer",
            "format": "int32"
          },
          "ConfigurationMobileTabletBinaryFileId": {
            "type": "integer",
            "format": "int32"
          },
          "AdditionalSettings": {
            "type": "string"
          },
          "SiteType": {
            "type": "string",
            "enum": [
              "Web",
              "Mobile",
              "Tv"
            ]
          },
          "ThumbnailBinaryFileId": {
            "type": "integer",
            "format": "int32"
          },
          "Description": {
            "type": "string"
          },
          "Theme": {
            "type": "string"
          },
          "DefaultPageId": {
            "type": "integer",
            "format": "int32"
          },
          "DefaultPageRouteId": {
            "type": "integer",
            "format": "int32"
          },
          "LoginPageId": {
            "type": "integer",
            "format": "int32"
          },
          "LoginPageRouteId": {
            "type": "integer",
            "format": "int32"
          },
          "ChangePasswordPageId": {
            "type": "integer",
            "format": "int32"
          },
          "ChangePasswordPageRouteId": {
            "type": "integer",
            "format": "int32"
          },
          "RegistrationPageId": {
            "type": "integer",
            "format": "int32"
          },
          "RegistrationPageRouteId": {
            "type": "integer",
            "format": "int32"
          },
          "PageNotFoundPageId": {
            "type": "integer",
            "format": "int32"
          },
          "PageNotFoundPageRouteId": {
            "type": "integer",
            "format": "int32"
          },
          "CommunicationPageId": {
            "type": "integer",
            "format": "int32"
          },
          "CommunicationPageRouteId": {
            "type": "integer",
            "format": "int32"
          },
          "ErrorPage": {
            "type": "string"
          },
          "GoogleAnalyticsCode": {
            "type": "string"
          },
          "EnableMobileRedirect": {
            "type": "boolean"
          },
          "MobilePageId": {
            "type": "integer",
            "format": "int32"
          },
          "ExternalUrl": {
            "type": "string"
          },
          "AllowedFrameDomains": {
            "type": "string"
          },
          "RedirectTablets": {
            "type": "boolean"
          },
          "EnablePageViews": {
            "type": "boolean"
          },
          "PageHeaderContent": {
            "type": "string"
          },
          "AllowIndexing": {
            "type": "boolean"
          },
          "IsIndexEnabled": {
            "type": "boolean"
          },
          "IndexStartingLocation": {
            "type": "string"
          },
          "RequiresEncryption": {
            "type": "boolean"
          },
          "EnabledForShortening": {
            "type": "boolean"
          },
          "FavIconBinaryFileId": {
            "type": "integer",
            "format": "int32"
          },
          "SiteLogoBinaryFileId": {
            "type": "integer",
            "format": "int32"
          },
          "LatestVersionDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "EnableExclusiveRoutes": {
            "type": "boolean"
          },
          "EnablePageViewGeoTracking": {
            "type": "boolean"
          },
          "DisablePredictableIds": {
            "type": "boolean"
          },
          "EnableVisitorTracking": {
            "type": "boolean"
          },
          "EnablePersonalization": {
            "type": "boolean"
          },
          "BotGuardianLevel": {
            "type": "string",
            "enum": [
              "Inherit",
              "Disable",
              "Enable"
            ]
          },
          "Layouts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rock.Model.Layout"
            }
          },
          "Blocks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rock.Model.Block"
            }
          },
          "SiteDomains": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rock.Model.SiteDomain"
            }
          },
          "DefaultPage": {
            "$ref": "#/components/schemas/Rock.Model.Page"
          },
          "DefaultPageRoute": {
            "$ref": "#/components/schemas/Rock.Model.PageRoute"
          },
          "LoginPage": {
            "$ref": "#/components/schemas/Rock.Model.Page"
          },
          "LoginPageRoute": {
            "$ref": "#/components/schemas/Rock.Model.PageRoute"
          },
          "ChangePasswordPageRoute": {
            "$ref": "#/components/schemas/Rock.Model.PageRoute"
          },
          "RegistrationPage": {
            "$ref": "#/components/schemas/Rock.Model.Page"
          },
          "RegistrationPageRoute": {
            "$ref": "#/components/schemas/Rock.Model.PageRoute"
          },
          "PageNotFoundPage": {
            "$ref": "#/components/schemas/Rock.Model.Page"
          },
          "PageNotFoundPageRoute": {
            "$ref": "#/components/schemas/Rock.Model.PageRoute"
          },
          "CommunicationPage": {
            "$ref": "#/components/schemas/Rock.Model.Page"
          },
          "CommunicationPageRoute": {
            "$ref": "#/components/schemas/Rock.Model.PageRoute"
          },
          "MobilePage": {
            "$ref": "#/components/schemas/Rock.Model.Page"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "IsSystem": false,
          "IsActive": true,
          "SiteType": 0,
          "EnableMobileRedirect": false,
          "RedirectTablets": false,
          "EnablePageViews": true,
          "AllowIndexing": true,
          "IsIndexEnabled": false,
          "RequiresEncryption": false,
          "EnabledForShortening": true,
          "EnableExclusiveRoutes": false,
          "EnablePageViewGeoTracking": false,
          "DisablePredictableIds": false,
          "EnableVisitorTracking": false,
          "EnablePersonalization": false,
          "BotGuardianLevel": 0,
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "56d1eca5-c458-43fb-8a56-7acba4491055"
        }
      },
      "Rock.Model.SiteDomain": {
        "required": [
          "Domain",
          "IsSystem",
          "Order",
          "SiteId"
        ],
        "type": "object",
        "properties": {
          "IsSystem": {
            "type": "boolean"
          },
          "SiteId": {
            "type": "integer",
            "format": "int32"
          },
          "Domain": {
            "type": "string"
          },
          "Order": {
            "type": "integer",
            "format": "int32"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "IsSystem": false,
          "SiteId": 0,
          "Order": 0,
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "4843cb1a-dd4b-4d89-9e3e-197f708b83a7"
        }
      },
      "Rock.Model.SystemCommunication": {
        "required": [
          "Body",
          "IsSystem",
          "Subject",
          "Title"
        ],
        "type": "object",
        "properties": {
          "IsSystem": {
            "type": "boolean"
          },
          "IsActive": {
            "type": "boolean"
          },
          "CategoryId": {
            "type": "integer",
            "format": "int32"
          },
          "Title": {
            "type": "string"
          },
          "From": {
            "type": "string"
          },
          "FromName": {
            "type": "string"
          },
          "To": {
            "type": "string"
          },
          "Cc": {
            "type": "string"
          },
          "Bcc": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "Body": {
            "type": "string"
          },
          "CssInliningEnabled": {
            "type": "boolean"
          },
          "SMSMessage": {
            "type": "string"
          },
          "SmsFromSystemPhoneNumberId": {
            "type": "integer",
            "format": "int32"
          },
          "LavaFieldsJson": {
            "type": "string"
          },
          "PushTitle": {
            "type": "string"
          },
          "PushMessage": {
            "type": "string"
          },
          "PushSound": {
            "type": "string"
          },
          "PushImageBinaryFileId": {
            "type": "integer",
            "format": "int32"
          },
          "PushOpenAction": {
            "type": "string",
            "enum": [
              "NoAction",
              "ShowDetails",
              "LinkToMobilePage",
              "LinkToUrl"
            ]
          },
          "PushOpenMessage": {
            "type": "string"
          },
          "PushData": {
            "type": "string"
          },
          "Category": {
            "$ref": "#/components/schemas/Rock.Model.Category"
          },
          "SmsFromSystemPhoneNumber": {
            "$ref": "#/components/schemas/Rock.Model.SystemPhoneNumber"
          },
          "LavaFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "IsSystem": false,
          "CssInliningEnabled": true,
          "LavaFieldsJson": "{}",
          "LavaFields": {},
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "22b0fd09-7981-48d7-8632-0b2b9c669772"
        }
      },
      "Rock.Model.SystemPhoneNumber": {
        "required": [
          "Name",
          "Number",
          "Order"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Number": {
            "type": "string"
          },
          "IsActive": {
            "type": "boolean"
          },
          "Order": {
            "type": "integer",
            "format": "int32"
          },
          "AssignedToPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "IsSmsEnabled": {
            "type": "boolean"
          },
          "IsSmsForwardingEnabled": {
            "type": "boolean"
          },
          "SmsReceivedWorkflowTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "SmsNotificationGroupId": {
            "type": "integer",
            "format": "int32"
          },
          "MobileApplicationSiteId": {
            "type": "integer",
            "format": "int32"
          },
          "ProviderIdentifier": {
            "type": "string"
          },
          "AssignedToPersonAlias": {
            "$ref": "#/components/schemas/Rock.Model.PersonAlias"
          },
          "SmsReceivedWorkflowType": {
            "$ref": "#/components/schemas/Rock.Model.WorkflowType"
          },
          "SmsNotificationGroup": {
            "$ref": "#/components/schemas/Rock.Model.Group"
          },
          "MobileApplicationSite": {
            "$ref": "#/components/schemas/Rock.Model.Site"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "IsActive": true,
          "Order": 0,
          "IsSmsEnabled": false,
          "IsSmsForwardingEnabled": false,
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "faf9880b-e153-4b1d-9b2b-4c0c6ef69922"
        }
      },
      "Rock.Model.UserLogin": {
        "required": [
          "EntityTypeId",
          "UserName"
        ],
        "type": "object",
        "properties": {
          "EntityTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "UserName": {
            "type": "string"
          },
          "IsConfirmed": {
            "type": "boolean"
          },
          "LastActivityDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "LastLoginDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "LastPasswordChangedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "IsOnLine": {
            "type": "boolean"
          },
          "IsLockedOut": {
            "type": "boolean"
          },
          "IsPasswordChangeRequired": {
            "type": "boolean"
          },
          "LastLockedOutDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "FailedPasswordAttemptCount": {
            "type": "integer",
            "format": "int32"
          },
          "FailedPasswordAttemptWindowStartDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "LastPasswordExpirationWarningDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ApiKey": {
            "type": "string"
          },
          "PersonId": {
            "type": "integer",
            "format": "int32"
          },
          "EntityType": {
            "$ref": "#/components/schemas/Rock.Model.EntityType"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "d47682e0-2c79-4684-af3d-1dbd1a5f7807"
        }
      },
      "Rock.Model.WorkflowActionForm": {
        "type": "object",
        "properties": {
          "NotificationSystemCommunicationId": {
            "type": "integer",
            "format": "int32"
          },
          "IncludeActionsInNotification": {
            "type": "boolean"
          },
          "Header": {
            "type": "string"
          },
          "Footer": {
            "type": "string"
          },
          "Actions": {
            "type": "string"
          },
          "ActionAttributeGuid": {
            "type": "string",
            "format": "uuid"
          },
          "AllowNotes": {
            "type": "boolean"
          },
          "AllowPersonEntry": {
            "type": "boolean"
          },
          "PersonEntryPreHtml": {
            "type": "string"
          },
          "PersonEntryPostHtml": {
            "type": "string"
          },
          "PersonEntryCampusIsVisible": {
            "type": "boolean"
          },
          "PersonEntryAutofillCurrentPerson": {
            "type": "boolean"
          },
          "PersonEntryHideIfCurrentPersonKnown": {
            "type": "boolean"
          },
          "PersonEntrySpouseEntryOption": {
            "type": "string",
            "enum": [
              "Hidden",
              "Optional",
              "Required"
            ]
          },
          "PersonEntryGenderEntryOption": {
            "type": "string",
            "enum": [
              "Hidden",
              "Optional",
              "Required"
            ]
          },
          "PersonEntryEmailEntryOption": {
            "type": "string",
            "enum": [
              "Hidden",
              "Optional",
              "Required"
            ]
          },
          "PersonEntryMobilePhoneEntryOption": {
            "type": "string",
            "enum": [
              "Hidden",
              "Optional",
              "Required"
            ]
          },
          "PersonEntrySmsOptInEntryOption": {
            "type": "string",
            "enum": [
              "Hide",
              "Show"
            ]
          },
          "PersonEntryBirthdateEntryOption": {
            "type": "string",
            "enum": [
              "Hidden",
              "Optional",
              "Required"
            ]
          },
          "PersonEntryAddressEntryOption": {
            "type": "string",
            "enum": [
              "Hidden",
              "Optional",
              "Required"
            ]
          },
          "PersonEntryMaritalStatusEntryOption": {
            "type": "string",
            "enum": [
              "Hidden",
              "Optional",
              "Required"
            ]
          },
          "PersonEntryRaceEntryOption": {
            "type": "string",
            "enum": [
              "Hidden",
              "Optional",
              "Required"
            ]
          },
          "PersonEntryEthnicityEntryOption": {
            "type": "string",
            "enum": [
              "Hidden",
              "Optional",
              "Required"
            ]
          },
          "PersonEntrySpouseLabel": {
            "type": "string"
          },
          "PersonEntryConnectionStatusValueId": {
            "type": "integer",
            "format": "int32"
          },
          "PersonEntryRecordStatusValueId": {
            "type": "integer",
            "format": "int32"
          },
          "PersonEntryGroupLocationTypeValueId": {
            "type": "integer",
            "format": "int32"
          },
          "PersonEntryCampusStatusValueId": {
            "type": "integer",
            "format": "int32"
          },
          "PersonEntryCampusTypeValueId": {
            "type": "integer",
            "format": "int32"
          },
          "PersonEntryPersonAttributeGuid": {
            "type": "string",
            "format": "uuid"
          },
          "PersonEntrySpouseAttributeGuid": {
            "type": "string",
            "format": "uuid"
          },
          "PersonEntryFamilyAttributeGuid": {
            "type": "string",
            "format": "uuid"
          },
          "PersonEntrySectionTypeValueId": {
            "type": "integer",
            "format": "int32"
          },
          "PersonEntryTitle": {
            "type": "string"
          },
          "PersonEntryDescription": {
            "type": "string"
          },
          "PersonEntryShowHeadingSeparator": {
            "type": "boolean"
          },
          "FormSections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rock.Model.WorkflowActionFormSection"
            }
          },
          "FormAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rock.Model.WorkflowActionFormAttribute"
            }
          },
          "PersonEntryConnectionStatusValue": {
            "$ref": "#/components/schemas/Rock.Model.DefinedValue"
          },
          "PersonEntryRecordStatusValue": {
            "$ref": "#/components/schemas/Rock.Model.DefinedValue"
          },
          "PersonEntryGroupLocationTypeValue": {
            "$ref": "#/components/schemas/Rock.Model.DefinedValue"
          },
          "PersonEntryCampusStatusValue": {
            "$ref": "#/components/schemas/Rock.Model.DefinedValue"
          },
          "PersonEntryCampusTypeValue": {
            "$ref": "#/components/schemas/Rock.Model.DefinedValue"
          },
          "PersonEntrySectionTypeValue": {
            "$ref": "#/components/schemas/Rock.Model.DefinedValue"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "IncludeActionsInNotification": true,
          "AllowPersonEntry": false,
          "PersonEntryCampusIsVisible": true,
          "PersonEntryAutofillCurrentPerson": true,
          "PersonEntryHideIfCurrentPersonKnown": false,
          "PersonEntrySpouseEntryOption": 0,
          "PersonEntryGenderEntryOption": 2,
          "PersonEntryEmailEntryOption": 2,
          "PersonEntryMobilePhoneEntryOption": 0,
          "PersonEntrySmsOptInEntryOption": 0,
          "PersonEntryBirthdateEntryOption": 0,
          "PersonEntryAddressEntryOption": 0,
          "PersonEntryMaritalStatusEntryOption": 0,
          "PersonEntryRaceEntryOption": 0,
          "PersonEntryEthnicityEntryOption": 0,
          "PersonEntrySpouseLabel": "Spouse",
          "PersonEntryShowHeadingSeparator": false,
          "FormSections": [],
          "FormAttributes": [],
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "e9f75f62-c0de-4387-bb4f-f677e00fb3af"
        }
      },
      "Rock.Model.WorkflowActionFormAttribute": {
        "required": [
          "AttributeId",
          "Order",
          "WorkflowActionFormId"
        ],
        "type": "object",
        "properties": {
          "WorkflowActionFormId": {
            "type": "integer",
            "format": "int32"
          },
          "AttributeId": {
            "type": "integer",
            "format": "int32"
          },
          "Order": {
            "type": "integer",
            "format": "int32"
          },
          "IsVisible": {
            "type": "boolean"
          },
          "IsReadOnly": {
            "type": "boolean"
          },
          "IsRequired": {
            "type": "boolean"
          },
          "HideLabel": {
            "type": "boolean"
          },
          "PreHtml": {
            "type": "string"
          },
          "PostHtml": {
            "type": "string"
          },
          "FieldVisibilityRulesJSON": {
            "type": "string"
          },
          "ColumnSize": {
            "type": "integer",
            "format": "int32"
          },
          "ActionFormSectionId": {
            "type": "integer",
            "format": "int32"
          },
          "Attribute": {
            "$ref": "#/components/schemas/Rock.Model.Attribute"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "WorkflowActionFormId": 0,
          "AttributeId": 0,
          "Order": 0,
          "IsVisible": false,
          "IsReadOnly": false,
          "IsRequired": false,
          "HideLabel": false,
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "4d2d79f4-423f-4d2f-9493-a153e824fc4f"
        }
      },
      "Rock.Model.WorkflowActionFormSection": {
        "required": [
          "Order",
          "WorkflowActionFormId"
        ],
        "type": "object",
        "properties": {
          "Title": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ShowHeadingSeparator": {
            "type": "boolean"
          },
          "SectionVisibilityRulesJSON": {
            "type": "string"
          },
          "Order": {
            "type": "integer",
            "format": "int32"
          },
          "WorkflowActionFormId": {
            "type": "integer",
            "format": "int32"
          },
          "SectionTypeValueId": {
            "type": "integer",
            "format": "int32"
          },
          "SectionType": {
            "$ref": "#/components/schemas/Rock.Model.DefinedValue"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "ShowHeadingSeparator": false,
          "Order": 0,
          "WorkflowActionFormId": 0,
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "82b9d9cd-cc49-40c1-8e78-9a1bc12bc4bf"
        }
      },
      "Rock.Model.WorkflowActionType": {
        "required": [
          "Name",
          "Order"
        ],
        "type": "object",
        "properties": {
          "ActivityTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string"
          },
          "Order": {
            "type": "integer",
            "format": "int32"
          },
          "EntityTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "IsActionCompletedOnSuccess": {
            "type": "boolean"
          },
          "IsActivityCompletedOnSuccess": {
            "type": "boolean"
          },
          "WorkflowFormId": {
            "type": "integer",
            "format": "int32"
          },
          "CriteriaAttributeGuid": {
            "type": "string",
            "format": "uuid"
          },
          "CriteriaComparisonType": {
            "type": "string",
            "enum": [
              "EqualTo",
              "NotEqualTo",
              "StartsWith",
              "Contains",
              "DoesNotContain",
              "IsBlank",
              "IsNotBlank",
              "GreaterThan",
              "GreaterThanOrEqualTo",
              "LessThan",
              "LessThanOrEqualTo",
              "EndsWith",
              "Between",
              "RegularExpression"
            ]
          },
          "CriteriaValue": {
            "type": "string"
          },
          "EntityType": {
            "$ref": "#/components/schemas/Rock.Model.EntityType"
          },
          "WorkflowForm": {
            "$ref": "#/components/schemas/Rock.Model.WorkflowActionForm"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "ActivityTypeId": 0,
          "Order": 0,
          "EntityTypeId": 0,
          "IsActionCompletedOnSuccess": false,
          "IsActivityCompletedOnSuccess": false,
          "CriteriaComparisonType": 0,
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "4ac5af60-f219-4d65-ae71-177c93de19c1"
        }
      },
      "Rock.Model.WorkflowActivityType": {
        "required": [
          "Name",
          "Order"
        ],
        "type": "object",
        "properties": {
          "IsActive": {
            "type": "boolean"
          },
          "WorkflowTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "IsActivatedWithWorkflow": {
            "type": "boolean"
          },
          "Order": {
            "type": "integer",
            "format": "int32"
          },
          "ActionTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rock.Model.WorkflowActionType"
            }
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "WorkflowTypeId": 0,
          "IsActivatedWithWorkflow": false,
          "Order": 0,
          "ActionTypes": [],
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "ad3003e1-3fa8-41d1-b809-74281e8690a5"
        }
      },
      "Rock.Model.WorkflowFormBuilderTemplate": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "IsActive": {
            "type": "boolean"
          },
          "FormHeader": {
            "type": "string"
          },
          "FormFooter": {
            "type": "string"
          },
          "AllowPersonEntry": {
            "type": "boolean"
          },
          "PersonEntrySettingsJson": {
            "type": "string"
          },
          "ConfirmationEmailSettingsJson": {
            "type": "string"
          },
          "CompletionSettingsJson": {
            "type": "string"
          },
          "IsLoginRequired": {
            "type": "boolean"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "IsActive": true,
          "AllowPersonEntry": false,
          "IsLoginRequired": false,
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "ccc2bb11-65c8-4c3f-9d95-3538d8c91c85"
        }
      },
      "Rock.Model.WorkflowType": {
        "required": [
          "Name",
          "Order",
          "WorkTerm"
        ],
        "type": "object",
        "properties": {
          "IsSystem": {
            "type": "boolean"
          },
          "IsActive": {
            "type": "boolean"
          },
          "WorkflowIdPrefix": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "CategoryId": {
            "type": "integer",
            "format": "int32"
          },
          "Order": {
            "type": "integer",
            "format": "int32"
          },
          "WorkTerm": {
            "type": "string"
          },
          "ProcessingIntervalSeconds": {
            "type": "integer",
            "format": "int32"
          },
          "IsPersisted": {
            "type": "boolean"
          },
          "SummaryViewText": {
            "type": "string"
          },
          "NoActionMessage": {
            "type": "string"
          },
          "LogRetentionPeriod": {
            "type": "integer",
            "format": "int32"
          },
          "CompletedWorkflowRetentionPeriod": {
            "type": "integer",
            "format": "int32"
          },
          "LoggingLevel": {
            "type": "string",
            "enum": [
              "None",
              "Workflow",
              "Activity",
              "Action"
            ]
          },
          "IconCssClass": {
            "type": "string"
          },
          "MaxWorkflowAgeDays": {
            "type": "integer",
            "format": "int32"
          },
          "FormBuilderTemplateId": {
            "type": "integer",
            "format": "int32"
          },
          "IsFormBuilder": {
            "type": "boolean"
          },
          "FormBuilderSettingsJson": {
            "type": "string"
          },
          "FormStartDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "FormEndDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "WorkflowExpireDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "IsLoginRequired": {
            "type": "boolean"
          },
          "Category": {
            "$ref": "#/components/schemas/Rock.Model.Category"
          },
          "FormBuilderTemplate": {
            "$ref": "#/components/schemas/Rock.Model.WorkflowFormBuilderTemplate"
          },
          "ActivityTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rock.Model.WorkflowActivityType"
            }
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "IsSystem": false,
          "IsActive": true,
          "Order": 0,
          "IsPersisted": false,
          "LoggingLevel": 0,
          "IsFormBuilder": false,
          "IsLoginRequired": false,
          "ActivityTypes": [],
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "f3cc4bd5-38a0-4225-91f3-d081e8f98e4f"
        }
      },
      "System.Data.Entity.Spatial.DbGeography": {
        "type": "object",
        "properties": {
          "Geography": {
            "$ref": "#/components/schemas/System.Data.Entity.Spatial.DbGeographyWellKnownValue"
          }
        }
      },
      "System.Data.Entity.Spatial.DbGeographyWellKnownValue": {
        "type": "object",
        "properties": {
          "CoordinateSystemId": {
            "type": "integer",
            "format": "int32"
          },
          "WellKnownText": {
            "type": "string"
          },
          "WellKnownBinary": {
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
            "type": "string",
            "format": "byte"
          }
        }
      },
      "Rock.Model.DefinedType": {
        "required": [
          "IsActive",
          "IsSystem",
          "Name",
          "Order"
        ],
        "type": "object",
        "properties": {
          "IsSystem": {
            "type": "boolean"
          },
          "FieldTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "Order": {
            "type": "integer",
            "format": "int32"
          },
          "CategoryId": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "HelpText": {
            "type": "string"
          },
          "IsActive": {
            "type": "boolean"
          },
          "EnableSecurityOnValues": {
            "type": "boolean"
          },
          "CategorizedValuesEnabled": {
            "type": "boolean"
          },
          "DefinedValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rock.Model.DefinedValue"
            }
          },
          "Category": {
            "$ref": "#/components/schemas/Rock.Model.Category"
          },
          "FieldType": {
            "$ref": "#/components/schemas/Rock.Model.FieldType"
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "CreatedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedByPersonAliasId": {
            "type": "integer",
            "format": "int32"
          },
          "ModifiedAuditValuesAlreadyUpdated": {
            "type": "boolean"
          },
          "Attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeCache"
            }
          },
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Rock.Web.Cache.AttributeValueCache"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "IdKey": {
            "type": "string"
          },
          "Guid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32"
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid"
          },
          "ForeignKey": {
            "type": "string"
          }
        },
        "example": {
          "IsSystem": false,
          "Order": 0,
          "IsActive": true,
          "EnableSecurityOnValues": false,
          "ModifiedAuditValuesAlreadyUpdated": false,
          "Id": 0,
          "IdKey": "",
          "Guid": "6a3f3326-cc4a-4537-8ce0-f9b5f9fa4975"
        }
      },
      "Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotationsManager": {
        "type": "object"
      },
      "Microsoft.Data.Edm.Annotations.IEdmVocabularyAnnotation": {
        "type": "object",
        "properties": {
          "Qualifier": {
            "type": "string",
            "readOnly": true
          },
          "Term": {
            "$ref": "#/components/schemas/Microsoft.Data.Edm.IEdmTerm"
          },
          "Target": {
            "$ref": "#/components/schemas/Microsoft.Data.Edm.IEdmVocabularyAnnotatable"
          }
        }
      },
      "Microsoft.Data.Edm.IEdmModel": {
        "type": "object",
        "properties": {
          "SchemaElements": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Microsoft.Data.Edm.IEdmSchemaElement"
            }
          },
          "VocabularyAnnotations": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Microsoft.Data.Edm.Annotations.IEdmVocabularyAnnotation"
            }
          },
          "ReferencedModels": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Microsoft.Data.Edm.IEdmModel"
            }
          },
          "DirectValueAnnotationsManager": {
            "$ref": "#/components/schemas/Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotationsManager"
          }
        }
      },
      "Microsoft.Data.Edm.IEdmSchemaElement": {
        "type": "object",
        "properties": {
          "SchemaElementKind": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "None",
              "TypeDefinition",
              "Function",
              "ValueTerm",
              "EntityContainer"
            ]
          },
          "Namespace": {
            "type": "string",
            "readOnly": true
          },
          "Name": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "Microsoft.Data.Edm.IEdmTerm": {
        "type": "object",
        "properties": {
          "TermKind": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "None",
              "Type",
              "Value"
            ]
          },
          "SchemaElementKind": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "None",
              "TypeDefinition",
              "Function",
              "ValueTerm",
              "EntityContainer"
            ]
          },
          "Namespace": {
            "type": "string",
            "readOnly": true
          },
          "Name": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "Microsoft.Data.Edm.IEdmType": {
        "type": "object",
        "properties": {
          "TypeKind": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "None",
              "Primitive",
              "Entity",
              "Complex",
              "Row",
              "Collection",
              "EntityReference",
              "Enum"
            ]
          }
        }
      },
      "Microsoft.Data.Edm.IEdmTypeReference": {
        "type": "object",
        "properties": {
          "IsNullable": {
            "type": "boolean",
            "readOnly": true
          },
          "Definition": {
            "$ref": "#/components/schemas/Microsoft.Data.Edm.IEdmType"
          }
        }
      },
      "Microsoft.Data.Edm.IEdmVocabularyAnnotatable": {
        "type": "object"
      },
      "Microsoft.Data.OData.Query.SemanticAst.FilterClause": {
        "type": "object",
        "properties": {
          "Expression": {
            "$ref": "#/components/schemas/Microsoft.Data.OData.Query.SemanticAst.SingleValueNode"
          },
          "RangeVariable": {
            "$ref": "#/components/schemas/Microsoft.Data.OData.Query.SemanticAst.RangeVariable"
          },
          "ItemType": {
            "$ref": "#/components/schemas/Microsoft.Data.Edm.IEdmTypeReference"
          }
        }
      },
      "Microsoft.Data.OData.Query.SemanticAst.OrderByClause": {
        "type": "object",
        "properties": {
          "ThenBy": {
            "$ref": "#/components/schemas/Microsoft.Data.OData.Query.SemanticAst.OrderByClause"
          },
          "Expression": {
            "$ref": "#/components/schemas/Microsoft.Data.OData.Query.SemanticAst.SingleValueNode"
          },
          "Direction": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "Ascending",
              "Descending"
            ]
          },
          "RangeVariable": {
            "$ref": "#/components/schemas/Microsoft.Data.OData.Query.SemanticAst.RangeVariable"
          },
          "ItemType": {
            "$ref": "#/components/schemas/Microsoft.Data.Edm.IEdmTypeReference"
          }
        }
      },
      "Microsoft.Data.OData.Query.SemanticAst.RangeVariable": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "readOnly": true
          },
          "TypeReference": {
            "$ref": "#/components/schemas/Microsoft.Data.Edm.IEdmTypeReference"
          },
          "Kind": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        }
      },
      "Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause": {
        "type": "object",
        "properties": {
          "SelectedItems": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Microsoft.Data.OData.Query.SemanticAst.SelectItem"
            }
          },
          "AllSelected": {
            "type": "boolean",
            "readOnly": true
          }
        }
      },
      "Microsoft.Data.OData.Query.SemanticAst.SelectItem": {
        "type": "object"
      },
      "Microsoft.Data.OData.Query.SemanticAst.SingleValueNode": {
        "type": "object",
        "properties": {
          "TypeReference": {
            "$ref": "#/components/schemas/Microsoft.Data.Edm.IEdmTypeReference"
          },
          "Kind": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "None",
              "Constant",
              "Convert",
              "NonentityRangeVariableReference",
              "BinaryOperator",
              "UnaryOperator",
              "SingleValuePropertyAccess",
              "CollectionPropertyAccess",
              "SingleValueFunctionCall",
              "Any",
              "CollectionNavigationNode",
              "SingleNavigationNode",
              "SingleValueOpenPropertyAccess",
              "SingleEntityCast",
              "All",
              "EntityCollectionCast",
              "EntityRangeVariableReference",
              "SingleEntityFunctionCall",
              "CollectionFunctionCall",
              "EntityCollectionFunctionCall",
              "NamedFunctionParameter"
            ]
          }
        }
      },
      "Rock.Model.MapCoordinate": {
        "type": "object",
        "properties": {
          "Latitude": {
            "type": "number",
            "format": "double"
          },
          "Longitude": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "Rock.Model.MapItem": {
        "type": "object",
        "properties": {
          "EntityTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "EntityId": {
            "type": "integer",
            "format": "int32"
          },
          "LocationId": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string"
          },
          "Point": {
            "$ref": "#/components/schemas/Rock.Model.MapCoordinate"
          },
          "PolygonPoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rock.Model.MapCoordinate"
            }
          }
        }
      },
      "Rock.Rest.Controllers.GroupsController.FamilySearchResult": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Gets or sets the id.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Gets or sets the name."
          },
          "FamilyMembers": {
            "type": "array",
            "description": "Gets or sets the family members.",
            "items": {
              "$ref": "#/components/schemas/Rock.Model.GroupMember"
            }
          },
          "HomeLocation": {
            "$ref": "#/components/schemas/Rock.Model.Location"
          },
          "MainPhone": {
            "$ref": "#/components/schemas/Rock.Model.PhoneNumber"
          }
        },
        "description": ""
      },
      "Rock.Rest.Controllers.GroupsController.GuestFamily": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Gets or sets the id.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Gets or sets the name."
          },
          "Guid": {
            "type": "string",
            "description": "Gets or sets the unique identifier.",
            "format": "uuid"
          },
          "FamilyMembers": {
            "type": "array",
            "description": "Gets or sets the family members.",
            "items": {
              "$ref": "#/components/schemas/Rock.Rest.Controllers.GroupsController.GuestFamilyMember"
            }
          }
        },
        "description": ""
      },
      "Rock.Rest.Controllers.GroupsController.GuestFamilyMember": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Gets or sets the identifier.",
            "format": "int32"
          },
          "PersonAliasId": {
            "type": "integer",
            "description": "Gets or sets the person alias identifier.",
            "format": "int32"
          },
          "Guid": {
            "type": "string",
            "description": "Gets or sets the unique identifier.",
            "format": "uuid"
          },
          "FirstName": {
            "type": "string",
            "description": "Gets or sets the first name."
          },
          "LastName": {
            "type": "string",
            "description": "Gets or sets the last name."
          },
          "PhotoUrl": {
            "type": "string",
            "description": "Gets or sets the photo URL."
          },
          "CanCheckin": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this instance can checkin."
          },
          "Age": {
            "type": "integer",
            "description": "Gets or sets the age.",
            "format": "int32"
          },
          "Role": {
            "type": "string",
            "description": "Gets or sets the role."
          },
          "Gender": {
            "type": "string",
            "description": "Gets or sets the gender.",
            "enum": [
              "Unknown",
              "Male",
              "Female"
            ]
          }
        },
        "description": ""
      },
      "Rock.Rest.Controllers.GroupsController.InfoWindowRequest": {
        "type": "object",
        "properties": {
          "GroupPage": {
            "type": "string",
            "description": "Gets or sets the group page."
          },
          "PersonProfilePage": {
            "type": "string",
            "description": "Gets or sets the person profile page."
          },
          "MapPage": {
            "type": "string",
            "description": "Gets or sets the map page."
          },
          "Template": {
            "type": "string",
            "description": "Gets or sets the template."
          }
        },
        "description": ""
      },
      "Rock.Rest.Controllers.GroupsController.InfoWindowResult": {
        "type": "object",
        "properties": {
          "Result": {
            "type": "string",
            "description": "Gets or sets the result."
          }
        },
        "description": ""
      },
      "Rock.Web.UI.Controls.TreeViewItem": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "HasChildren": {
            "type": "boolean"
          },
          "IconCssClass": {
            "type": "string"
          },
          "IconSmallUrl": {
            "type": "string"
          },
          "IsActive": {
            "type": "boolean"
          },
          "CountInfo": {
            "type": "integer",
            "format": "int32"
          },
          "Children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rock.Web.UI.Controls.TreeViewItem"
            }
          }
        }
      },
      "System.Web.Http.OData.ODataQueryContext": {
        "type": "object",
        "properties": {
          "Model": {
            "$ref": "#/components/schemas/Microsoft.Data.Edm.IEdmModel"
          },
          "ElementType": {
            "$ref": "#/components/schemas/Microsoft.Data.Edm.IEdmType"
          },
          "ElementClrType": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "System.Web.Http.OData.Query.FilterQueryOption": {
        "type": "object",
        "properties": {
          "Context": {
            "$ref": "#/components/schemas/System.Web.Http.OData.ODataQueryContext"
          },
          "Validator": {
            "$ref": "#/components/schemas/System.Web.Http.OData.Query.Validators.FilterQueryValidator"
          },
          "FilterClause": {
            "$ref": "#/components/schemas/Microsoft.Data.OData.Query.SemanticAst.FilterClause"
          },
          "RawValue": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "System.Web.Http.OData.Query.InlineCountQueryOption": {
        "type": "object",
        "properties": {
          "Context": {
            "$ref": "#/components/schemas/System.Web.Http.OData.ODataQueryContext"
          },
          "RawValue": {
            "type": "string",
            "readOnly": true
          },
          "Value": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "None",
              "AllPages"
            ]
          }
        }
      },
      "System.Web.Http.OData.Query.ODataQueryOptions[Rock.Model.Group]": {
        "type": "object",
        "properties": {
          "IfMatch": {
            "type": "object",
            "properties": {},
            "readOnly": true
          },
          "IfNoneMatch": {
            "type": "object",
            "properties": {},
            "readOnly": true
          },
          "Context": {
            "$ref": "#/components/schemas/System.Web.Http.OData.ODataQueryContext"
          },
          "Request": {
            "type": "object",
            "properties": {},
            "readOnly": true
          },
          "RawValues": {
            "$ref": "#/components/schemas/System.Web.Http.OData.Query.ODataRawQueryOptions"
          },
          "SelectExpand": {
            "$ref": "#/components/schemas/System.Web.Http.OData.Query.SelectExpandQueryOption"
          },
          "Filter": {
            "$ref": "#/components/schemas/System.Web.Http.OData.Query.FilterQueryOption"
          },
          "OrderBy": {
            "$ref": "#/components/schemas/System.Web.Http.OData.Query.OrderByQueryOption"
          },
          "Skip": {
            "$ref": "#/components/schemas/System.Web.Http.OData.Query.SkipQueryOption"
          },
          "Top": {
            "$ref": "#/components/schemas/System.Web.Http.OData.Query.TopQueryOption"
          },
          "InlineCount": {
            "$ref": "#/components/schemas/System.Web.Http.OData.Query.InlineCountQueryOption"
          },
          "Validator": {
            "$ref": "#/components/schemas/System.Web.Http.OData.Query.Validators.ODataQueryValidator"
          }
        }
      },
      "System.Web.Http.OData.Query.ODataRawQueryOptions": {
        "type": "object",
        "properties": {
          "Filter": {
            "type": "string",
            "readOnly": true
          },
          "OrderBy": {
            "type": "string",
            "readOnly": true
          },
          "Top": {
            "type": "string",
            "readOnly": true
          },
          "Skip": {
            "type": "string",
            "readOnly": true
          },
          "Select": {
            "type": "string",
            "readOnly": true
          },
          "Expand": {
            "type": "string",
            "readOnly": true
          },
          "InlineCount": {
            "type": "string",
            "readOnly": true
          },
          "Format": {
            "type": "string",
            "readOnly": true
          },
          "SkipToken": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "System.Web.Http.OData.Query.OrderByNode": {
        "type": "object",
        "properties": {
          "Direction": {
            "type": "string",
            "readOnly": true,
            "enum": [
              "Ascending",
              "Descending"
            ]
          }
        }
      },
      "System.Web.Http.OData.Query.OrderByQueryOption": {
        "type": "object",
        "properties": {
          "Context": {
            "$ref": "#/components/schemas/System.Web.Http.OData.ODataQueryContext"
          },
          "OrderByNodes": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/System.Web.Http.OData.Query.OrderByNode"
            }
          },
          "RawValue": {
            "type": "string",
            "readOnly": true
          },
          "Validator": {
            "$ref": "#/components/schemas/System.Web.Http.OData.Query.Validators.OrderByQueryValidator"
          },
          "OrderByClause": {
            "$ref": "#/components/schemas/Microsoft.Data.OData.Query.SemanticAst.OrderByClause"
          }
        }
      },
      "System.Web.Http.OData.Query.SelectExpandQueryOption": {
        "type": "object",
        "properties": {
          "Context": {
            "$ref": "#/components/schemas/System.Web.Http.OData.ODataQueryContext"
          },
          "RawSelect": {
            "type": "string",
            "readOnly": true
          },
          "RawExpand": {
            "type": "string",
            "readOnly": true
          },
          "Validator": {
            "$ref": "#/components/schemas/System.Web.Http.OData.Query.Validators.SelectExpandQueryValidator"
          },
          "SelectExpandClause": {
            "$ref": "#/components/schemas/Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause"
          }
        }
      },
      "System.Web.Http.OData.Query.SkipQueryOption": {
        "type": "object",
        "properties": {
          "Context": {
            "$ref": "#/components/schemas/System.Web.Http.OData.ODataQueryContext"
          },
          "RawValue": {
            "type": "string",
            "readOnly": true
          },
          "Value": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "Validator": {
            "$ref": "#/components/schemas/System.Web.Http.OData.Query.Validators.SkipQueryValidator"
          }
        }
      },
      "System.Web.Http.OData.Query.TopQueryOption": {
        "type": "object",
        "properties": {
          "Context": {
            "$ref": "#/components/schemas/System.Web.Http.OData.ODataQueryContext"
          },
          "RawValue": {
            "type": "string",
            "readOnly": true
          },
          "Value": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "Validator": {
            "$ref": "#/components/schemas/System.Web.Http.OData.Query.Validators.TopQueryValidator"
          }
        }
      },
      "System.Web.Http.OData.Query.Validators.FilterQueryValidator": {
        "type": "object"
      },
      "System.Web.Http.OData.Query.Validators.ODataQueryValidator": {
        "type": "object"
      },
      "System.Web.Http.OData.Query.Validators.OrderByQueryValidator": {
        "type": "object"
      },
      "System.Web.Http.OData.Query.Validators.SelectExpandQueryValidator": {
        "type": "object"
      },
      "System.Web.Http.OData.Query.Validators.SkipQueryValidator": {
        "type": "object"
      },
      "System.Web.Http.OData.Query.Validators.TopQueryValidator": {
        "type": "object"
      },
      "Rock.BulkExport.AttributesExport": {
        "type": "object",
        "properties": {
          "AttributeValues": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          }
        }
      },
      "Rock.BulkExport.LocationExport": {
        "type": "object",
        "properties": {
          "Latitude": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "Longitude": {
            "type": "number",
            "format": "double",
            "readOnly": true
          },
          "Street1": {
            "type": "string",
            "readOnly": true
          },
          "Street2": {
            "type": "string",
            "readOnly": true
          },
          "City": {
            "type": "string",
            "readOnly": true
          },
          "State": {
            "type": "string",
            "readOnly": true
          },
          "PostalCode": {
            "type": "string",
            "readOnly": true
          },
          "Country": {
            "type": "string",
            "readOnly": true
          },
          "County": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "Rock.BulkExport.PeopleExport": {
        "type": "object",
        "properties": {
          "Page": {
            "type": "integer",
            "format": "int32"
          },
          "PageSize": {
            "type": "integer",
            "format": "int32"
          },
          "TotalCount": {
            "type": "integer",
            "format": "int32"
          },
          "Persons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rock.BulkExport.PersonExport"
            }
          }
        }
      },
      "Rock.BulkExport.PersonExport": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "PersonAliasIds": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "Title": {
            "type": "string",
            "readOnly": true
          },
          "FirstName": {
            "type": "string",
            "readOnly": true
          },
          "NickName": {
            "type": "string",
            "readOnly": true
          },
          "MiddleName": {
            "type": "string",
            "readOnly": true
          },
          "LastName": {
            "type": "string",
            "readOnly": true
          },
          "Suffix": {
            "type": "string",
            "readOnly": true
          },
          "PhotoUrl": {
            "type": "string",
            "readOnly": true
          },
          "BirthDay": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "BirthMonth": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "BirthYear": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "Gender": {
            "type": "string",
            "readOnly": true
          },
          "MaritalStatusValueId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "MaritalStatus": {
            "type": "string",
            "readOnly": true
          },
          "AnniversaryDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "GraduationYear": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GivingGroupId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "GivingId": {
            "type": "string",
            "readOnly": true
          },
          "GivingLeaderId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "Email": {
            "type": "string",
            "readOnly": true
          },
          "AgeClassification": {
            "type": "string",
            "readOnly": true
          },
          "PrimaryFamilyId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "PrimaryCampusId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "DeceasedDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "IsBusiness": {
            "type": "boolean",
            "readOnly": true
          },
          "HomePhone": {
            "type": "string",
            "readOnly": true
          },
          "MobilePhone": {
            "type": "string",
            "readOnly": true
          },
          "HomeAddress": {
            "$ref": "#/components/schemas/Rock.BulkExport.LocationExport"
          },
          "RecordTypeValueId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "RecordType": {
            "type": "string",
            "readOnly": true
          },
          "RecordStatusValueId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "RecordStatus": {
            "type": "string",
            "readOnly": true
          },
          "RecordStatusLastModifiedDateTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "RecordStatusReasonValueId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "RecordStatusReason": {
            "type": "string",
            "readOnly": true
          },
          "ConnectionStatusValueId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ConnectionStatus": {
            "type": "string",
            "readOnly": true
          },
          "IsDeceased": {
            "type": "boolean",
            "readOnly": true
          },
          "CreatedDateTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "ModifiedDateTime": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "Guid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "ForeignKey": {
            "type": "string",
            "readOnly": true
          },
          "ForeignId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "ForeignGuid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "AttributesExport": {
            "$ref": "#/components/schemas/Rock.BulkExport.AttributesExport"
          }
        }
      },
      "Rock.Rest.Controllers.ConfigureTextToGiveArgs": {
        "type": "object",
        "properties": {
          "ContributionFinancialAccountId": {
            "type": "integer",
            "description": "The Financial Account Id that will be the default gift designation for the person. Null value\r\nclears the setting and requires the user to set before text-to-give will work for them.",
            "format": "int32"
          },
          "FinancialPersonSavedAccountId": {
            "type": "integer",
            "description": "The Saved Account associated with the person that will be used as the default payment method for\r\nthe person throughout Rock",
            "format": "int32"
          }
        },
        "description": ""
      },
      "Rock.Rest.Controllers.PeopleController.DuplicatePersonInfo": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Gets or sets the identifier.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Gets or sets the name."
          },
          "Email": {
            "type": "string",
            "description": "Gets or sets the email."
          },
          "Gender": {
            "type": "string",
            "description": "Gets or sets the gender.",
            "enum": [
              "Unknown",
              "Male",
              "Female"
            ]
          },
          "BirthMonth": {
            "type": "integer",
            "description": "Gets or sets the birth month.",
            "format": "int32"
          },
          "BirthDay": {
            "type": "integer",
            "description": "Gets or sets the birth day.",
            "format": "int32"
          },
          "BirthYear": {
            "type": "integer",
            "description": "Gets or sets the birth year.",
            "format": "int32"
          }
        },
        "description": ""
      },
      "Rock.Rest.Controllers.PersonInteractionStatistics": {
        "type": "object",
        "properties": {
          "InteractionsAllTime": {
            "type": "integer",
            "description": "Gets or sets the interactions all time.",
            "format": "int32"
          },
          "InteractionsThatDay": {
            "type": "integer",
            "description": "Gets or sets the interactions that day.",
            "format": "int32"
          },
          "InteractionsThatMonth": {
            "type": "integer",
            "description": "Gets or sets the interactions that month.",
            "format": "int32"
          },
          "InteractionsThatYear": {
            "type": "integer",
            "description": "Gets or sets the interactions that year.",
            "format": "int32"
          }
        },
        "description": "Person Interaction Statistics"
      },
      "Rock.Rest.Controllers.PersonSearchPhoneNumber": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "string",
            "description": "Gets or sets the type of phone number this instance represents."
          },
          "Number": {
            "type": "string",
            "description": "Gets or sets the formatted phone number this instance represents."
          },
          "IsUnlisted": {
            "type": "boolean",
            "description": "Gets or sets a value that indicates if this phone number is unlisted."
          }
        },
        "description": "A phone number that will be included in the search results."
      },
      "Rock.Rest.Controllers.PersonSearchResult": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Gets or sets the id.",
            "format": "int32"
          },
          "Guid": {
            "type": "string",
            "description": "Gets or sets the unique identifier of the person.",
            "format": "uuid"
          },
          "PrimaryAliasGuid": {
            "type": "string",
            "description": "Gets or sets the unique identifier of the person's primary alias.",
            "format": "uuid"
          },
          "Name": {
            "type": "string",
            "description": "Gets or sets the full name last first."
          },
          "IsActive": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this instance is active."
          },
          "IsDeceased": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this instance is deceased."
          },
          "IsBusiness": {
            "type": "boolean",
            "description": "Gets or sets a value indicating whether this instance is a business."
          },
          "ImageUrl": {
            "type": "string",
            "description": "Gets or sets the person photo image to display."
          },
          "ImageHtmlTag": {
            "type": "string",
            "description": "Gets or sets the image HTML tag."
          },
          "Age": {
            "type": "integer",
            "description": "Gets or sets the age in years\r\nNOTE: returns -1 if age is unknown",
            "format": "int32"
          },
          "FormattedAge": {
            "type": "string",
            "description": "Gets or sets the formatted age."
          },
          "AgeClassification": {
            "type": "string",
            "description": "Gets or sets the age classification value.",
            "enum": [
              "Unknown",
              "Adult",
              "Child"
            ]
          },
          "Gender": {
            "type": "string",
            "description": "Gets or sets the gender."
          },
          "ConnectionStatus": {
            "type": "string",
            "description": "Gets or sets the connection status."
          },
          "ConnectionStatusColor": {
            "type": "string",
            "description": "Gets or sets the color of the connection status."
          },
          "RecordStatus": {
            "type": "string",
            "description": "Gets or sets the record status."
          },
          "Email": {
            "type": "string",
            "description": "Gets or sets the email."
          },
          "SpouseName": {
            "type": "string",
            "description": "Gets or sets the name of the spouse."
          },
          "SpouseNickName": {
            "type": "string",
            "description": "Gets or sets the nickname of the spouse."
          },
          "CampusName": {
            "type": "string",
            "description": "Gets or sets the name of the campus."
          },
          "CampusShortCode": {
            "type": "string",
            "description": "Gets or sets the campus short code."
          },
          "Address": {
            "type": "string",
            "description": "Gets or sets the address."
          },
          "PhoneNumbers": {
            "type": "array",
            "description": "Gets or sets the phone numbers for this person.",
            "items": {
              "$ref": "#/components/schemas/Rock.Rest.Controllers.PersonSearchPhoneNumber"
            }
          },
          "PickerItemDetailsHtml": {
            "type": "string",
            "description": "Gets or sets the picker item details HTML."
          },
          "SearchDetailsHtml": {
            "type": "string",
            "description": "The search details"
          },
          "PickerItemDetailsImageHtml": {
            "type": "string",
            "description": "Gets or sets the picker item details image HTML."
          },
          "PickerItemDetailsPersonInfoHtml": {
            "type": "string",
            "description": "Gets or sets the picker item details person information HTML."
          }
        },
        "description": ""
      }
    }
  },
  "x-original-swagger-version": "2.0"
}