/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/Groups": {
    /** Queryable GET endpoint */
    get: operations["GETapi_Groups"];
    /** POST endpoint. Use this to add a record */
    post: operations["POSTapi_Groups"];
  };
  "/api/Groups/{id}": {
    /** GET endpoint to get a single record */
    get: operations["GETapi_Groups_id"];
    /** PUT endpoint. Use this to update a record */
    put: operations["PUTapi_Groups_id"];
    /** DELETE endpoint. To delete the record */
    delete: operations["DELETEapi_Groups_id"];
    /** PATCH endpoint. Use this to update a subset of the properties of the record */
    patch: operations["PATCHapi_Groups_id"];
  };
  "/api/Groups/AttributeValue/{id}": {
    /** POST an attribute value. Use this to set an attribute value for the record */
    post: operations["POSTapi_Groups_AttributeValue_idattributeKeyattributeKeyattributeValueattributeValue"];
    /** DELETE to delete the specified attribute value for the record */
    delete: operations["DELETEapi_Groups_AttributeValue_idattributeKeyattributeKey"];
  };
  "/api/Groups/ByLatLong": {
    /**
     * Gets a list of groups surrounding the specified lat/long, optionally limited to the specified geofenceGroupTypeId
     * If geofenceGroupTypeId is specified, the list of GeoFence groups will be returned with the groups as child groups of that geofence group.
     */
    get: operations["GETapi_Groups_ByLatLonggroupTypeIdgroupTypeIdlatitudelatitudelongitudelongitudesortByDistancesortByDistancemaxDistanceMilesmaxDistanceMilesgeofenceGroupTypeIdgeofenceGroupTypeId"];
  };
  "/api/Groups/ByLocation": {
    /**
     * Gets a list of groups surrounding the specified the location, optionally limited to the specified geofenceGroupTypeId
     * If geofenceGroupTypeId is specified, the list of GeoFence groups will be returned with the groups as child groups of that geofence group.
     */
    get: operations["GETapi_Groups_ByLocationgroupTypeIdgroupTypeIdlocationIdlocationIdsortByDistancesortByDistancemaxDistanceMilesmaxDistanceMilesgeofenceGroupTypeIdgeofenceGroupTypeId"];
  };
  "/api/Groups/DataView/{id}": {
    /** Gets a list of objects represented by the selected data view */
    get: operations["GETapi_Groups_DataView_id"];
  };
  "/api/Groups/FollowedItems": {
    get: operations["GETapi_Groups_FollowedItemspersonIdpersonIdpersonAliasIdpersonAliasId"];
  };
  "/api/Groups/GetByAttributeValue": {
    get: operations["GETapi_Groups_GetByAttributeValueattributeIdattributeIdattributeKeyattributeKeyvaluevaluecaseSensitivecaseSensitive"];
  };
  "/api/Groups/GetChildren/{id}": {
    /** Gets the children. */
    get: operations["GETapi_Groups_GetChildren_idrootGroupIdrootGroupIdlimitToSecurityRoleGroupslimitToSecurityRoleGroupsincludedGroupTypeIdsincludedGroupTypeIdsexcludedGroupTypeIdsexcludedGroupTypeIdsincludeInactiveGroupsincludeInactiveGroupscountsTypecountsTypecampusIdcampusIdincludeNoCampusincludeNoCampuslimitToPubliclimitToPubliclimitToSchedulingEnabledlimitToSchedulingEnabledlimitToRSVPEnabledlimitToRSVPEnabled"];
  };
  "/api/Groups/GetFamilies/{personId}": {
    /** Gets the families sorted by the person's GroupOrder (GroupMember.GroupOrder) */
    get: operations["GETapi_Groups_GetFamilies_personId"];
  };
  "/api/Groups/GetFamiliesByPersonNameSearch/{searchString}": {
    /** Gets the families by name search. */
    get: operations["GETapi_Groups_GetFamiliesByPersonNameSearch_searchString"];
  };
  "/api/Groups/GetFamiliesByPersonNameSearch/{searchString}/{maxResults}": {
    /** Gets the families by name search. */
    get: operations["GETapi_Groups_GetFamiliesByPersonNameSearch_searchString_maxResults"];
  };
  "/api/Groups/GetFamily/{familyId}": {
    /** Gets the family. */
    get: operations["GETapi_Groups_GetFamily_familyId"];
  };
  "/api/Groups/GetGuestsForFamily/{groupId}": {
    /** Gets the guests (known relationship of can check-in) for given family. */
    get: operations["GETapi_Groups_GetGuestsForFamily_groupId"];
  };
  "/api/Groups/GetMapInfo/{groupId}": {
    /** Gets the map information. */
    get: operations["GETapi_Groups_GetMapInfo_groupId"];
  };
  "/api/Groups/GetMapInfo/{groupId}/Children": {
    /** Gets the child map information. */
    get: operations["GETapi_Groups_GetMapInfo_groupId_ChildrengroupTypeIdsgroupTypeIdsincludeDescendantsincludeDescendants"];
  };
  "/api/Groups/GetMapInfo/{groupId}/Families/{statusId}": {
    /** Gets the families map information. */
    get: operations["GETapi_Groups_GetMapInfo_groupId_Families_statusId"];
  };
  "/api/Groups/GetMapInfo/{groupId}/Members/{groupMemberStatus}": {
    /** Gets the member map information. */
    get: operations["GETapi_Groups_GetMapInfo_groupId_Members_groupMemberStatus"];
  };
  "/api/Groups/GetMapInfoWindow/{groupId}/{locationId}": {
    /** Gets the map information window. */
    post: operations["POSTapi_Groups_GetMapInfoWindow_groupId_locationId"];
  };
  "/api/Groups/GroupTypeCheckinConfiguration/{groupTypeGuid}": {
    /**
     * Returns a simplified data structure of the check-in parameters. This is used by FrontPorch but is generalized.
     * The children of the provided group GUID are incuded in the results.
     */
    get: operations["GETapi_Groups_GroupTypeCheckinConfiguration_groupTypeGuid"];
  };
  "/api/Groups/InDataView/{dataViewId}/{entityId}": {
    /** Determines if the entity id is in the data view */
    get: operations["GETapi_Groups_InDataView_dataViewId_entityId"];
  };
  "/api/Groups/LaunchWorkflow/{id}": {
    /** Launches a workflow. And optionally passes the entity with selected id as the entity for the workflow */
    post: operations["POSTapi_Groups_LaunchWorkflow_idworkflowTypeIdworkflowTypeIdworkflowNameworkflowName"];
  };
  "/api/Groups/SaveAddress/{groupId}/{locationTypeId}": {
    /** Saves a group address. */
    put: operations["PUTapi_Groups_SaveAddress_groupId_locationTypeIdstreet1street1street2street2citycitystatestatepostalCodepostalCodecountrycountry"];
  };
  "/api/Groups/SetContext/{id}": {
    /** Sets the Context Cookie to the specified record. Use this to set the Campus Context, Group Context, etc */
    put: operations["PUTapi_Groups_SetContext_id"];
    /** Sets the Context Cookie to the specified record. Use this to set the Campus Context, Group Context, etc */
    options: operations["OPTIONSapi_Groups_SetContext_id"];
  };
  "/api/GroupTypes": {
    /** Queryable GET endpoint */
    get: operations["GETapi_GroupTypes"];
    /** POST endpoint. Use this to add a record */
    post: operations["POSTapi_GroupTypes"];
  };
  "/api/GroupTypes/{id}": {
    /** GET endpoint to get a single record */
    get: operations["GETapi_GroupTypes_id"];
    /** PUT endpoint. Use this to update a record */
    put: operations["PUTapi_GroupTypes_id"];
    /** DELETE endpoint. To delete the record */
    delete: operations["DELETEapi_GroupTypes_id"];
    /** PATCH endpoint. Use this to update a subset of the properties of the record */
    patch: operations["PATCHapi_GroupTypes_id"];
  };
  "/api/GroupTypes/AttributeValue/{id}": {
    /** POST an attribute value. Use this to set an attribute value for the record */
    post: operations["POSTapi_GroupTypes_AttributeValue_idattributeKeyattributeKeyattributeValueattributeValue"];
    /** DELETE to delete the specified attribute value for the record */
    delete: operations["DELETEapi_GroupTypes_AttributeValue_idattributeKeyattributeKey"];
  };
  "/api/GroupTypes/DataView/{id}": {
    /** Gets a list of objects represented by the selected data view */
    get: operations["GETapi_GroupTypes_DataView_id"];
  };
  "/api/GroupTypes/FollowedItems": {
    get: operations["GETapi_GroupTypes_FollowedItemspersonIdpersonIdpersonAliasIdpersonAliasId"];
  };
  "/api/GroupTypes/GetByAttributeValue": {
    get: operations["GETapi_GroupTypes_GetByAttributeValueattributeIdattributeIdattributeKeyattributeKeyvaluevaluecaseSensitivecaseSensitive"];
  };
  "/api/GroupTypes/InDataView/{dataViewId}/{entityId}": {
    /** Determines if the entity id is in the data view */
    get: operations["GETapi_GroupTypes_InDataView_dataViewId_entityId"];
  };
  "/api/GroupTypes/LaunchWorkflow/{id}": {
    /** Launches a workflow. And optionally passes the entity with selected id as the entity for the workflow */
    post: operations["POSTapi_GroupTypes_LaunchWorkflow_idworkflowTypeIdworkflowTypeIdworkflowNameworkflowName"];
  };
  "/api/GroupTypes/SetContext/{id}": {
    /** Sets the Context Cookie to the specified record. Use this to set the Campus Context, Group Context, etc */
    put: operations["PUTapi_GroupTypes_SetContext_id"];
    /** Sets the Context Cookie to the specified record. Use this to set the Campus Context, Group Context, etc */
    options: operations["OPTIONSapi_GroupTypes_SetContext_id"];
  };
  "/api/People": {
    /** Queryable GET endpoint. Note that records that are marked as Deceased are not included */
    get: operations["GETapi_People"];
    /** Adds a new person and puts them into a new family */
    post: operations["POSTapi_People"];
  };
  "/api/People({key})": {
    /** Queryable GET endpoint with an option to include person records that have been marked as Deceased */
    get: operations["GETapi_PeoplekeyincludeDeceasedincludeDeceased"];
  };
  "/api/People/{id}": {
    /** GET endpoint to get a single person record */
    get: operations["GETapi_People_id"];
    /** PUT endpoint. Use this to update a record */
    put: operations["PUTapi_People_id"];
    /** DELETE endpoint for a Person Record. NOTE: Person records can not be deleted using REST, so this will always return a 405 */
    delete: operations["DELETEapi_People_id"];
    /** PATCH endpoint. Use this to update a subset of the properties of the record */
    patch: operations["PATCHapi_People_id"];
  };
  "/api/People/AddExistingPersonToFamily": {
    /** Adds the existing person to family, optionally removing them from any other families they belong to */
    post: operations["POSTapi_People_AddExistingPersonToFamilypersonIdpersonIdfamilyIdfamilyIdgroupRoleIdgroupRoleIdremoveFromOtherFamiliesremoveFromOtherFamilies"];
  };
  "/api/People/AddNewPersonToFamily/{familyId}": {
    /** Adds a new person and adds them to the specified family. */
    post: operations["POSTapi_People_AddNewPersonToFamily_familyIdgroupRoleIdgroupRoleId"];
  };
  "/api/People/AttributeValue/{id}": {
    /** POST an attribute value. Use this to set an attribute value for the record */
    post: operations["POSTapi_People_AttributeValue_idattributeKeyattributeKeyattributeValueattributeValue"];
    /** DELETE to delete the specified attribute value for the record */
    delete: operations["DELETEapi_People_AttributeValue_idattributeKeyattributeKey"];
  };
  "/api/People/ConfigureTextToGive/{personId}": {
    /** Allows setting a configuration for the person for text-to-give. */
    post: operations["POSTapi_People_ConfigureTextToGive_personId"];
  };
  "/api/People/DataView/{id}": {
    /** Gets a list of objects represented by the selected data view */
    get: operations["GETapi_People_DataView_id"];
  };
  "/api/People/Export": {
    /** Exports Person Records */
    get: operations["GETapi_People_ExportpagepagepageSizepageSizesortBysortBysortDirectionsortDirectiondataViewIddataViewIdmodifiedSincemodifiedSinceattributeKeysattributeKeysattributeReturnTypeattributeReturnType"];
  };
  "/api/People/FollowedItems": {
    get: operations["GETapi_People_FollowedItemspersonIdpersonIdpersonAliasIdpersonAliasId"];
  };
  "/api/People/GetBlockUserPreference": {
    /** Gets the currently logged in <see cref="T:Rock.Model.Person">person's</see> user preference for the specified block */
    get: operations["GETapi_People_GetBlockUserPreferenceblockIdblockIduserPreferenceKeyuserPreferenceKey"];
  };
  "/api/People/GetBlockUserPreference/{blockGuid}": {
    /** Gets the currently logged in <see cref="T:Rock.Model.Person">person's</see> user preference for the specified block */
    get: operations["GETapi_People_GetBlockUserPreference_blockGuiduserPreferenceKeyuserPreferenceKey"];
  };
  "/api/People/GetByAttributeValue": {
    get: operations["GETapi_People_GetByAttributeValueattributeIdattributeIdattributeKeyattributeKeyvaluevaluecaseSensitivecaseSensitive"];
  };
  "/api/People/GetByEmail": {
    /** Searches the person records based on the specified email address */
    get: operations["GETapi_People_GetByEmailemailemail"];
  };
  "/api/People/GetByEmail/{email}": {
    /** Searches the person records based on the specified email address */
    get: operations["GETapi_People_GetByEmail_email"];
  };
  "/api/People/GetByPersonAliasId/{personAliasId}": {
    /** GET the Person by person alias identifier. */
    get: operations["GETapi_People_GetByPersonAliasId_personAliasId"];
  };
  "/api/People/GetByPhoneNumber/{number}": {
    /** Searches the person records based on the specified phone number. NOTE that partial matches are included */
    get: operations["GETapi_People_GetByPhoneNumber_number"];
  };
  "/api/People/GetByToken/{token}": {
    /** GET a person record based on a temporary person token and increment the usage count of the token */
    get: operations["GETapi_People_GetByToken_token"];
  };
  "/api/People/GetByUserName/{username}": {
    /** GET a person record based on the specified username */
    get: operations["GETapi_People_GetByUserName_username"];
  };
  "/api/People/GetCurrentPerson": {
    /** Gets the currently authenticated person */
    get: operations["GETapi_People_GetCurrentPerson"];
  };
  "/api/People/GetCurrentPersonImpersonationToken": {
    /**
     * Gets the current person's impersonation token. This is used by external apps who might have a logged in person but
     * need to create a impersonation token to link to the website. For instance a mobile app might have the current person
     * and have a cookie, but would like to link out to the website.
     */
    get: operations["GETapi_People_GetCurrentPersonImpersonationTokenexpireDateTimeexpireDateTimeusageLimitusageLimitpageIdpageId"];
  };
  "/api/People/GetGraduationYear/{gradeOffset}": {
    /** Gets the graduation year based on the provided GradeOffset */
    get: operations["GETapi_People_GetGraduationYear_gradeOffset"];
  };
  "/api/People/GetImpersonationParameter": {
    /**
     * Creates and stores a new PersonToken for a person using the specified ExpireDateTime, UsageLimit, and Page
     * Returns the encrypted URLEncoded Token along with the ImpersonationParameter key in the form of "rckipid={ImpersonationParameter}"
     */
    get: operations["GETapi_People_GetImpersonationParameterpersonIdpersonIdexpireDateTimeexpireDateTimeusageLimitusageLimitpageIdpageId"];
  };
  "/api/People/GetInteractionStatistics/{personId}": {
    /** Gets the count of interactions over several timeframes for the current or specified person. */
    get: operations["GETapi_People_GetInteractionStatistics_personIddatedateinteractionChannelIdinteractionChannelIdinteractionComponentIdinteractionComponentIdinteractionChannelGuidinteractionChannelGuidinteractionComponentGuidinteractionComponentGuid"];
  };
  "/api/People/GetPotentialDuplicates": {
    /**
     * Gets a list of people's names, email, gender and birthdate, to see if there are potential duplicates.
     * For example, you might want to use this during account creation to warn that the person might already have an account.
     */
    get: operations["GETapi_People_GetPotentialDuplicateslastNamelastNameemailAddressemailAddress"];
  };
  "/api/People/GetSearchDetails": {
    /** Gets the search details (for the person picker) */
    get: operations["GETapi_People_GetSearchDetailsidid"];
  };
  "/api/People/GetUserPreference": {
    /**
     * Gets the currently logged in <see cref="T:Rock.Model.Person">person's</see> user preference.
     * Note: If the user preference is for a specific block, use ~/api/People/GetBlockUserPreference instead.
     */
    get: operations["GETapi_People_GetUserPreferenceuserPreferenceKeyuserPreferenceKey"];
  };
  "/api/People/InDataView/{dataViewId}/{entityId}": {
    /** Determines if the entity id is in the data view */
    get: operations["GETapi_People_InDataView_dataViewId_entityId"];
  };
  "/api/People/LaunchWorkflow/{id}": {
    /** Launches a workflow. And optionally passes the entity with selected id as the entity for the workflow */
    post: operations["POSTapi_People_LaunchWorkflow_idworkflowTypeIdworkflowTypeIdworkflowNameworkflowName"];
  };
  "/api/People/PopupHtml/{personId}": {
    /** Gets the popup html for the selected person */
    get: operations["GETapi_People_PopupHtml_personId"];
  };
  "/api/People/PopupHtml/{personId}/{emailAsLink}": {
    /** Gets the popup html for the selected person */
    get: operations["GETapi_People_PopupHtml_personId_emailAsLink"];
  };
  "/api/People/Search": {
    /** Returns results to the Person Picker */
    get: operations["GETapi_People_SearchnamenameincludeDetailsincludeDetailsincludeBusinessesincludeBusinessesincludeDeceasedincludeDeceasedaddressaddressphonephoneemailemail"];
  };
  "/api/People/SetBlockUserPreference": {
    /** Saves the currently logged in <see cref="T:Rock.Model.Person">person's</see> user preference for the specified block */
    post: operations["POSTapi_People_SetBlockUserPreferenceblockIdblockIduserPreferenceKeyuserPreferenceKeyvaluevalue"];
  };
  "/api/People/SetBlockUserPreference/{blockGuid}": {
    /** Saves the currently logged in <see cref="T:Rock.Model.Person">person's</see> user preference for the specified block */
    post: operations["POSTapi_People_SetBlockUserPreference_blockGuiduserPreferenceKeyuserPreferenceKeyvaluevalue"];
  };
  "/api/People/SetContext/{id}": {
    /** Sets the Context Cookie to the specified record. Use this to set the Campus Context, Group Context, etc */
    put: operations["PUTapi_People_SetContext_id"];
    /** Sets the Context Cookie to the specified record. Use this to set the Campus Context, Group Context, etc */
    options: operations["OPTIONSapi_People_SetContext_id"];
  };
  "/api/People/SetUserPreference": {
    /**
     * Saves the currently logged in <see cref="T:Rock.Model.Person">person's</see> user preference.
     * Note: If the user preference is for a specific block, use ~/api/People/SetBlockUserPreference instead.
     */
    post: operations["POSTapi_People_SetUserPreferenceuserPreferenceKeyuserPreferenceKeyvaluevalue"];
  };
  "/api/People/UpdateProfilePhoto": {
    /** Updates the profile photo of the logged in person. */
    post: operations["POSTapi_People_UpdateProfilePhotofilenamefilename"];
  };
  "/api/People/VCard/{personGuid}": {
    /** Returns VCard for person. */
    get: operations["GETapi_People_VCard_personGuid"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    "Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotationsManager": Record<string, never>;
    "Microsoft.Data.Edm.Annotations.IEdmVocabularyAnnotation": {
      Qualifier?: string;
      Term?: components["schemas"]["Microsoft.Data.Edm.IEdmTerm"];
      Target?: components["schemas"]["Microsoft.Data.Edm.IEdmVocabularyAnnotatable"];
    };
    "Microsoft.Data.Edm.IEdmModel": {
      SchemaElements?: readonly components["schemas"]["Microsoft.Data.Edm.IEdmSchemaElement"][];
      VocabularyAnnotations?: readonly components["schemas"]["Microsoft.Data.Edm.Annotations.IEdmVocabularyAnnotation"][];
      ReferencedModels?: readonly components["schemas"]["Microsoft.Data.Edm.IEdmModel"][];
      DirectValueAnnotationsManager?: components["schemas"]["Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotationsManager"];
    };
    "Microsoft.Data.Edm.IEdmSchemaElement": {
      /** @enum {string} */
      SchemaElementKind?: "None" | "TypeDefinition" | "Function" | "ValueTerm" | "EntityContainer";
      Namespace?: string;
      Name?: string;
    };
    "Microsoft.Data.Edm.IEdmTerm": {
      /** @enum {string} */
      TermKind?: "None" | "Type" | "Value";
      /** @enum {string} */
      SchemaElementKind?: "None" | "TypeDefinition" | "Function" | "ValueTerm" | "EntityContainer";
      Namespace?: string;
      Name?: string;
    };
    "Microsoft.Data.Edm.IEdmType": {
      /** @enum {string} */
      TypeKind?: "None" | "Primitive" | "Entity" | "Complex" | "Row" | "Collection" | "EntityReference" | "Enum";
    };
    "Microsoft.Data.Edm.IEdmTypeReference": {
      IsNullable?: boolean;
      Definition?: components["schemas"]["Microsoft.Data.Edm.IEdmType"];
    };
    "Microsoft.Data.Edm.IEdmVocabularyAnnotatable": Record<string, never>;
    "Microsoft.Data.OData.Query.SemanticAst.FilterClause": {
      Expression?: components["schemas"]["Microsoft.Data.OData.Query.SemanticAst.SingleValueNode"];
      RangeVariable?: components["schemas"]["Microsoft.Data.OData.Query.SemanticAst.RangeVariable"];
      ItemType?: components["schemas"]["Microsoft.Data.Edm.IEdmTypeReference"];
    };
    "Microsoft.Data.OData.Query.SemanticAst.OrderByClause": {
      ThenBy?: components["schemas"]["Microsoft.Data.OData.Query.SemanticAst.OrderByClause"];
      Expression?: components["schemas"]["Microsoft.Data.OData.Query.SemanticAst.SingleValueNode"];
      /** @enum {string} */
      Direction?: "Ascending" | "Descending";
      RangeVariable?: components["schemas"]["Microsoft.Data.OData.Query.SemanticAst.RangeVariable"];
      ItemType?: components["schemas"]["Microsoft.Data.Edm.IEdmTypeReference"];
    };
    "Microsoft.Data.OData.Query.SemanticAst.RangeVariable": {
      Name?: string;
      TypeReference?: components["schemas"]["Microsoft.Data.Edm.IEdmTypeReference"];
      /** Format: int32 */
      Kind?: number;
    };
    "Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause": {
      SelectedItems?: readonly components["schemas"]["Microsoft.Data.OData.Query.SemanticAst.SelectItem"][];
      AllSelected?: boolean;
    };
    "Microsoft.Data.OData.Query.SemanticAst.SelectItem": Record<string, never>;
    "Microsoft.Data.OData.Query.SemanticAst.SingleValueNode": {
      TypeReference?: components["schemas"]["Microsoft.Data.Edm.IEdmTypeReference"];
      /** @enum {string} */
      Kind?: "None" | "Constant" | "Convert" | "NonentityRangeVariableReference" | "BinaryOperator" | "UnaryOperator" | "SingleValuePropertyAccess" | "CollectionPropertyAccess" | "SingleValueFunctionCall" | "Any" | "CollectionNavigationNode" | "SingleNavigationNode" | "SingleValueOpenPropertyAccess" | "SingleEntityCast" | "All" | "EntityCollectionCast" | "EntityRangeVariableReference" | "SingleEntityFunctionCall" | "CollectionFunctionCall" | "EntityCollectionFunctionCall" | "NamedFunctionParameter";
    };
    "Rock.Field.ConfigurationValue": {
      Name?: string;
      Description?: string;
      Value?: string;
    };
    /**
     * @example {
     *   "IsSystem": false,
     *   "FieldTypeId": 0,
     *   "Order": 0,
     *   "IsGridColumn": false,
     *   "IsDefaultPersistedValueDirty": false,
     *   "IsMultiValue": false,
     *   "IsRequired": false,
     *   "AllowSearch": false,
     *   "IsIndexEnabled": false,
     *   "IsAnalytic": false,
     *   "IsAnalyticHistory": false,
     *   "IsActive": true,
     *   "EnableHistory": false,
     *   "IsPublic": false,
     *   "ShowOnBulk": false,
     *   "AttributeQualifiers": [],
     *   "Categories": [],
     *   "ModifiedAuditValuesAlreadyUpdated": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "af0c48d7-889d-4ee9-ae38-b91f90f5fe54"
     * }
     */
    "Rock.Model.Attribute": {
      AbbreviatedName?: string;
      IsSystem: boolean;
      /** Format: int32 */
      FieldTypeId: number;
      /** Format: int32 */
      EntityTypeId?: number;
      EntityTypeQualifierColumn?: string;
      EntityTypeQualifierValue?: string;
      Key: string;
      Name: string;
      Description?: string;
      /** Format: int32 */
      Order: number;
      IsGridColumn: boolean;
      DefaultValue?: string;
      DefaultPersistedTextValue?: string;
      DefaultPersistedHtmlValue?: string;
      DefaultPersistedCondensedTextValue?: string;
      DefaultPersistedCondensedHtmlValue?: string;
      IsDefaultPersistedValueDirty?: boolean;
      IsMultiValue: boolean;
      IsRequired: boolean;
      IconCssClass?: string;
      AttributeColor?: string;
      AllowSearch: boolean;
      IsIndexEnabled?: boolean;
      IsAnalytic?: boolean;
      IsAnalyticHistory?: boolean;
      IsActive?: boolean;
      EnableHistory?: boolean;
      PreHtml?: string;
      PostHtml?: string;
      IsPublic?: boolean;
      ShowOnBulk?: boolean;
      EntityType?: components["schemas"]["Rock.Model.EntityType"];
      AttributeQualifiers?: components["schemas"]["Rock.Model.AttributeQualifier"][];
      FieldType?: components["schemas"]["Rock.Model.FieldType"];
      Categories?: components["schemas"]["Rock.Model.Category"][];
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: int32 */
      CreatedByPersonAliasId?: number;
      /** Format: int32 */
      ModifiedByPersonAliasId?: number;
      ModifiedAuditValuesAlreadyUpdated?: boolean;
      Attributes?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeCache"];
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    /**
     * @example {
     *   "IsSystem": false,
     *   "AttributeId": 0,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "b97777c3-3c30-4d4a-bb88-65252f56cc5a"
     * }
     */
    "Rock.Model.AttributeQualifier": {
      IsSystem: boolean;
      /** Format: int32 */
      AttributeId: number;
      Key: string;
      Value?: string;
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    /**
     * @example {
     *   "IsTemporary": false,
     *   "IsSystem": false,
     *   "ModifiedAuditValuesAlreadyUpdated": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "01d9a01a-7913-4310-9202-d9771632dbcb"
     * }
     */
    "Rock.Model.BinaryFile": {
      Url?: string;
      IsTemporary: boolean;
      IsSystem: boolean;
      /** Format: int32 */
      BinaryFileTypeId?: number;
      FileName: string;
      /** Format: int64 */
      FileSize?: number;
      MimeType: string;
      Description?: string;
      /** Format: int32 */
      StorageEntityTypeId?: number;
      Path?: string;
      /** Format: int32 */
      Width?: number;
      /** Format: int32 */
      Height?: number;
      /** Format: date-time */
      ContentLastModified?: string;
      AdditionalInformation?: string;
      /** Format: int32 */
      ParentEntityTypeId?: number;
      /** Format: int32 */
      ParentEntityId?: number;
      BinaryFileType?: components["schemas"]["Rock.Model.BinaryFileType"];
      Document?: components["schemas"]["Rock.Model.Document"];
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: int32 */
      CreatedByPersonAliasId?: number;
      /** Format: int32 */
      ModifiedByPersonAliasId?: number;
      ModifiedAuditValuesAlreadyUpdated?: boolean;
      Attributes?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeCache"];
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    /**
     * @example {
     *   "IsSystem": false,
     *   "CacheToServerFileSystem": false,
     *   "RequiresViewSecurity": false,
     *   "PreferredFormat": -1,
     *   "PreferredResolution": -1,
     *   "PreferredColorDepth": -1,
     *   "PreferredRequired": false,
     *   "ModifiedAuditValuesAlreadyUpdated": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "d575fef1-2760-4562-a78e-e3e80751c4ea"
     * }
     */
    "Rock.Model.BinaryFileType": {
      IsSystem: boolean;
      Name: string;
      Description?: string;
      IconCssClass?: string;
      /** Format: int32 */
      StorageEntityTypeId?: number;
      CacheToServerFileSystem?: boolean;
      RequiresViewSecurity?: boolean;
      /** Format: int32 */
      MaxWidth?: number;
      /** Format: int32 */
      MaxHeight?: number;
      /** @enum {string} */
      PreferredFormat?: "Undefined" | "JPG" | "GIF" | "PNG" | "PDF" | "Word" | "Excel" | "Text" | "HTML";
      /** @enum {string} */
      PreferredResolution?: "Undefined" | "DPI72" | "DPI150" | "DPI300" | "DPI600";
      /** @enum {string} */
      PreferredColorDepth?: "Undefined" | "BlackWhite" | "Grayscale8bit" | "Grayscale24bit" | "Color8bit" | "Color24bit";
      PreferredRequired?: boolean;
      CacheControlHeaderSettings?: string;
      /** Format: int32 */
      MaxFileSizeBytes?: number;
      StorageEntityType?: components["schemas"]["Rock.Model.EntityType"];
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: int32 */
      CreatedByPersonAliasId?: number;
      /** Format: int32 */
      ModifiedByPersonAliasId?: number;
      ModifiedAuditValuesAlreadyUpdated?: boolean;
      Attributes?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeCache"];
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    /**
     * @example {
     *   "IsSystem": false,
     *   "Order": 0,
     *   "CampusSchedules": [],
     *   "CampusTopics": [],
     *   "ModifiedAuditValuesAlreadyUpdated": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "71c306c5-011c-45fd-aa33-793a208b809c"
     * }
     */
    "Rock.Model.Campus": {
      IsSystem: boolean;
      Name: string;
      Description?: string;
      IsActive?: boolean;
      ShortCode?: string;
      Url?: string;
      /** Format: int32 */
      LocationId?: number;
      PhoneNumber?: string;
      /** Format: int32 */
      LeaderPersonAliasId?: number;
      ServiceTimes?: string;
      /** Format: int32 */
      Order?: number;
      TimeZoneId?: string;
      /** Format: int32 */
      CampusStatusValueId?: number;
      /** Format: int32 */
      CampusTypeValueId?: number;
      /** Format: int32 */
      TeamGroupId?: number;
      Location?: components["schemas"]["Rock.Model.Location"];
      LeaderPersonAlias?: components["schemas"]["Rock.Model.PersonAlias"];
      CampusStatusValue?: components["schemas"]["Rock.Model.DefinedValue"];
      CampusTypeValue?: components["schemas"]["Rock.Model.DefinedValue"];
      TeamGroup?: components["schemas"]["Rock.Model.Group"];
      CampusSchedules?: components["schemas"]["Rock.Model.CampusSchedule"][];
      CampusTopics?: components["schemas"]["Rock.Model.CampusTopic"][];
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: int32 */
      CreatedByPersonAliasId?: number;
      /** Format: int32 */
      ModifiedByPersonAliasId?: number;
      ModifiedAuditValuesAlreadyUpdated?: boolean;
      Attributes?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeCache"];
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    /**
     * @example {
     *   "CampusId": 0,
     *   "ScheduleId": 0,
     *   "Order": 0,
     *   "ModifiedAuditValuesAlreadyUpdated": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "e2c93d30-334d-4524-81df-7b976b54d424"
     * }
     */
    "Rock.Model.CampusSchedule": {
      /** Format: int32 */
      CampusId?: number;
      /** Format: int32 */
      ScheduleId?: number;
      /** Format: int32 */
      ScheduleTypeValueId?: number;
      /** Format: int32 */
      Order: number;
      Schedule?: components["schemas"]["Rock.Model.Schedule"];
      ScheduleTypeValue?: components["schemas"]["Rock.Model.DefinedValue"];
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: int32 */
      CreatedByPersonAliasId?: number;
      /** Format: int32 */
      ModifiedByPersonAliasId?: number;
      ModifiedAuditValuesAlreadyUpdated?: boolean;
      Attributes?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeCache"];
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    /**
     * @example {
     *   "TopicTypeValueId": 0,
     *   "IsPublic": false,
     *   "ModifiedAuditValuesAlreadyUpdated": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "64bab788-6e7f-4660-9666-e8abd811fecc"
     * }
     */
    "Rock.Model.CampusTopic": {
      /** Format: int32 */
      TopicTypeValueId?: number;
      Email?: string;
      IsPublic?: boolean;
      Campus?: components["schemas"]["Rock.Model.Campus"];
      TopicTypeValue?: components["schemas"]["Rock.Model.DefinedValue"];
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: int32 */
      CreatedByPersonAliasId?: number;
      /** Format: int32 */
      ModifiedByPersonAliasId?: number;
      ModifiedAuditValuesAlreadyUpdated?: boolean;
      Attributes?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeCache"];
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    /**
     * @example {
     *   "IsSystem": false,
     *   "EntityTypeId": 0,
     *   "Order": 0,
     *   "ModifiedAuditValuesAlreadyUpdated": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "b2135d84-df9f-4225-b7be-28963e0e07f9"
     * }
     */
    "Rock.Model.Category": {
      IsSystem: boolean;
      /** Format: int32 */
      ParentCategoryId?: number;
      /** Format: int32 */
      EntityTypeId: number;
      EntityTypeQualifierColumn?: string;
      EntityTypeQualifierValue?: string;
      /** Format: int32 */
      Order: number;
      Name: string;
      Description?: string;
      IconCssClass?: string;
      HighlightColor?: string;
      ChildCategories?: components["schemas"]["Rock.Model.Category"][];
      EntityType?: components["schemas"]["Rock.Model.EntityType"];
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: int32 */
      CreatedByPersonAliasId?: number;
      /** Format: int32 */
      ModifiedByPersonAliasId?: number;
      ModifiedAuditValuesAlreadyUpdated?: boolean;
      Attributes?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeCache"];
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    /**
     * @example {
     *   "IsSystem": false,
     *   "IncludeDeceased": false,
     *   "DisableUseOfReadOnlyContext": false,
     *   "ModifiedAuditValuesAlreadyUpdated": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "e1fad0de-827d-459a-998b-d5b38af76925"
     * }
     */
    "Rock.Model.DataView": {
      IsSystem: boolean;
      Name: string;
      Description?: string;
      /** Format: int32 */
      CategoryId?: number;
      /** Format: int32 */
      EntityTypeId: number;
      /** Format: int32 */
      DataViewFilterId?: number;
      /** Format: int32 */
      TransformEntityTypeId?: number;
      /** Format: int32 */
      PersistedScheduleIntervalMinutes?: number;
      /** Format: date-time */
      PersistedLastRefreshDateTime?: string;
      IncludeDeceased?: boolean;
      /** Format: int32 */
      PersistedLastRunDurationMilliseconds?: number;
      /** Format: date-time */
      LastRunDateTime?: string;
      /** Format: int32 */
      RunCount?: number;
      /** Format: double */
      TimeToRunDurationMilliseconds?: number;
      /** Format: date-time */
      RunCountLastRefreshDateTime?: string;
      DisableUseOfReadOnlyContext?: boolean;
      Category?: components["schemas"]["Rock.Model.Category"];
      EntityType?: components["schemas"]["Rock.Model.EntityType"];
      DataViewFilter?: components["schemas"]["Rock.Model.DataViewFilter"];
      TransformEntityType?: components["schemas"]["Rock.Model.EntityType"];
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: int32 */
      CreatedByPersonAliasId?: number;
      /** Format: int32 */
      ModifiedByPersonAliasId?: number;
      ModifiedAuditValuesAlreadyUpdated?: boolean;
      Attributes?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeCache"];
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    /**
     * @example {
     *   "Expanded": false,
     *   "ExpressionType": 0,
     *   "ChildFilters": [],
     *   "ModifiedAuditValuesAlreadyUpdated": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "bca20698-f3aa-45e8-b1d7-2ffde11fae5e"
     * }
     */
    "Rock.Model.DataViewFilter": {
      Expanded?: boolean;
      /** @enum {string} */
      ExpressionType?: "Filter" | "GroupAll" | "GroupAny" | "GroupAllFalse" | "GroupAnyFalse";
      /** Format: int32 */
      ParentId?: number;
      /** Format: int32 */
      EntityTypeId?: number;
      Selection?: string;
      /** Format: int32 */
      DataViewId?: number;
      /** Format: int32 */
      RelatedDataViewId?: number;
      EntityType?: components["schemas"]["Rock.Model.EntityType"];
      ChildFilters?: components["schemas"]["Rock.Model.DataViewFilter"][];
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: int32 */
      CreatedByPersonAliasId?: number;
      /** Format: int32 */
      ModifiedByPersonAliasId?: number;
      ModifiedAuditValuesAlreadyUpdated?: boolean;
      Attributes?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeCache"];
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    /**
     * @example {
     *   "IsSystem": false,
     *   "DefinedTypeId": 0,
     *   "Order": 0,
     *   "IsActive": true,
     *   "ModifiedAuditValuesAlreadyUpdated": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "d99e9b0e-dc73-43fc-9fbe-b58edb547c55"
     * }
     */
    "Rock.Model.DefinedValue": {
      IsSystem: boolean;
      /** Format: int32 */
      DefinedTypeId: number;
      /** Format: int32 */
      Order: number;
      Value: string;
      Description?: string;
      IsActive: boolean;
      /** Format: int32 */
      CategoryId?: number;
      Category?: components["schemas"]["Rock.Model.Category"];
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: int32 */
      CreatedByPersonAliasId?: number;
      /** Format: int32 */
      ModifiedByPersonAliasId?: number;
      ModifiedAuditValuesAlreadyUpdated?: boolean;
      Attributes?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeCache"];
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    /**
     * @example {
     *   "DeviceTypeValueId": 0,
     *   "PrintFrom": 0,
     *   "PrintToOverride": 0,
     *   "IsActive": true,
     *   "HasCamera": false,
     *   "ModifiedAuditValuesAlreadyUpdated": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "9bb6b09a-c98c-40e2-9f6a-fc1b0bdc9cd1"
     * }
     */
    "Rock.Model.Device": {
      Name: string;
      Description?: string;
      /** Format: int32 */
      DeviceTypeValueId?: number;
      /** Format: int32 */
      LocationId?: number;
      IPAddress?: string;
      /** Format: int32 */
      PrinterDeviceId?: number;
      /** @enum {string} */
      PrintFrom?: "Client" | "Server";
      /** @enum {string} */
      PrintToOverride?: "Default" | "Kiosk" | "Location";
      IsActive?: boolean;
      HasCamera?: boolean;
      /** @enum {string} */
      CameraBarcodeConfigurationType?: "Off" | "Available" | "AlwaysOn" | "Passive";
      /** @enum {string} */
      KioskType?: "IPad" | "WindowsApp" | "Browser";
      DeviceType?: components["schemas"]["Rock.Model.DefinedValue"];
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: int32 */
      CreatedByPersonAliasId?: number;
      /** Format: int32 */
      ModifiedByPersonAliasId?: number;
      ModifiedAuditValuesAlreadyUpdated?: boolean;
      Attributes?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeCache"];
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    /**
     * @example {
     *   "IsSystem": false,
     *   "DocumentTypeId": 0,
     *   "EntityId": 0,
     *   "ModifiedAuditValuesAlreadyUpdated": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "dc5729cc-868d-44fe-8dcc-101337bcc7a7"
     * }
     */
    "Rock.Model.Document": {
      IsSystem: boolean;
      /** Format: int32 */
      DocumentTypeId: number;
      /** Format: int32 */
      EntityId: number;
      Name: string;
      Description?: string;
      DocumentType?: components["schemas"]["Rock.Model.DocumentType"];
      BinaryFile?: components["schemas"]["Rock.Model.BinaryFile"];
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: int32 */
      CreatedByPersonAliasId?: number;
      /** Format: int32 */
      ModifiedByPersonAliasId?: number;
      ModifiedAuditValuesAlreadyUpdated?: boolean;
      Attributes?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeCache"];
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    /**
     * @example {
     *   "IsSystem": false,
     *   "EntityTypeId": 0,
     *   "UserSelectable": false,
     *   "Order": 0,
     *   "BinaryFileTypeId": 0,
     *   "IsImage": false,
     *   "ModifiedAuditValuesAlreadyUpdated": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "1089cd83-5c1b-479d-ac40-a079967f0398"
     * }
     */
    "Rock.Model.DocumentType": {
      IsSystem: boolean;
      Name: string;
      /** Format: int32 */
      EntityTypeId: number;
      EntityTypeQualifierColumn?: string;
      EntityTypeQualifierValue?: string;
      UserSelectable?: boolean;
      IconCssClass?: string;
      /** Format: int32 */
      Order: number;
      /** Format: int32 */
      BinaryFileTypeId?: number;
      DefaultDocumentNameTemplate?: string;
      /** Format: int32 */
      MaxDocumentsPerEntity?: number;
      IsImage: boolean;
      EntityType?: components["schemas"]["Rock.Model.EntityType"];
      BinaryFileType?: components["schemas"]["Rock.Model.BinaryFileType"];
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: int32 */
      CreatedByPersonAliasId?: number;
      /** Format: int32 */
      ModifiedByPersonAliasId?: number;
      ModifiedAuditValuesAlreadyUpdated?: boolean;
      Attributes?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeCache"];
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    /**
     * @example {
     *   "IsEntity": false,
     *   "IsSecured": false,
     *   "IsCommon": false,
     *   "IsIndexingEnabled": false,
     *   "IsAchievementsEnabled": false,
     *   "IsMessageBusEventPublishEnabled": false,
     *   "AttributesSupportPrePostHtml": false,
     *   "AttributesSupportShowOnBulk": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "7509df3c-3ecf-42fe-bc07-dbcf41b789d5"
     * }
     */
    "Rock.Model.EntityType": {
      Name?: string;
      AssemblyName?: string;
      FriendlyName?: string;
      IsEntity?: boolean;
      IsSecured?: boolean;
      IsCommon?: boolean;
      /** Format: int32 */
      SingleValueFieldTypeId?: number;
      /** Format: int32 */
      MultiValueFieldTypeId?: number;
      IsIndexingEnabled?: boolean;
      IsAchievementsEnabled?: boolean;
      IsMessageBusEventPublishEnabled?: boolean;
      AttributesSupportPrePostHtml?: boolean;
      AttributesSupportShowOnBulk?: boolean;
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    /**
     * @example {
     *   "IsSystem": false,
     *   "ModifiedAuditValuesAlreadyUpdated": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "0e587341-300f-4513-b0a7-94742f66e75a"
     * }
     */
    "Rock.Model.FieldType": {
      IsSystem: boolean;
      Name: string;
      Description?: string;
      Assembly: string;
      Class: string;
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: int32 */
      CreatedByPersonAliasId?: number;
      /** Format: int32 */
      ModifiedByPersonAliasId?: number;
      ModifiedAuditValuesAlreadyUpdated?: boolean;
      Attributes?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeCache"];
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    /**
     * @example {
     *   "IsSystem": false,
     *   "GroupTypeId": 0,
     *   "IsSecurityRole": false,
     *   "ElevatedSecurityLevel": 0,
     *   "IsActive": true,
     *   "Order": 0,
     *   "IsPublic": true,
     *   "IsArchived": false,
     *   "SchedulingMustMeetRequirements": false,
     *   "AttendanceRecordRequiredForCheckIn": 0,
     *   "DisableScheduleToolboxAccess": false,
     *   "DisableScheduling": false,
     *   "Members": [],
     *   "GroupLocations": [],
     *   "GroupRequirements": [],
     *   "GroupSyncs": [],
     *   "ModifiedAuditValuesAlreadyUpdated": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "4b07555d-9db7-471b-aa64-19fb7329b813"
     * }
     */
    "Rock.Model.Group": {
      IsSystem: boolean;
      /** Format: int32 */
      ParentGroupId?: number;
      /** Format: int32 */
      GroupTypeId: number;
      /** Format: int32 */
      CampusId?: number;
      /** Format: int32 */
      ScheduleId?: number;
      Name: string;
      Description?: string;
      IsSecurityRole: boolean;
      /** @enum {string} */
      ElevatedSecurityLevel?: "None" | "High" | "Extreme";
      IsActive: boolean;
      /** Format: int32 */
      Order: number;
      AllowGuests?: boolean;
      IsPublic: boolean;
      /** Format: int32 */
      GroupCapacity?: number;
      /** Format: int32 */
      RequiredSignatureDocumentTemplateId?: number;
      /** Format: date-time */
      InactiveDateTime?: string;
      IsArchived?: boolean;
      /** Format: date-time */
      ArchivedDateTime?: string;
      /** Format: int32 */
      ArchivedByPersonAliasId?: number;
      /** Format: int32 */
      StatusValueId?: number;
      SchedulingMustMeetRequirements?: boolean;
      /** @enum {string} */
      AttendanceRecordRequiredForCheckIn?: "ScheduleNotRequired" | "PreSelect" | "ScheduleRequired";
      /** Format: int32 */
      ScheduleCancellationPersonAliasId?: number;
      /** Format: int32 */
      GroupAdministratorPersonAliasId?: number;
      /** Format: int32 */
      InactiveReasonValueId?: number;
      InactiveReasonNote?: string;
      /** Format: int32 */
      RSVPReminderSystemCommunicationId?: number;
      /** Format: int32 */
      RSVPReminderOffsetDays?: number;
      DisableScheduleToolboxAccess?: boolean;
      DisableScheduling?: boolean;
      GroupSalutation?: string;
      GroupSalutationFull?: string;
      ConfirmationAdditionalDetails?: string;
      /** Format: int32 */
      ReminderSystemCommunicationId?: number;
      /** Format: int32 */
      ReminderOffsetDays?: number;
      ReminderAdditionalDetails?: string;
      /** @enum {string} */
      ScheduleConfirmationLogic?: "Ask" | "AutoAccept";
      RSVPReminderSystemCommunication?: components["schemas"]["Rock.Model.SystemCommunication"];
      GroupType?: components["schemas"]["Rock.Model.GroupType"];
      Campus?: components["schemas"]["Rock.Model.Campus"];
      Schedule?: components["schemas"]["Rock.Model.Schedule"];
      RequiredSignatureDocumentTemplate?: components["schemas"]["Rock.Model.SignatureDocumentTemplate"];
      ArchivedByPersonAlias?: components["schemas"]["Rock.Model.PersonAlias"];
      GroupAdministratorPersonAlias?: components["schemas"]["Rock.Model.PersonAlias"];
      Members?: components["schemas"]["Rock.Model.GroupMember"][];
      GroupLocations?: components["schemas"]["Rock.Model.GroupLocation"][];
      GroupRequirements?: components["schemas"]["Rock.Model.GroupRequirement"][];
      GroupSyncs?: components["schemas"]["Rock.Model.GroupSync"][];
      StatusValue?: components["schemas"]["Rock.Model.DefinedValue"];
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: int32 */
      CreatedByPersonAliasId?: number;
      /** Format: int32 */
      ModifiedByPersonAliasId?: number;
      ModifiedAuditValuesAlreadyUpdated?: boolean;
      Attributes?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeCache"];
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    /**
     * @example {
     *   "GroupId": 0,
     *   "LocationId": 0,
     *   "IsMailingLocation": false,
     *   "IsMappedLocation": false,
     *   "Order": 0,
     *   "Schedules": [],
     *   "GroupLocationScheduleConfigs": [],
     *   "ModifiedAuditValuesAlreadyUpdated": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "19552423-4aa1-4305-98a1-08362612fed4"
     * }
     */
    "Rock.Model.GroupLocation": {
      /** Format: int32 */
      GroupId?: number;
      /** Format: int32 */
      LocationId?: number;
      /** Format: int32 */
      GroupLocationTypeValueId?: number;
      IsMailingLocation?: boolean;
      IsMappedLocation?: boolean;
      /** Format: int32 */
      GroupMemberPersonAliasId?: number;
      /** Format: int32 */
      Order: number;
      Location?: components["schemas"]["Rock.Model.Location"];
      GroupLocationTypeValue?: components["schemas"]["Rock.Model.DefinedValue"];
      Schedules?: components["schemas"]["Rock.Model.Schedule"][];
      GroupLocationScheduleConfigs?: components["schemas"]["Rock.Model.GroupLocationScheduleConfig"][];
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: int32 */
      CreatedByPersonAliasId?: number;
      /** Format: int32 */
      ModifiedByPersonAliasId?: number;
      ModifiedAuditValuesAlreadyUpdated?: boolean;
      Attributes?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeCache"];
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    "Rock.Model.GroupLocationScheduleConfig": {
      /** Format: int32 */
      GroupLocationId?: number;
      /** Format: int32 */
      ScheduleId?: number;
      /** Format: int32 */
      MinimumCapacity?: number;
      /** Format: int32 */
      DesiredCapacity?: number;
      /** Format: int32 */
      MaximumCapacity?: number;
      ConfirmationAdditionalDetails?: string;
      ConfigurationName?: string;
      ReminderAdditionalDetails?: string;
      GroupLocation?: components["schemas"]["Rock.Model.GroupLocation"];
      Schedule?: components["schemas"]["Rock.Model.Schedule"];
    };
    /**
     * @example {
     *   "IsSystem": false,
     *   "GroupId": 0,
     *   "GroupTypeId": 0,
     *   "PersonId": 0,
     *   "GroupRoleId": 0,
     *   "GroupMemberStatus": 1,
     *   "IsNotified": false,
     *   "IsArchived": false,
     *   "CommunicationPreference": 0,
     *   "GroupMemberRequirements": [],
     *   "GroupMemberAssignments": [],
     *   "ModifiedAuditValuesAlreadyUpdated": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "10fc2bf8-9039-4e9c-b800-815cbeadf599"
     * }
     */
    "Rock.Model.GroupMember": {
      IsSystem: boolean;
      /** Format: int32 */
      GroupId: number;
      /** Format: int32 */
      GroupTypeId: number;
      /** Format: int32 */
      PersonId: number;
      /** Format: int32 */
      GroupRoleId: number;
      Note?: string;
      /** @enum {string} */
      GroupMemberStatus: "Inactive" | "Active" | "Pending";
      /** Format: int32 */
      GuestCount?: number;
      /** Format: date-time */
      DateTimeAdded?: string;
      IsNotified?: boolean;
      /** Format: int32 */
      GroupOrder?: number;
      /** Format: date-time */
      InactiveDateTime?: string;
      IsArchived?: boolean;
      /** Format: date-time */
      ArchivedDateTime?: string;
      /** Format: int32 */
      ArchivedByPersonAliasId?: number;
      /** Format: int32 */
      ScheduleTemplateId?: number;
      /** Format: date-time */
      ScheduleStartDate?: string;
      /** Format: int32 */
      ScheduleReminderEmailOffsetDays?: number;
      /** @enum {string} */
      CommunicationPreference?: "RecipientPreference" | "Email" | "SMS" | "PushNotification";
      Person?: components["schemas"]["Rock.Model.Person"];
      GroupRole?: components["schemas"]["Rock.Model.GroupTypeRole"];
      ArchivedByPersonAlias?: components["schemas"]["Rock.Model.PersonAlias"];
      GroupMemberRequirements?: components["schemas"]["Rock.Model.GroupMemberRequirement"][];
      ScheduleTemplate?: components["schemas"]["Rock.Model.GroupMemberScheduleTemplate"];
      GroupMemberAssignments?: components["schemas"]["Rock.Model.GroupMemberAssignment"][];
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: int32 */
      CreatedByPersonAliasId?: number;
      /** Format: int32 */
      ModifiedByPersonAliasId?: number;
      ModifiedAuditValuesAlreadyUpdated?: boolean;
      Attributes?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeCache"];
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    /**
     * @example {
     *   "GroupMemberId": 0,
     *   "ModifiedAuditValuesAlreadyUpdated": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "afa3bb32-1b46-4442-aec9-a0773fac5617"
     * }
     */
    "Rock.Model.GroupMemberAssignment": {
      /** Format: int32 */
      GroupMemberId?: number;
      /** Format: int32 */
      LocationId?: number;
      /** Format: int32 */
      ScheduleId?: number;
      /** Format: date-time */
      ConfirmationSentDateTime?: string;
      Location?: components["schemas"]["Rock.Model.Location"];
      Schedule?: components["schemas"]["Rock.Model.Schedule"];
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: int32 */
      CreatedByPersonAliasId?: number;
      /** Format: int32 */
      ModifiedByPersonAliasId?: number;
      ModifiedAuditValuesAlreadyUpdated?: boolean;
      Attributes?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeCache"];
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    /**
     * @example {
     *   "GroupMemberId": 0,
     *   "GroupRequirementId": 0,
     *   "WasManuallyCompleted": false,
     *   "WasOverridden": false,
     *   "ModifiedAuditValuesAlreadyUpdated": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "e7fab89f-0e6d-4ae8-bc94-3c12f7411163"
     * }
     */
    "Rock.Model.GroupMemberRequirement": {
      /** Format: int32 */
      GroupMemberId: number;
      /** Format: int32 */
      GroupRequirementId: number;
      /** Format: date-time */
      RequirementMetDateTime?: string;
      /** Format: date-time */
      RequirementFailDateTime?: string;
      /** Format: date-time */
      RequirementWarningDateTime?: string;
      /** Format: date-time */
      LastRequirementCheckDateTime?: string;
      /** Format: int32 */
      DoesNotMeetWorkflowId?: number;
      /** Format: int32 */
      WarningWorkflowId?: number;
      WasManuallyCompleted?: boolean;
      /** Format: int32 */
      ManuallyCompletedByPersonAliasId?: number;
      /** Format: date-time */
      ManuallyCompletedDateTime?: string;
      WasOverridden?: boolean;
      /** Format: int32 */
      OverriddenByPersonAliasId?: number;
      /** Format: date-time */
      OverriddenDateTime?: string;
      /** Format: date-time */
      DueDate?: string;
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: int32 */
      CreatedByPersonAliasId?: number;
      /** Format: int32 */
      ModifiedByPersonAliasId?: number;
      ModifiedAuditValuesAlreadyUpdated?: boolean;
      Attributes?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeCache"];
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    /**
     * @example {
     *   "ScheduleId": 0,
     *   "ModifiedAuditValuesAlreadyUpdated": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "b3231bad-0242-4108-9e9c-8863ed4669ae"
     * }
     */
    "Rock.Model.GroupMemberScheduleTemplate": {
      Name: string;
      /** Format: int32 */
      GroupTypeId?: number;
      /** Format: int32 */
      ScheduleId?: number;
      GroupType?: components["schemas"]["Rock.Model.GroupType"];
      Schedule?: components["schemas"]["Rock.Model.Schedule"];
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: int32 */
      CreatedByPersonAliasId?: number;
      /** Format: int32 */
      ModifiedByPersonAliasId?: number;
      ModifiedAuditValuesAlreadyUpdated?: boolean;
      Attributes?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeCache"];
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    /**
     * @example {
     *   "GroupRequirementTypeId": 0,
     *   "MustMeetRequirementToAddMember": false,
     *   "AppliesToAgeClassification": 0,
     *   "AllowLeadersToOverride": false,
     *   "ModifiedAuditValuesAlreadyUpdated": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "e9a1e810-b7a7-482b-b62f-e39c179d8cc5"
     * }
     */
    "Rock.Model.GroupRequirement": {
      /** Format: int32 */
      GroupId?: number;
      /** Format: int32 */
      GroupTypeId?: number;
      /** Format: int32 */
      GroupRequirementTypeId: number;
      /** Format: int32 */
      GroupRoleId?: number;
      MustMeetRequirementToAddMember?: boolean;
      /** @enum {string} */
      AppliesToAgeClassification?: "All" | "Adults" | "Children";
      /** Format: int32 */
      AppliesToDataViewId?: number;
      AllowLeadersToOverride?: boolean;
      /** Format: int32 */
      DueDateAttributeId?: number;
      /** Format: date-time */
      DueDateStaticDate?: string;
      GroupRequirementType?: components["schemas"]["Rock.Model.GroupRequirementType"];
      DueDateAttribute?: components["schemas"]["Rock.Model.Attribute"];
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: int32 */
      CreatedByPersonAliasId?: number;
      /** Format: int32 */
      ModifiedByPersonAliasId?: number;
      ModifiedAuditValuesAlreadyUpdated?: boolean;
      Attributes?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeCache"];
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    /**
     * @example {
     *   "CanExpire": false,
     *   "RequirementCheckType": 0,
     *   "DueDateType": 0,
     *   "ShouldAutoInitiateDoesNotMeetWorkflow": false,
     *   "ShouldAutoInitiateWarningWorkflow": false,
     *   "ModifiedAuditValuesAlreadyUpdated": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "de287ab7-68db-41fe-8908-1a8f992d15f4"
     * }
     */
    "Rock.Model.GroupRequirementType": {
      Name: string;
      Description?: string;
      CanExpire: boolean;
      /** Format: int32 */
      ExpireInDays?: number;
      /** @enum {string} */
      RequirementCheckType?: "Sql" | "Dataview" | "Manual";
      SqlExpression?: string;
      /** Format: int32 */
      DataViewId?: number;
      WarningSqlExpression?: string;
      /** Format: int32 */
      WarningDataViewId?: number;
      PositiveLabel?: string;
      NegativeLabel?: string;
      WarningLabel?: string;
      CheckboxLabel?: string;
      IconCssClass?: string;
      /** @enum {string} */
      DueDateType?: "Immediate" | "ConfiguredDate" | "GroupAttribute" | "DaysAfterJoining";
      /** Format: int32 */
      DueDateOffsetInDays?: number;
      /** Format: int32 */
      CategoryId?: number;
      /** Format: int32 */
      DoesNotMeetWorkflowTypeId?: number;
      ShouldAutoInitiateDoesNotMeetWorkflow?: boolean;
      DoesNotMeetWorkflowLinkText?: string;
      /** Format: int32 */
      WarningWorkflowTypeId?: number;
      ShouldAutoInitiateWarningWorkflow?: boolean;
      WarningWorkflowLinkText?: string;
      Summary?: string;
      Category?: components["schemas"]["Rock.Model.Category"];
      DoesNotMeetWorkflowType?: components["schemas"]["Rock.Model.WorkflowType"];
      WarningWorkflowType?: components["schemas"]["Rock.Model.WorkflowType"];
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: int32 */
      CreatedByPersonAliasId?: number;
      /** Format: int32 */
      ModifiedByPersonAliasId?: number;
      ModifiedAuditValuesAlreadyUpdated?: boolean;
      Attributes?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeCache"];
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    /**
     * @example {
     *   "GroupId": 0,
     *   "GroupTypeRoleId": 0,
     *   "SyncDataViewId": 0,
     *   "AddUserAccountsDuringSync": false,
     *   "ModifiedAuditValuesAlreadyUpdated": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "34d0b080-5510-4bd8-8559-06b45a2ba707"
     * }
     */
    "Rock.Model.GroupSync": {
      /** Format: int32 */
      GroupId: number;
      /** Format: int32 */
      GroupTypeRoleId: number;
      /** Format: int32 */
      SyncDataViewId: number;
      /** Format: int32 */
      WelcomeSystemCommunicationId?: number;
      /** Format: int32 */
      ExitSystemCommunicationId?: number;
      AddUserAccountsDuringSync?: boolean;
      /** Format: int32 */
      ScheduleIntervalMinutes?: number;
      /** Format: date-time */
      LastRefreshDateTime?: string;
      Group?: components["schemas"]["Rock.Model.Group"];
      GroupTypeRole?: components["schemas"]["Rock.Model.GroupTypeRole"];
      SyncDataView?: components["schemas"]["Rock.Model.DataView"];
      WelcomeSystemCommunication?: components["schemas"]["Rock.Model.SystemCommunication"];
      ExitSystemCommunication?: components["schemas"]["Rock.Model.SystemCommunication"];
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: int32 */
      CreatedByPersonAliasId?: number;
      /** Format: int32 */
      ModifiedByPersonAliasId?: number;
      ModifiedAuditValuesAlreadyUpdated?: boolean;
      Attributes?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeCache"];
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    /**
     * @example {
     *   "IsSystem": false,
     *   "GroupTerm": "Group",
     *   "GroupMemberTerm": "Member",
     *   "AllowMultipleLocations": false,
     *   "ShowInGroupList": true,
     *   "ShowInNavigation": true,
     *   "TakesAttendance": false,
     *   "AttendanceCountsAsWeekendService": false,
     *   "SendAttendanceReminder": false,
     *   "ShowConnectionStatus": false,
     *   "ShowMaritalStatus": false,
     *   "AttendanceRule": 0,
     *   "GroupCapacityRule": 0,
     *   "AttendancePrintTo": 0,
     *   "Order": 0,
     *   "AllowedScheduleTypes": 0,
     *   "LocationSelectionMode": 0,
     *   "IgnorePersonInactivated": false,
     *   "IsIndexEnabled": false,
     *   "GroupsRequireCampus": false,
     *   "GroupAttendanceRequiresLocation": false,
     *   "GroupAttendanceRequiresSchedule": false,
     *   "GroupViewLavaTemplate": "{% if Group.GroupType.GroupCapacityRule != 'None' and Group.GroupCapacity != '' %}\r\n\t\t{% assign warningLevel = 'warning' %}\r\n\r\n\t\t{% if Group.GroupType.GroupCapacityRule == 'Hard' %}\r\n\t\t\t{% assign warningLevel = 'danger' %}\r\n\t\t{% endif %}\r\n\r\n\t\t{% assign activeMemberCount = countActive | Plus:1 %} {% comment %}the counter is zero based{% endcomment %}\r\n\t\t{% assign overageAmount = activeMemberCount | Minus:Group.GroupCapacity %}\r\n\r\n\t\t{% if overageAmount > 0 %}\r\n\t\t\t<div class=\"alert alert-{{ warningLevel }} margin-t-sm\">This group is over capacity by {{ overageAmount }} {{ 'individual' | PluralizeForQuantity:overageAmount }}.</div>\r\n\t\t{% endif %}\r\n\t{% endif %}\r\n\r\n\r\n\r\n{% if Group.Description != '' -%}\r\n    <p class='description'>{{ Group.Description }}</p>\r\n{% endif -%}\r\n\r\n<div class=\"row\">\r\n   <div class=\"col-md-6\">\r\n        <dl>\r\n            {% if Group.ParentGroup != null %}\r\n            <dt> Parent Group </ dt>\r\n               <dd>{{ Group.ParentGroup.Name }}</dd>\r\n            {% endif %}\r\n            {% if Group.RequiredSignatureDocumentTemplate != null %}\r\n            <dt> Required Signed Document </dt>\r\n               <dd>{{ Group.RequiredSignatureDocumentTemplate.Name }}</ dd >\r\n            {% endif %}\r\n            {% if Group.Schedule != null %}\r\n\r\n            <dt> Schedule </dt>\r\n            <dd>{{ Group.Schedule.FriendlyScheduleText }}</ dd >\r\n            {% endif %}\r\n            {% if Group.GroupCapacity != null and Group.GroupCapacity != '' %}\r\n\r\n            <dt> Capacity </dt>\r\n\r\n            <dd>{{ Group.GroupCapacity }}</dd>\r\n            {% endif %}\r\n        {% if Group.GroupType.ShowAdministrator and Group.GroupAdministratorPersonAlias != null and Group.GroupAdministratorPersonAlias != '' %}\r\n            <dt> {{ Group.GroupType.AdministratorTerm }}</dt>\r\n            <dd>{{ Group.GroupAdministratorPersonAlias.Person.FullName }}</dd>\r\n            {% endif %}\r\n        </dl>\r\n        <dl>\r\n        {% for attribute in Group.AttributeValues %}\r\n            {% if attribute.ValueFormatted != '' %}\r\n                <dt>{{ attribute.AttributeName }}</dt>\r\n                <dd>{{ attribute.ValueFormatted }}</dd>\r\n            {% endif %}\r\n        {% endfor %}\r\n        </dl>\r\n    </div>\r\n\r\n    <div class=\"col-md-6 location-maps\">\r\n\t{% assign googleAPIKey = 'Global' | Attribute: 'GoogleAPIKey' %}\r\n\t{% assign staticMapStyle = MapStyle | Attribute: 'StaticMapStyle' %}\r\n\r\n\t{% if Group.GroupLocations != null %}\r\n\t{% assign groupLocations = Group.GroupLocations %}\r\n\t{% assign locationCount = groupLocations | Size %}\r\n\t    {% if locationCount > 0 and googleAPIKey != null and googleAPIKey !='' and staticMapStyle != null and staticMapStyle != '' %}\r\n\t\t{% for groupLocation in groupLocations %}\r\n\t    \t{% if groupLocation.Location.GeoPoint != null and groupLocation.Location.GeoPoint != '' %}\r\n\t    \t{% capture markerPoints %}{{ groupLocation.Location.Latitude }},{{ groupLocation.Location.Longitude }}{% endcapture %}\r\n\t    \t{% assign mapLink = staticMapStyle | Replace:'{MarkerPoints}', markerPoints %}\r\n\t    \t{% assign mapLink = mapLink | Replace:'{PolygonPoints}','' %}\r\n\t    \t{% assign mapLink = mapLink | Append:'&sensor=false&size=450x250&zoom=13&format=png&key=' %}\r\n            {% assign mapLink = mapLink | Append: googleAPIKey %}\r\n\t    \t<div class=\"group-location-map\">\r\n\t    \t    {% if groupLocation.GroupLocationTypeValue != null %}\r\n\t    \t    <h4> {{ groupLocation.GroupLocationTypeValue.Value }} </h4>\r\n\t    \t    {% endif %}\r\n\t    \t    <a href = '{{ GroupMapUrl }}'>\r\n\t    \t    <img class='img-thumbnail' src='{{ mapLink }}'/>\r\n\t    \t    </a>\r\n\t    \t    {% if groupLocation.Location.FormattedAddress != null and groupLocation.Location.FormattedAddress != '' and ShowLocationAddresses == true %}\r\n\t    \t    {{ groupLocation.Location.FormattedAddress }}\r\n\t    \t    {% endif %}\r\n\t    \t </div>\r\n\t\t    {% endif %}\r\n\t\t    {% if groupLocation.Location.GeoFence != null and groupLocation.Location.GeoFence != '' %}\r\n\r\n\t\t    {% assign mapLink = staticMapStyle | Replace:'{MarkerPoints}','' %}\r\n\t\t    {% assign googlePolygon = 'enc:' | Append: groupLocation.Location.GooglePolygon %}\r\n\t    \t{% assign mapLink = mapLink | Replace:'{PolygonPoints}', googlePolygon %}\r\n\t    \t{% assign mapLink = mapLink | Append:'&sensor=false&size=350x200&format=png&key=' %}\r\n\t    \t{% assign mapLink = mapLink | Append: googleAPIKey %}\r\n\t\t    <div class='group-location-map'>\r\n\t\t        {% if groupLocation.GroupLocationTypeValue != null %}\r\n\t\t        <h4> {{ groupLocation.GroupLocationTypeValue.Value }} </h4>\r\n\t\t        {% endif %}\r\n\t\t    <a href = '{{ GroupMapUrl }}'><img class='img-thumbnail' src='{{ mapLink }}'/></a>\r\n\t\t    </div>\r\n\t\t    {% endif %}\r\n\t\t{% endfor %}\r\n\t\t{% endif %}\r\n\t{% endif %}\r\n\t{% if Group.Linkages != null %}\r\n\t{% assign linkages = Group.Linkages %}\r\n\t{% assign linkageCount = linkages | Size %}\r\n\t{% if linkageCount > 0 %}\r\n\t{% assign countRegistration = 0 %}\r\n\t{% assign countLoop = 0 %}\r\n\t{% assign countEventItemOccurrences = 0 %}\r\n\t{% assign countContentItems = 0 %}\r\n\t{% for linkage in linkages %}\r\n\t\t{% if linkage.RegistrationInstanceId != null and linkage.RegistrationInstanceId != '' %}\r\n\t\t\t{% if countRegistration == 0 %}\r\n\t\t\t<strong> Registrations</strong>\r\n\t\t\t<ul class=\"list-unstyled\">\r\n\t\t\t{% endif %}\r\n\t\t\t<li><a href = '{{ RegistrationInstancePage }}?RegistrationInstanceId={{ linkage.RegistrationInstanceId }}'>{% if linkage.EventItemOccurrence != null %} {{ linkage.EventItemOccurrence.EventItem.Name }} ({% if linkage.EventItemOccurrence.Campus != null %} {{ linkage.EventItemOccurrence.Campus.Name }}  {% else %}  All Campuses {% endif %}) {% endif %} - {{ linkage.RegistrationInstance.Name }}</a></li>\r\n\t\t\t{% assign countRegistration = countRegistration | Plus: 1 %}\r\n\t\t{% endif %}\r\n\t\t{% assign countLoop = countLoop | Plus: 1 %}\r\n\t\t{% if countRegistration > 0 and countLoop == linkageCount %}\r\n\t\t</ul>\r\n\t\t{% endif %}\r\n\t{% endfor %}\r\n\t{% assign countLoop = 0 %}\r\n\t{% for linkage in linkages %}\r\n\t\t{% if linkage.EventItemOccurrence != null and linkage.EventItemOccurrence.EventItem != null %}\r\n\t\t\t{% if countEventItemOccurrences == 0 %}\r\n\t\t\t<strong> Event Item Occurrences</strong>\r\n\t\t\t<ul class=\"list-unstyled\">\r\n\t\t\t{% endif %}\r\n\t\t\t<li><a href = '{{ EventItemOccurrencePage }}?EventItemOccurrenceId={{ linkage.EventItemOccurrence.Id }}'>{% if linkage.EventItemOccurrence != null %} {{ linkage.EventItemOccurrence.EventItem.Name }} -{% if linkage.EventItemOccurrence.Campus != null %} {{ linkage.EventItemOccurrence.Campus.Name }}  {% else %}  All Campuses {% endif %} {% endif %}</a></li>\r\n\t\t\t{% assign countEventItemOccurrences = countEventItemOccurrences | Plus: 1 %}\r\n\t\t{% endif %}\r\n\t\t{% assign countLoop = countLoop | Plus: 1 %}\r\n\t\t{% if countEventItemOccurrences > 0 and countLoop == linkageCount %}\r\n\t\t\t</ul>\r\n\t\t{% endif %}\r\n\t{% endfor %}\r\n\t{% assign countLoop = 0 %}\r\n\t{% for linkage in linkages %}\r\n\t\t{% if linkage.EventItemOccurrence != null and linkage.EventItemOccurrence.EventItem != null %}\r\n\t\t\t{% assign contentChannelItemsCount = linkage.EventItemOccurrence.ContentChannelItems | Size %}\r\n\t\t\t{% if contentChannelItemsCount > 0 %}\r\n\t\t\t{% assign contentChannelItems = linkage.EventItemOccurrence.ContentChannelItems %}\r\n\t\t\t\t{% for contentChannelItem in contentChannelItems %}\r\n\t\t\t\t{% if contentChannelItem.ContentChannelItem != null %}\r\n\t\t\t\t\t{% if countContentItems == 0 %}\r\n\t\t\t\t\t<strong> Content Items</strong>\r\n\t\t\t\t\t<ul class=\"list-unstyled\">\r\n\t\t\t\t\t{% endif %}\r\n\t\t\t\t\t<li><a href = '{{ ContentItemPage }}?ContentItemId={{ contentChannelItem.ContentChannelItemId }}'>{{ contentChannelItem.ContentChannelItem.Title }} <small>({{ contentChannelItem.ContentChannelItem.ContentChannelType.Name }})</small></a></li>\r\n\t\t\t\t\t{% assign countContentItems = countContentItems | Plus: 1 %}\r\n\t\t\t\t{% endif %}\r\n\t\t\t\t{% endfor %}\r\n\t\t\t{% endif %}\r\n    \t{% endif %}\r\n    \t{% assign countLoop = countLoop | Plus: 1 %}\r\n    \t{% if countContentItems > 0 and countLoop == linkageCount %}\r\n\t\t\t</ul>\r\n\t\t{% endif %}\r\n\t{% endfor %}\r\n\t{% endif %}\r\n{% endif %}\r\n\t</div>\r\n</div>",
     *   "AllowSpecificGroupMemberAttributes": false,
     *   "EnableSpecificGroupRequirements": false,
     *   "AllowGroupSync": false,
     *   "AllowSpecificGroupMemberWorkflows": false,
     *   "EnableGroupHistory": false,
     *   "EnableGroupTag": false,
     *   "EnableRSVP": false,
     *   "EnableInactiveReason": false,
     *   "RequiresInactiveReason": false,
     *   "AllowAnyChildGroupType": false,
     *   "IsCapacityRequired": false,
     *   "ScheduleConfirmationLogic": 0,
     *   "IsSchedulingEnabled": false,
     *   "ScheduleConfirmationEmailOffsetDays": 4,
     *   "ScheduleReminderEmailOffsetDays": 2,
     *   "RequiresReasonIfDeclineSchedule": false,
     *   "AdministratorTerm": "Administrator",
     *   "ShowAdministrator": false,
     *   "ChildGroupTypes": [],
     *   "Roles": [],
     *   "LocationTypes": [],
     *   "GroupRequirements": [],
     *   "ModifiedAuditValuesAlreadyUpdated": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "9a0f6b21-d0d5-4226-a222-746d48034811"
     * }
     */
    "Rock.Model.GroupType": {
      IsSystem: boolean;
      Name: string;
      Description?: string;
      GroupTerm: string;
      GroupMemberTerm: string;
      /** Format: int32 */
      DefaultGroupRoleId?: number;
      AllowMultipleLocations?: boolean;
      ShowInGroupList?: boolean;
      ShowInNavigation?: boolean;
      IconCssClass?: string;
      TakesAttendance?: boolean;
      AttendanceCountsAsWeekendService?: boolean;
      SendAttendanceReminder?: boolean;
      ShowConnectionStatus?: boolean;
      ShowMaritalStatus?: boolean;
      /** @enum {string} */
      AttendanceRule?: "None" | "AddOnCheckIn" | "AlreadyBelongs";
      /** @enum {string} */
      GroupCapacityRule?: "None" | "Hard" | "Soft";
      /** @enum {string} */
      AttendancePrintTo?: "Default" | "Kiosk" | "Location";
      /** Format: int32 */
      Order: number;
      /** Format: int32 */
      InheritedGroupTypeId?: number;
      /** @enum {string} */
      AllowedScheduleTypes?: "None" | "Weekly" | "Custom" | "Named";
      /** @enum {string} */
      LocationSelectionMode?: "None" | "Address" | "Named" | "Point" | "Polygon" | "GroupMember" | "All";
      EnableLocationSchedules?: boolean;
      /** Format: int32 */
      GroupTypePurposeValueId?: number;
      IgnorePersonInactivated?: boolean;
      IsIndexEnabled?: boolean;
      GroupsRequireCampus?: boolean;
      GroupAttendanceRequiresLocation?: boolean;
      GroupAttendanceRequiresSchedule?: boolean;
      GroupViewLavaTemplate?: string;
      AllowSpecificGroupMemberAttributes?: boolean;
      EnableSpecificGroupRequirements?: boolean;
      AllowGroupSync?: boolean;
      AllowSpecificGroupMemberWorkflows?: boolean;
      EnableGroupHistory?: boolean;
      EnableGroupTag?: boolean;
      GroupTypeColor?: string;
      /** Format: int32 */
      GroupStatusDefinedTypeId?: number;
      EnableRSVP?: boolean;
      EnableInactiveReason?: boolean;
      RequiresInactiveReason?: boolean;
      AllowAnyChildGroupType?: boolean;
      IsCapacityRequired: boolean;
      /** @enum {string} */
      ScheduleConfirmationLogic?: "Ask" | "AutoAccept";
      IsSchedulingEnabled?: boolean;
      /** Format: int32 */
      ScheduleConfirmationSystemCommunicationId?: number;
      /** Format: int32 */
      ScheduleReminderSystemCommunicationId?: number;
      /** Format: int32 */
      RSVPReminderSystemCommunicationId?: number;
      /** Format: int32 */
      RSVPReminderOffsetDays?: number;
      /** Format: int32 */
      ScheduleCancellationWorkflowTypeId?: number;
      /** Format: int32 */
      ScheduleConfirmationEmailOffsetDays?: number;
      /** Format: int32 */
      ScheduleReminderEmailOffsetDays?: number;
      RequiresReasonIfDeclineSchedule?: boolean;
      AdministratorTerm?: string;
      ShowAdministrator: boolean;
      ChildGroupTypes?: components["schemas"]["Rock.Model.GroupType"][];
      Roles?: components["schemas"]["Rock.Model.GroupTypeRole"][];
      LocationTypes?: components["schemas"]["Rock.Model.GroupTypeLocationType"][];
      DefaultGroupRole?: components["schemas"]["Rock.Model.GroupTypeRole"];
      GroupTypePurposeValue?: components["schemas"]["Rock.Model.DefinedValue"];
      ScheduleConfirmationSystemCommunication?: components["schemas"]["Rock.Model.SystemCommunication"];
      ScheduleReminderSystemCommunication?: components["schemas"]["Rock.Model.SystemCommunication"];
      ScheduleCancellationWorkflowType?: components["schemas"]["Rock.Model.WorkflowType"];
      GroupRequirements?: components["schemas"]["Rock.Model.GroupRequirement"][];
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: int32 */
      CreatedByPersonAliasId?: number;
      /** Format: int32 */
      ModifiedByPersonAliasId?: number;
      ModifiedAuditValuesAlreadyUpdated?: boolean;
      Attributes?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeCache"];
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    "Rock.Model.GroupTypeLocationType": {
      /** Format: int32 */
      GroupTypeId?: number;
      /** Format: int32 */
      LocationTypeValueId?: number;
      GroupType?: components["schemas"]["Rock.Model.GroupType"];
      LocationTypeValue?: components["schemas"]["Rock.Model.DefinedValue"];
    };
    /**
     * @example {
     *   "IsSystem": false,
     *   "Order": 0,
     *   "IsLeader": false,
     *   "ReceiveRequirementsNotifications": false,
     *   "CanView": false,
     *   "CanEdit": false,
     *   "CanManageMembers": false,
     *   "ModifiedAuditValuesAlreadyUpdated": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "02f27621-ed27-49c0-a9cb-44dc58ef0265"
     * }
     */
    "Rock.Model.GroupTypeRole": {
      IsSystem: boolean;
      /** Format: int32 */
      GroupTypeId?: number;
      Name: string;
      Description?: string;
      /** Format: int32 */
      Order?: number;
      /** Format: int32 */
      MaxCount?: number;
      /** Format: int32 */
      MinCount?: number;
      IsLeader?: boolean;
      ReceiveRequirementsNotifications?: boolean;
      CanView?: boolean;
      CanEdit?: boolean;
      CanManageMembers?: boolean;
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: int32 */
      CreatedByPersonAliasId?: number;
      /** Format: int32 */
      ModifiedByPersonAliasId?: number;
      ModifiedAuditValuesAlreadyUpdated?: boolean;
      Attributes?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeCache"];
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    /**
     * @example {
     *   "IsNamedLocation": false,
     *   "IsActive": true,
     *   "ChildLocations": [],
     *   "Distance": 0,
     *   "ModifiedAuditValuesAlreadyUpdated": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "afcd0410-5974-491b-a2c1-26ccd792e83b"
     * }
     */
    "Rock.Model.Location": {
      IsNamedLocation?: boolean;
      GeoFenceCoordinates?: readonly number[][];
      /** Format: double */
      Latitude?: number;
      /** Format: double */
      Longitude?: number;
      /** Format: int32 */
      ParentLocationId?: number;
      Name?: string;
      IsActive?: boolean;
      /** Format: int32 */
      LocationTypeValueId?: number;
      GeoPoint?: components["schemas"]["System.Data.Entity.Spatial.DbGeography"];
      GeoFence?: components["schemas"]["System.Data.Entity.Spatial.DbGeography"];
      Street1?: string;
      Street2?: string;
      City?: string;
      County?: string;
      State?: string;
      Country?: string;
      PostalCode?: string;
      Barcode?: string;
      AssessorParcelId?: string;
      /** Format: date-time */
      StandardizeAttemptedDateTime?: string;
      StandardizeAttemptedServiceType?: string;
      StandardizeAttemptedResult?: string;
      /** Format: date-time */
      StandardizedDateTime?: string;
      /** Format: date-time */
      GeocodeAttemptedDateTime?: string;
      GeocodeAttemptedServiceType?: string;
      GeocodeAttemptedResult?: string;
      /** Format: date-time */
      GeocodedDateTime?: string;
      IsGeoPointLocked?: boolean;
      /** Format: int32 */
      PrinterDeviceId?: number;
      /** Format: int32 */
      ImageId?: number;
      /** Format: int32 */
      SoftRoomThreshold?: number;
      /** Format: int32 */
      FirmRoomThreshold?: number;
      LocationTypeValue?: components["schemas"]["Rock.Model.DefinedValue"];
      ChildLocations?: components["schemas"]["Rock.Model.Location"][];
      PrinterDevice?: components["schemas"]["Rock.Model.Device"];
      Image?: components["schemas"]["Rock.Model.BinaryFile"];
      /** Format: double */
      Distance?: number;
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: int32 */
      CreatedByPersonAliasId?: number;
      /** Format: int32 */
      ModifiedByPersonAliasId?: number;
      ModifiedAuditValuesAlreadyUpdated?: boolean;
      Attributes?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeCache"];
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    "Rock.Model.MapCoordinate": {
      /** Format: double */
      Latitude?: number;
      /** Format: double */
      Longitude?: number;
    };
    "Rock.Model.MapItem": {
      /** Format: int32 */
      EntityTypeId?: number;
      /** Format: int32 */
      EntityId?: number;
      /** Format: int32 */
      LocationId?: number;
      Name?: string;
      Point?: components["schemas"]["Rock.Model.MapCoordinate"];
      PolygonPoints?: components["schemas"]["Rock.Model.MapCoordinate"][];
    };
    /**
     * @example {
     *   "IsSystem": false,
     *   "IsDeceased": false,
     *   "Gender": 0,
     *   "GivingLeaderId": 0,
     *   "IsEmailActive": true,
     *   "EmailPreference": 0,
     *   "CommunicationPreference": 1,
     *   "AgeClassification": 0,
     *   "IsLockedAsChild": false,
     *   "AccountProtectionProfile": 0,
     *   "Users": [],
     *   "PhoneNumbers": [],
     *   "FullName": " ",
     *   "BirthdayDayOfWeek": "",
     *   "BirthdayDayOfWeekShort": "",
     *   "DaysToBirthday": 2147483647,
     *   "DaysToAnniversary": 2147483647,
     *   "GradeFormatted": "",
     *   "ModifiedAuditValuesAlreadyUpdated": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "22bfb47e-7f27-48a3-9976-5e2e44185807"
     * }
     */
    "Rock.Model.Person": {
      IsSystem: boolean;
      /** Format: int32 */
      RecordTypeValueId?: number;
      /** Format: int32 */
      RecordStatusValueId?: number;
      /** Format: date-time */
      RecordStatusLastModifiedDateTime?: string;
      /** Format: int32 */
      RecordStatusReasonValueId?: number;
      /** Format: int32 */
      ConnectionStatusValueId?: number;
      /** Format: int32 */
      ReviewReasonValueId?: number;
      IsDeceased?: boolean;
      /** Format: int32 */
      TitleValueId?: number;
      FirstName?: string;
      NickName?: string;
      MiddleName?: string;
      LastName?: string;
      /** Format: int32 */
      SuffixValueId?: number;
      /** Format: int32 */
      PhotoId?: number;
      /** Format: int32 */
      BirthDay?: number;
      /** Format: int32 */
      BirthMonth?: number;
      /** Format: int32 */
      BirthYear?: number;
      /** @enum {string} */
      Gender: "Unknown" | "Male" | "Female";
      /** Format: int32 */
      MaritalStatusValueId?: number;
      /** Format: date-time */
      AnniversaryDate?: string;
      /** Format: int32 */
      GraduationYear?: number;
      GivingId?: string;
      /** Format: int32 */
      GivingLeaderId?: number;
      Email?: string;
      IsEmailActive?: boolean;
      EmailNote?: string;
      /** @enum {string} */
      EmailPreference?: "EmailAllowed" | "NoMassEmails" | "DoNotEmail";
      /** @enum {string} */
      CommunicationPreference?: "RecipientPreference" | "Email" | "SMS" | "PushNotification";
      ReviewReasonNote?: string;
      InactiveReasonNote?: string;
      SystemNote?: string;
      /** Format: int32 */
      ViewedCount?: number;
      TopSignalColor?: string;
      TopSignalIconCssClass?: string;
      /** Format: int32 */
      TopSignalId?: number;
      /** @enum {string} */
      AgeClassification?: "Unknown" | "Adult" | "Child";
      /** Format: int32 */
      PrimaryFamilyId?: number;
      /** Format: int32 */
      PrimaryCampusId?: number;
      IsLockedAsChild?: boolean;
      /** Format: date-time */
      DeceasedDate?: string;
      /** Format: int32 */
      ContributionFinancialAccountId?: number;
      /** @enum {string} */
      AccountProtectionProfile?: "Low" | "Medium" | "High" | "Extreme";
      /** Format: int32 */
      PreferredLanguageValueId?: number;
      /** Format: int32 */
      ReminderCount?: number;
      /** Format: int32 */
      RaceValueId?: number;
      /** Format: int32 */
      EthnicityValueId?: number;
      Users?: components["schemas"]["Rock.Model.UserLogin"][];
      PhoneNumbers?: components["schemas"]["Rock.Model.PhoneNumber"][];
      MaritalStatusValue?: components["schemas"]["Rock.Model.DefinedValue"];
      ConnectionStatusValue?: components["schemas"]["Rock.Model.DefinedValue"];
      ReviewReasonValue?: components["schemas"]["Rock.Model.DefinedValue"];
      RecordStatusValue?: components["schemas"]["Rock.Model.DefinedValue"];
      RecordStatusReasonValue?: components["schemas"]["Rock.Model.DefinedValue"];
      RecordTypeValue?: components["schemas"]["Rock.Model.DefinedValue"];
      SuffixValue?: components["schemas"]["Rock.Model.DefinedValue"];
      TitleValue?: components["schemas"]["Rock.Model.DefinedValue"];
      Photo?: components["schemas"]["Rock.Model.BinaryFile"];
      PreferredLanguageValue?: components["schemas"]["Rock.Model.DefinedValue"];
      /** Format: int32 */
      DaysUntilBirthday?: number;
      RaceValue?: components["schemas"]["Rock.Model.DefinedValue"];
      EthnicityValue?: components["schemas"]["Rock.Model.DefinedValue"];
      /** Format: int32 */
      GivingGroupId?: number;
      /** Format: int32 */
      PrimaryAliasId?: number;
      FullName?: string;
      BirthdayDayOfWeek?: string;
      BirthdayDayOfWeekShort?: string;
      /** Format: date-time */
      BirthDate?: string;
      /** Format: int32 */
      Age?: number;
      /** Format: date-time */
      NextBirthDay?: string;
      /** Format: int32 */
      DaysToBirthday?: number;
      /** Format: int32 */
      DaysToAnniversary?: number;
      /** Format: date-time */
      NextAnniversary?: string;
      /** Format: int32 */
      DaysUntilAnniversary?: number;
      /** Format: int32 */
      GradeOffset?: number;
      HasGraduated?: boolean;
      GradeFormatted?: string;
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: int32 */
      CreatedByPersonAliasId?: number;
      /** Format: int32 */
      ModifiedByPersonAliasId?: number;
      ModifiedAuditValuesAlreadyUpdated?: boolean;
      Attributes?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeCache"];
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    /**
     * @example {
     *   "PersonId": 0,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "f088c470-f9a1-4c5c-abf2-74c7940a3af7"
     * }
     */
    "Rock.Model.PersonAlias": {
      Name?: string;
      /** Format: int32 */
      PersonId: number;
      /** Format: date-time */
      AliasedDateTime?: string;
      /** Format: date-time */
      LastVisitDateTime?: string;
      Person?: components["schemas"]["Rock.Model.Person"];
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    /**
     * @example {
     *   "FullNumber": "",
     *   "NumberFormattedWithCountryCode": "",
     *   "IsSystem": false,
     *   "PersonId": 0,
     *   "IsMessagingEnabled": false,
     *   "IsUnlisted": false,
     *   "ModifiedAuditValuesAlreadyUpdated": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "d7c7d5f0-afbf-448f-b882-898f0c9f1986"
     * }
     */
    "Rock.Model.PhoneNumber": {
      FullNumber: string;
      NumberFormattedWithCountryCode?: string;
      IsSystem: boolean;
      /** Format: int32 */
      PersonId: number;
      CountryCode?: string;
      Number: string;
      NumberFormatted?: string;
      Extension?: string;
      /** Format: int32 */
      NumberTypeValueId?: number;
      IsMessagingEnabled: boolean;
      IsUnlisted?: boolean;
      Description?: string;
      NumberTypeValue?: components["schemas"]["Rock.Model.DefinedValue"];
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: int32 */
      CreatedByPersonAliasId?: number;
      /** Format: int32 */
      ModifiedByPersonAliasId?: number;
      ModifiedAuditValuesAlreadyUpdated?: boolean;
      Attributes?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeCache"];
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    /**
     * @example {
     *   "iCalendarContent": "",
     *   "FriendlyScheduleText": "No Schedule",
     *   "AutoInactivateWhenComplete": false,
     *   "IsActive": true,
     *   "Order": 0,
     *   "IsPublic": true,
     *   "ModifiedAuditValuesAlreadyUpdated": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "636f7f6b-8e10-4e07-8b3d-477fb90a8487"
     * }
     */
    "Rock.Model.Schedule": {
      iCalendarContent?: string;
      FriendlyScheduleText?: string;
      AbbreviatedName?: string;
      Name?: string;
      Description?: string;
      /** Format: int32 */
      CheckInStartOffsetMinutes?: number;
      /** Format: int32 */
      CheckInEndOffsetMinutes?: number;
      /** Format: date-time */
      EffectiveStartDate?: string;
      /** Format: date-time */
      EffectiveEndDate?: string;
      /** @enum {string} */
      WeeklyDayOfWeek?: "Sunday" | "Monday" | "Tuesday" | "Wednesday" | "Thursday" | "Friday" | "Saturday";
      WeeklyTimeOfDay?: string;
      /** Format: int32 */
      CategoryId?: number;
      AutoInactivateWhenComplete?: boolean;
      IsActive: boolean;
      /** Format: int32 */
      Order?: number;
      IsPublic?: boolean;
      Category?: components["schemas"]["Rock.Model.Category"];
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: int32 */
      CreatedByPersonAliasId?: number;
      /** Format: int32 */
      ModifiedByPersonAliasId?: number;
      ModifiedAuditValuesAlreadyUpdated?: boolean;
      Attributes?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeCache"];
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    /**
     * @example {
     *   "IsActive": true,
     *   "SignatureType": 0,
     *   "ModifiedAuditValuesAlreadyUpdated": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "e1cdd0ee-eab4-4f0c-a8d5-b598526cf7de"
     * }
     */
    "Rock.Model.SignatureDocumentTemplate": {
      Name: string;
      Description?: string;
      /** Format: int32 */
      ProviderEntityTypeId?: number;
      ProviderTemplateKey?: string;
      /** Format: int32 */
      BinaryFileTypeId?: number;
      /** Format: int32 */
      InviteSystemCommunicationId?: number;
      LavaTemplate?: string;
      IsActive?: boolean;
      DocumentTerm?: string;
      /** @enum {string} */
      SignatureType?: "Typed" | "Drawn";
      /** Format: int32 */
      CompletionSystemCommunicationId?: number;
      ProviderEntityType?: components["schemas"]["Rock.Model.EntityType"];
      BinaryFileType?: components["schemas"]["Rock.Model.BinaryFileType"];
      InviteSystemCommunication?: components["schemas"]["Rock.Model.SystemCommunication"];
      CompletionSystemCommunication?: components["schemas"]["Rock.Model.SystemCommunication"];
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: int32 */
      CreatedByPersonAliasId?: number;
      /** Format: int32 */
      ModifiedByPersonAliasId?: number;
      ModifiedAuditValuesAlreadyUpdated?: boolean;
      Attributes?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeCache"];
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    /**
     * @example {
     *   "IsSystem": false,
     *   "CssInliningEnabled": true,
     *   "LavaFieldsJson": "{}",
     *   "LavaFields": {},
     *   "ModifiedAuditValuesAlreadyUpdated": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "be6949ad-2524-47e7-bc1d-78370241eeab"
     * }
     */
    "Rock.Model.SystemCommunication": {
      IsSystem: boolean;
      IsActive?: boolean;
      /** Format: int32 */
      CategoryId?: number;
      Title: string;
      From?: string;
      FromName?: string;
      To?: string;
      Cc?: string;
      Bcc?: string;
      Subject: string;
      Body: string;
      CssInliningEnabled?: boolean;
      SMSMessage?: string;
      /** Format: int32 */
      SMSFromDefinedValueId?: number;
      LavaFieldsJson?: string;
      PushTitle?: string;
      PushMessage?: string;
      PushSound?: string;
      /** Format: int32 */
      PushImageBinaryFileId?: number;
      /** @enum {string} */
      PushOpenAction?: "NoAction" | "ShowDetails" | "LinkToMobilePage" | "LinkToUrl";
      PushOpenMessage?: string;
      PushData?: string;
      Category?: components["schemas"]["Rock.Model.Category"];
      SMSFromDefinedValue?: components["schemas"]["Rock.Model.DefinedValue"];
      LavaFields?: {
        [key: string]: string;
      };
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: int32 */
      CreatedByPersonAliasId?: number;
      /** Format: int32 */
      ModifiedByPersonAliasId?: number;
      ModifiedAuditValuesAlreadyUpdated?: boolean;
      Attributes?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeCache"];
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    /**
     * @example {
     *   "ModifiedAuditValuesAlreadyUpdated": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "4779dc33-76de-47fc-b61d-9faec282e812"
     * }
     */
    "Rock.Model.UserLogin": {
      /** Format: int32 */
      EntityTypeId: number;
      UserName: string;
      IsConfirmed?: boolean;
      /** Format: date-time */
      LastActivityDateTime?: string;
      /** Format: date-time */
      LastLoginDateTime?: string;
      /** Format: date-time */
      LastPasswordChangedDateTime?: string;
      IsOnLine?: boolean;
      IsLockedOut?: boolean;
      IsPasswordChangeRequired?: boolean;
      /** Format: date-time */
      LastLockedOutDateTime?: string;
      /** Format: int32 */
      FailedPasswordAttemptCount?: number;
      /** Format: date-time */
      FailedPasswordAttemptWindowStartDateTime?: string;
      /** Format: date-time */
      LastPasswordExpirationWarningDateTime?: string;
      /** Format: int32 */
      PersonId?: number;
      EntityType?: components["schemas"]["Rock.Model.EntityType"];
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: int32 */
      CreatedByPersonAliasId?: number;
      /** Format: int32 */
      ModifiedByPersonAliasId?: number;
      ModifiedAuditValuesAlreadyUpdated?: boolean;
      Attributes?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeCache"];
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    /**
     * @example {
     *   "IncludeActionsInNotification": true,
     *   "AllowPersonEntry": false,
     *   "PersonEntryCampusIsVisible": true,
     *   "PersonEntryAutofillCurrentPerson": true,
     *   "PersonEntryHideIfCurrentPersonKnown": false,
     *   "PersonEntrySpouseEntryOption": 0,
     *   "PersonEntryGenderEntryOption": 2,
     *   "PersonEntryEmailEntryOption": 2,
     *   "PersonEntryMobilePhoneEntryOption": 0,
     *   "PersonEntryBirthdateEntryOption": 0,
     *   "PersonEntryAddressEntryOption": 0,
     *   "PersonEntryMaritalStatusEntryOption": 0,
     *   "PersonEntryRaceEntryOption": 0,
     *   "PersonEntryEthnicityEntryOption": 0,
     *   "PersonEntrySpouseLabel": "Spouse",
     *   "PersonEntryShowHeadingSeparator": false,
     *   "FormSections": [],
     *   "FormAttributes": [],
     *   "ModifiedAuditValuesAlreadyUpdated": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "bb1484c3-d9cc-4865-a63a-ff8317b482ac"
     * }
     */
    "Rock.Model.WorkflowActionForm": {
      /** Format: int32 */
      NotificationSystemCommunicationId?: number;
      IncludeActionsInNotification?: boolean;
      Header?: string;
      Footer?: string;
      Actions?: string;
      /** Format: uuid */
      ActionAttributeGuid?: string;
      AllowNotes?: boolean;
      AllowPersonEntry?: boolean;
      PersonEntryPreHtml?: string;
      PersonEntryPostHtml?: string;
      PersonEntryCampusIsVisible?: boolean;
      PersonEntryAutofillCurrentPerson?: boolean;
      PersonEntryHideIfCurrentPersonKnown?: boolean;
      /** @enum {string} */
      PersonEntrySpouseEntryOption?: "Hidden" | "Optional" | "Required";
      /** @enum {string} */
      PersonEntryGenderEntryOption?: "Hidden" | "Optional" | "Required";
      /** @enum {string} */
      PersonEntryEmailEntryOption?: "Hidden" | "Optional" | "Required";
      /** @enum {string} */
      PersonEntryMobilePhoneEntryOption?: "Hidden" | "Optional" | "Required";
      /** @enum {string} */
      PersonEntryBirthdateEntryOption?: "Hidden" | "Optional" | "Required";
      /** @enum {string} */
      PersonEntryAddressEntryOption?: "Hidden" | "Optional" | "Required";
      /** @enum {string} */
      PersonEntryMaritalStatusEntryOption?: "Hidden" | "Optional" | "Required";
      /** @enum {string} */
      PersonEntryRaceEntryOption?: "Hidden" | "Optional" | "Required";
      /** @enum {string} */
      PersonEntryEthnicityEntryOption?: "Hidden" | "Optional" | "Required";
      PersonEntrySpouseLabel?: string;
      /** Format: int32 */
      PersonEntryConnectionStatusValueId?: number;
      /** Format: int32 */
      PersonEntryRecordStatusValueId?: number;
      /** Format: int32 */
      PersonEntryGroupLocationTypeValueId?: number;
      /** Format: int32 */
      PersonEntryCampusStatusValueId?: number;
      /** Format: int32 */
      PersonEntryCampusTypeValueId?: number;
      /** Format: uuid */
      PersonEntryPersonAttributeGuid?: string;
      /** Format: uuid */
      PersonEntrySpouseAttributeGuid?: string;
      /** Format: uuid */
      PersonEntryFamilyAttributeGuid?: string;
      /** Format: int32 */
      PersonEntrySectionTypeValueId?: number;
      PersonEntryTitle?: string;
      PersonEntryDescription?: string;
      PersonEntryShowHeadingSeparator?: boolean;
      FormSections?: components["schemas"]["Rock.Model.WorkflowActionFormSection"][];
      FormAttributes?: components["schemas"]["Rock.Model.WorkflowActionFormAttribute"][];
      PersonEntryConnectionStatusValue?: components["schemas"]["Rock.Model.DefinedValue"];
      PersonEntryRecordStatusValue?: components["schemas"]["Rock.Model.DefinedValue"];
      PersonEntryGroupLocationTypeValue?: components["schemas"]["Rock.Model.DefinedValue"];
      PersonEntryCampusStatusValue?: components["schemas"]["Rock.Model.DefinedValue"];
      PersonEntryCampusTypeValue?: components["schemas"]["Rock.Model.DefinedValue"];
      PersonEntrySectionTypeValue?: components["schemas"]["Rock.Model.DefinedValue"];
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: int32 */
      CreatedByPersonAliasId?: number;
      /** Format: int32 */
      ModifiedByPersonAliasId?: number;
      ModifiedAuditValuesAlreadyUpdated?: boolean;
      Attributes?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeCache"];
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    /**
     * @example {
     *   "WorkflowActionFormId": 0,
     *   "AttributeId": 0,
     *   "Order": 0,
     *   "IsVisible": false,
     *   "IsReadOnly": false,
     *   "IsRequired": false,
     *   "HideLabel": false,
     *   "ModifiedAuditValuesAlreadyUpdated": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "473ddecf-9ad7-4596-9acd-0d4b03a95699"
     * }
     */
    "Rock.Model.WorkflowActionFormAttribute": {
      /** Format: int32 */
      WorkflowActionFormId: number;
      /** Format: int32 */
      AttributeId: number;
      /** Format: int32 */
      Order: number;
      IsVisible?: boolean;
      IsReadOnly?: boolean;
      IsRequired?: boolean;
      HideLabel?: boolean;
      PreHtml?: string;
      PostHtml?: string;
      FieldVisibilityRulesJSON?: string;
      /** Format: int32 */
      ColumnSize?: number;
      /** Format: int32 */
      ActionFormSectionId?: number;
      Attribute?: components["schemas"]["Rock.Model.Attribute"];
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: int32 */
      CreatedByPersonAliasId?: number;
      /** Format: int32 */
      ModifiedByPersonAliasId?: number;
      ModifiedAuditValuesAlreadyUpdated?: boolean;
      Attributes?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeCache"];
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    /**
     * @example {
     *   "ShowHeadingSeparator": false,
     *   "Order": 0,
     *   "WorkflowActionFormId": 0,
     *   "ModifiedAuditValuesAlreadyUpdated": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "39777e24-4f02-4520-b40a-99fe3c5a4a5f"
     * }
     */
    "Rock.Model.WorkflowActionFormSection": {
      Title?: string;
      Description?: string;
      ShowHeadingSeparator?: boolean;
      SectionVisibilityRulesJSON?: string;
      /** Format: int32 */
      Order: number;
      /** Format: int32 */
      WorkflowActionFormId: number;
      /** Format: int32 */
      SectionTypeValueId?: number;
      SectionType?: components["schemas"]["Rock.Model.DefinedValue"];
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: int32 */
      CreatedByPersonAliasId?: number;
      /** Format: int32 */
      ModifiedByPersonAliasId?: number;
      ModifiedAuditValuesAlreadyUpdated?: boolean;
      Attributes?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeCache"];
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    /**
     * @example {
     *   "ActivityTypeId": 0,
     *   "Order": 0,
     *   "EntityTypeId": 0,
     *   "IsActionCompletedOnSuccess": false,
     *   "IsActivityCompletedOnSuccess": false,
     *   "CriteriaComparisonType": 0,
     *   "ModifiedAuditValuesAlreadyUpdated": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "fe30970b-52bb-42fd-9638-5d7934701e5e"
     * }
     */
    "Rock.Model.WorkflowActionType": {
      /** Format: int32 */
      ActivityTypeId?: number;
      Name: string;
      /** Format: int32 */
      Order: number;
      /** Format: int32 */
      EntityTypeId?: number;
      IsActionCompletedOnSuccess?: boolean;
      IsActivityCompletedOnSuccess?: boolean;
      /** Format: int32 */
      WorkflowFormId?: number;
      /** Format: uuid */
      CriteriaAttributeGuid?: string;
      /** @enum {string} */
      CriteriaComparisonType?: "EqualTo" | "NotEqualTo" | "StartsWith" | "Contains" | "DoesNotContain" | "IsBlank" | "IsNotBlank" | "GreaterThan" | "GreaterThanOrEqualTo" | "LessThan" | "LessThanOrEqualTo" | "EndsWith" | "Between" | "RegularExpression";
      CriteriaValue?: string;
      EntityType?: components["schemas"]["Rock.Model.EntityType"];
      WorkflowForm?: components["schemas"]["Rock.Model.WorkflowActionForm"];
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: int32 */
      CreatedByPersonAliasId?: number;
      /** Format: int32 */
      ModifiedByPersonAliasId?: number;
      ModifiedAuditValuesAlreadyUpdated?: boolean;
      Attributes?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeCache"];
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    /**
     * @example {
     *   "WorkflowTypeId": 0,
     *   "IsActivatedWithWorkflow": false,
     *   "Order": 0,
     *   "ActionTypes": [],
     *   "ModifiedAuditValuesAlreadyUpdated": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "c49cb753-73cc-4184-8a4b-eea261380188"
     * }
     */
    "Rock.Model.WorkflowActivityType": {
      IsActive?: boolean;
      /** Format: int32 */
      WorkflowTypeId?: number;
      Name: string;
      Description?: string;
      IsActivatedWithWorkflow?: boolean;
      /** Format: int32 */
      Order: number;
      ActionTypes?: components["schemas"]["Rock.Model.WorkflowActionType"][];
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: int32 */
      CreatedByPersonAliasId?: number;
      /** Format: int32 */
      ModifiedByPersonAliasId?: number;
      ModifiedAuditValuesAlreadyUpdated?: boolean;
      Attributes?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeCache"];
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    /**
     * @example {
     *   "IsActive": true,
     *   "AllowPersonEntry": false,
     *   "IsLoginRequired": false,
     *   "ModifiedAuditValuesAlreadyUpdated": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "541c8e28-77c2-4363-bd02-81c60b7a6ff8"
     * }
     */
    "Rock.Model.WorkflowFormBuilderTemplate": {
      Name: string;
      Description?: string;
      IsActive?: boolean;
      FormHeader?: string;
      FormFooter?: string;
      AllowPersonEntry?: boolean;
      PersonEntrySettingsJson?: string;
      ConfirmationEmailSettingsJson?: string;
      CompletionSettingsJson?: string;
      IsLoginRequired?: boolean;
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: int32 */
      CreatedByPersonAliasId?: number;
      /** Format: int32 */
      ModifiedByPersonAliasId?: number;
      ModifiedAuditValuesAlreadyUpdated?: boolean;
      Attributes?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeCache"];
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    /**
     * @example {
     *   "IsSystem": false,
     *   "IsActive": true,
     *   "Order": 0,
     *   "IsPersisted": false,
     *   "LoggingLevel": 0,
     *   "IsFormBuilder": false,
     *   "IsLoginRequired": false,
     *   "ActivityTypes": [],
     *   "ModifiedAuditValuesAlreadyUpdated": false,
     *   "Id": 0,
     *   "IdKey": "",
     *   "Guid": "91bf3618-e89d-4897-a32a-2400357be6c0"
     * }
     */
    "Rock.Model.WorkflowType": {
      IsSystem?: boolean;
      IsActive?: boolean;
      WorkflowIdPrefix?: string;
      Name: string;
      Description?: string;
      /** Format: int32 */
      CategoryId?: number;
      /** Format: int32 */
      Order: number;
      WorkTerm: string;
      /** Format: int32 */
      ProcessingIntervalSeconds?: number;
      IsPersisted?: boolean;
      SummaryViewText?: string;
      NoActionMessage?: string;
      /** Format: int32 */
      LogRetentionPeriod?: number;
      /** Format: int32 */
      CompletedWorkflowRetentionPeriod?: number;
      /** @enum {string} */
      LoggingLevel?: "None" | "Workflow" | "Activity" | "Action";
      IconCssClass?: string;
      /** Format: int32 */
      MaxWorkflowAgeDays?: number;
      /** Format: int32 */
      FormBuilderTemplateId?: number;
      IsFormBuilder?: boolean;
      FormBuilderSettingsJson?: string;
      /** Format: date-time */
      FormStartDateTime?: string;
      /** Format: date-time */
      FormEndDateTime?: string;
      /** Format: date-time */
      WorkflowExpireDateTime?: string;
      IsLoginRequired?: boolean;
      Category?: components["schemas"]["Rock.Model.Category"];
      FormBuilderTemplate?: components["schemas"]["Rock.Model.WorkflowFormBuilderTemplate"];
      ActivityTypes?: components["schemas"]["Rock.Model.WorkflowActivityType"][];
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: int32 */
      CreatedByPersonAliasId?: number;
      /** Format: int32 */
      ModifiedByPersonAliasId?: number;
      ModifiedAuditValuesAlreadyUpdated?: boolean;
      Attributes?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeCache"];
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      /** Format: int32 */
      Id?: number;
      IdKey?: string;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    "Rock.Rest.Controllers.GroupsController.FamilySearchResult": {
      /**
       * Format: int32
       * @description Gets or sets the id.
       */
      Id?: number;
      /** @description Gets or sets the name. */
      Name?: string;
      /** @description Gets or sets the family members. */
      FamilyMembers?: components["schemas"]["Rock.Model.GroupMember"][];
      HomeLocation?: components["schemas"]["Rock.Model.Location"];
      MainPhone?: components["schemas"]["Rock.Model.PhoneNumber"];
    };
    "Rock.Rest.Controllers.GroupsController.GuestFamily": {
      /**
       * Format: int32
       * @description Gets or sets the id.
       */
      Id?: number;
      /** @description Gets or sets the name. */
      Name?: string;
      /**
       * Format: uuid
       * @description Gets or sets the unique identifier.
       */
      Guid?: string;
      /** @description Gets or sets the family members. */
      FamilyMembers?: components["schemas"]["Rock.Rest.Controllers.GroupsController.GuestFamilyMember"][];
    };
    "Rock.Rest.Controllers.GroupsController.GuestFamilyMember": {
      /**
       * Format: int32
       * @description Gets or sets the identifier.
       */
      Id?: number;
      /**
       * Format: int32
       * @description Gets or sets the person alias identifier.
       */
      PersonAliasId?: number;
      /**
       * Format: uuid
       * @description Gets or sets the unique identifier.
       */
      Guid?: string;
      /** @description Gets or sets the first name. */
      FirstName?: string;
      /** @description Gets or sets the last name. */
      LastName?: string;
      /** @description Gets or sets the photo URL. */
      PhotoUrl?: string;
      /** @description Gets or sets a value indicating whether this instance can checkin. */
      CanCheckin?: boolean;
      /**
       * Format: int32
       * @description Gets or sets the age.
       */
      Age?: number;
      /** @description Gets or sets the role. */
      Role?: string;
      /**
       * @description Gets or sets the gender.
       * @enum {string}
       */
      Gender?: "Unknown" | "Male" | "Female";
    };
    "Rock.Rest.Controllers.GroupsController.InfoWindowRequest": {
      /** @description Gets or sets the group page. */
      GroupPage?: string;
      /** @description Gets or sets the person profile page. */
      PersonProfilePage?: string;
      /** @description Gets or sets the map page. */
      MapPage?: string;
      /** @description Gets or sets the template. */
      Template?: string;
    };
    "Rock.Rest.Controllers.GroupsController.InfoWindowResult": {
      /** @description Gets or sets the result. */
      Result?: string;
    };
    "Rock.Web.Cache.AttributeCache": {
      AttributeIds?: number[];
      IsSystem?: boolean;
      /** Format: int32 */
      FieldTypeId?: number;
      /** Format: int32 */
      EntityTypeId?: number;
      EntityTypeQualifierColumn?: string;
      EntityTypeQualifierValue?: string;
      Key?: string;
      Name?: string;
      Description?: string;
      /** Format: int32 */
      Order?: number;
      IconCssClass?: string;
      IsGridColumn?: boolean;
      DefaultValue?: string;
      DefaultPersistedTextValue?: string;
      DefaultPersistedHtmlValue?: string;
      DefaultPersistedCondensedTextValue?: string;
      DefaultPersistedCondensedHtmlValue?: string;
      IsDefaultPersistedValueDirty?: boolean;
      IsPersistedValueSupported?: boolean;
      IsMultiValue?: boolean;
      IsRequired?: boolean;
      AllowSearch?: boolean;
      AttributeColor?: string;
      IsIndexEnabled?: boolean;
      IsAnalytic?: boolean;
      IsAnalyticHistory?: boolean;
      EnableHistory?: boolean;
      PreHtml?: string;
      PostHtml?: string;
      AbbreviatedName?: string;
      ShowOnBulk?: boolean;
      IsPublic?: boolean;
      IsActive?: boolean;
      CategoryIds?: number[];
      ConfigurationValues?: {
        [key: string]: string;
      };
      QualifierValues?: {
        [key: string]: components["schemas"]["Rock.Field.ConfigurationValue"];
      };
      /** Format: int32 */
      TypeId?: number;
      TypeName?: string;
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      SupportedActions?: {
        [key: string]: string;
      };
      AttributeValues?: {
        [key: string]: components["schemas"]["Rock.Web.Cache.AttributeValueCache"];
      };
      IdKey?: string;
      /** Format: int32 */
      Id?: number;
      /** Format: uuid */
      Guid?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      ForeignKey?: string;
    };
    "Rock.Web.Cache.AttributeValueCache": {
      /** Format: int32 */
      AttributeId?: number;
      /** Format: int32 */
      EntityId?: number;
      Value?: string;
      ValueFormatted?: string;
      PersistedTextValue?: string;
      PersistedHtmlValue?: string;
      PersistedCondensedTextValue?: string;
      PersistedCondensedHtmlValue?: string;
      IsPersistedValueDirty?: boolean;
    };
    "Rock.Web.UI.Controls.TreeViewItem": {
      Id?: string;
      Name?: string;
      HasChildren?: boolean;
      IconCssClass?: string;
      IconSmallUrl?: string;
      IsActive?: boolean;
      /** Format: int32 */
      CountInfo?: number;
      Children?: components["schemas"]["Rock.Web.UI.Controls.TreeViewItem"][];
    };
    "System.Data.Entity.Spatial.DbGeography": {
      Geography?: components["schemas"]["System.Data.Entity.Spatial.DbGeographyWellKnownValue"];
    };
    "System.Data.Entity.Spatial.DbGeographyWellKnownValue": {
      /** Format: int32 */
      CoordinateSystemId?: number;
      WellKnownText?: string;
      /** Format: byte */
      WellKnownBinary?: string;
    };
    "System.Web.Http.OData.ODataQueryContext": {
      Model?: components["schemas"]["Microsoft.Data.Edm.IEdmModel"];
      ElementType?: components["schemas"]["Microsoft.Data.Edm.IEdmType"];
      ElementClrType?: string;
    };
    "System.Web.Http.OData.Query.FilterQueryOption": {
      Context?: components["schemas"]["System.Web.Http.OData.ODataQueryContext"];
      Validator?: components["schemas"]["System.Web.Http.OData.Query.Validators.FilterQueryValidator"];
      FilterClause?: components["schemas"]["Microsoft.Data.OData.Query.SemanticAst.FilterClause"];
      RawValue?: string;
    };
    "System.Web.Http.OData.Query.InlineCountQueryOption": {
      Context?: components["schemas"]["System.Web.Http.OData.ODataQueryContext"];
      RawValue?: string;
      /** @enum {string} */
      Value?: "None" | "AllPages";
    };
    "System.Web.Http.OData.Query.ODataQueryOptions[Rock.Model.Group]": {
      IfMatch?: Record<string, never>;
      IfNoneMatch?: Record<string, never>;
      Context?: components["schemas"]["System.Web.Http.OData.ODataQueryContext"];
      Request?: Record<string, never>;
      RawValues?: components["schemas"]["System.Web.Http.OData.Query.ODataRawQueryOptions"];
      SelectExpand?: components["schemas"]["System.Web.Http.OData.Query.SelectExpandQueryOption"];
      Filter?: components["schemas"]["System.Web.Http.OData.Query.FilterQueryOption"];
      OrderBy?: components["schemas"]["System.Web.Http.OData.Query.OrderByQueryOption"];
      Skip?: components["schemas"]["System.Web.Http.OData.Query.SkipQueryOption"];
      Top?: components["schemas"]["System.Web.Http.OData.Query.TopQueryOption"];
      InlineCount?: components["schemas"]["System.Web.Http.OData.Query.InlineCountQueryOption"];
      Validator?: components["schemas"]["System.Web.Http.OData.Query.Validators.ODataQueryValidator"];
    };
    "System.Web.Http.OData.Query.ODataRawQueryOptions": {
      Filter?: string;
      OrderBy?: string;
      Top?: string;
      Skip?: string;
      Select?: string;
      Expand?: string;
      InlineCount?: string;
      Format?: string;
      SkipToken?: string;
    };
    "System.Web.Http.OData.Query.OrderByNode": {
      /** @enum {string} */
      Direction?: "Ascending" | "Descending";
    };
    "System.Web.Http.OData.Query.OrderByQueryOption": {
      Context?: components["schemas"]["System.Web.Http.OData.ODataQueryContext"];
      OrderByNodes?: readonly components["schemas"]["System.Web.Http.OData.Query.OrderByNode"][];
      RawValue?: string;
      Validator?: components["schemas"]["System.Web.Http.OData.Query.Validators.OrderByQueryValidator"];
      OrderByClause?: components["schemas"]["Microsoft.Data.OData.Query.SemanticAst.OrderByClause"];
    };
    "System.Web.Http.OData.Query.SelectExpandQueryOption": {
      Context?: components["schemas"]["System.Web.Http.OData.ODataQueryContext"];
      RawSelect?: string;
      RawExpand?: string;
      Validator?: components["schemas"]["System.Web.Http.OData.Query.Validators.SelectExpandQueryValidator"];
      SelectExpandClause?: components["schemas"]["Microsoft.Data.OData.Query.SemanticAst.SelectExpandClause"];
    };
    "System.Web.Http.OData.Query.SkipQueryOption": {
      Context?: components["schemas"]["System.Web.Http.OData.ODataQueryContext"];
      RawValue?: string;
      /** Format: int32 */
      Value?: number;
      Validator?: components["schemas"]["System.Web.Http.OData.Query.Validators.SkipQueryValidator"];
    };
    "System.Web.Http.OData.Query.TopQueryOption": {
      Context?: components["schemas"]["System.Web.Http.OData.ODataQueryContext"];
      RawValue?: string;
      /** Format: int32 */
      Value?: number;
      Validator?: components["schemas"]["System.Web.Http.OData.Query.Validators.TopQueryValidator"];
    };
    "System.Web.Http.OData.Query.Validators.FilterQueryValidator": Record<string, never>;
    "System.Web.Http.OData.Query.Validators.ODataQueryValidator": Record<string, never>;
    "System.Web.Http.OData.Query.Validators.OrderByQueryValidator": Record<string, never>;
    "System.Web.Http.OData.Query.Validators.SelectExpandQueryValidator": Record<string, never>;
    "System.Web.Http.OData.Query.Validators.SkipQueryValidator": Record<string, never>;
    "System.Web.Http.OData.Query.Validators.TopQueryValidator": Record<string, never>;
    "Rock.BulkExport.AttributesExport": {
      AttributeValues?: {
        [key: string]: Record<string, never>;
      };
    };
    "Rock.BulkExport.LocationExport": {
      /** Format: double */
      Latitude?: number;
      /** Format: double */
      Longitude?: number;
      Street1?: string;
      Street2?: string;
      City?: string;
      State?: string;
      PostalCode?: string;
      Country?: string;
      County?: string;
    };
    "Rock.BulkExport.PeopleExport": {
      /** Format: int32 */
      Page?: number;
      /** Format: int32 */
      PageSize?: number;
      /** Format: int32 */
      TotalCount?: number;
      Persons?: components["schemas"]["Rock.BulkExport.PersonExport"][];
    };
    "Rock.BulkExport.PersonExport": {
      /** Format: int32 */
      Id?: number;
      PersonAliasIds?: readonly number[];
      Title?: string;
      FirstName?: string;
      NickName?: string;
      MiddleName?: string;
      LastName?: string;
      Suffix?: string;
      PhotoUrl?: string;
      /** Format: int32 */
      BirthDay?: number;
      /** Format: int32 */
      BirthMonth?: number;
      /** Format: int32 */
      BirthYear?: number;
      Gender?: string;
      /** Format: int32 */
      MaritalStatusValueId?: number;
      MaritalStatus?: string;
      /** Format: date-time */
      AnniversaryDate?: string;
      /** Format: int32 */
      GraduationYear?: number;
      /** Format: int32 */
      GivingGroupId?: number;
      GivingId?: string;
      /** Format: int32 */
      GivingLeaderId?: number;
      Email?: string;
      AgeClassification?: string;
      /** Format: int32 */
      PrimaryFamilyId?: number;
      /** Format: int32 */
      PrimaryCampusId?: number;
      /** Format: date-time */
      DeceasedDate?: string;
      IsBusiness?: boolean;
      HomePhone?: string;
      MobilePhone?: string;
      HomeAddress?: components["schemas"]["Rock.BulkExport.LocationExport"];
      /** Format: int32 */
      RecordTypeValueId?: number;
      RecordType?: string;
      /** Format: int32 */
      RecordStatusValueId?: number;
      RecordStatus?: string;
      /** Format: date-time */
      RecordStatusLastModifiedDateTime?: string;
      /** Format: int32 */
      RecordStatusReasonValueId?: number;
      RecordStatusReason?: string;
      /** Format: int32 */
      ConnectionStatusValueId?: number;
      ConnectionStatus?: string;
      IsDeceased?: boolean;
      /** Format: date-time */
      CreatedDateTime?: string;
      /** Format: date-time */
      ModifiedDateTime?: string;
      /** Format: uuid */
      Guid?: string;
      ForeignKey?: string;
      /** Format: int32 */
      ForeignId?: number;
      /** Format: uuid */
      ForeignGuid?: string;
      AttributesExport?: components["schemas"]["Rock.BulkExport.AttributesExport"];
    };
    "Rock.Rest.Controllers.ConfigureTextToGiveArgs": {
      /**
       * Format: int32
       * @description The Financial Account Id that will be the default gift designation for the person. Null value
       * clears the setting and requires the user to set before text-to-give will work for them.
       */
      ContributionFinancialAccountId?: number;
      /**
       * Format: int32
       * @description The Saved Account associated with the person that will be used as the default payment method for
       * the person throughout Rock
       */
      FinancialPersonSavedAccountId?: number;
    };
    "Rock.Rest.Controllers.PeopleController.DuplicatePersonInfo": {
      /**
       * Format: int32
       * @description Gets or sets the identifier.
       */
      Id?: number;
      /** @description Gets or sets the name. */
      Name?: string;
      /** @description Gets or sets the email. */
      Email?: string;
      /**
       * @description Gets or sets the gender.
       * @enum {string}
       */
      Gender?: "Unknown" | "Male" | "Female";
      /**
       * Format: int32
       * @description Gets or sets the birth month.
       */
      BirthMonth?: number;
      /**
       * Format: int32
       * @description Gets or sets the birth day.
       */
      BirthDay?: number;
      /**
       * Format: int32
       * @description Gets or sets the birth year.
       */
      BirthYear?: number;
    };
    /** @description Person Interaction Statistics */
    "Rock.Rest.Controllers.PersonInteractionStatistics": {
      /**
       * Format: int32
       * @description Gets or sets the interactions all time.
       */
      InteractionsAllTime?: number;
      /**
       * Format: int32
       * @description Gets or sets the interactions that day.
       */
      InteractionsThatDay?: number;
      /**
       * Format: int32
       * @description Gets or sets the interactions that month.
       */
      InteractionsThatMonth?: number;
      /**
       * Format: int32
       * @description Gets or sets the interactions that year.
       */
      InteractionsThatYear?: number;
    };
    /** @description A phone number that will be included in the search results. */
    "Rock.Rest.Controllers.PersonSearchPhoneNumber": {
      /** @description Gets or sets the type of phone number this instance represents. */
      Type?: string;
      /** @description Gets or sets the formatted phone number this instance represents. */
      Number?: string;
      /** @description Gets or sets a value that indicates if this phone number is unlisted. */
      IsUnlisted?: boolean;
    };
    "Rock.Rest.Controllers.PersonSearchResult": {
      /**
       * Format: int32
       * @description Gets or sets the id.
       */
      Id?: number;
      /**
       * Format: uuid
       * @description Gets or sets the unique identifier of the person.
       */
      Guid?: string;
      /**
       * Format: uuid
       * @description Gets or sets the unique identifier of the person's primary alias.
       */
      PrimaryAliasGuid?: string;
      /** @description Gets or sets the full name last first. */
      Name?: string;
      /** @description Gets or sets a value indicating whether this instance is active. */
      IsActive?: boolean;
      /** @description Gets or sets a value indicating whether this instance is deceased. */
      IsDeceased?: boolean;
      /** @description Gets or sets a value indicating whether this instance is a business. */
      IsBusiness?: boolean;
      /** @description Gets or sets the person photo image to display. */
      ImageUrl?: string;
      /** @description Gets or sets the image HTML tag. */
      ImageHtmlTag?: string;
      /**
       * Format: int32
       * @description Gets or sets the age in years
       * NOTE: returns -1 if age is unknown
       */
      Age?: number;
      /** @description Gets or sets the formatted age. */
      FormattedAge?: string;
      /**
       * @description Gets or sets the age classification value.
       * @enum {string}
       */
      AgeClassification?: "Unknown" | "Adult" | "Child";
      /** @description Gets or sets the gender. */
      Gender?: string;
      /** @description Gets or sets the connection status. */
      ConnectionStatus?: string;
      /** @description Gets or sets the record status. */
      RecordStatus?: string;
      /** @description Gets or sets the email. */
      Email?: string;
      /** @description Gets or sets the name of the spouse. */
      SpouseName?: string;
      /** @description Gets or sets the nickname of the spouse. */
      SpouseNickName?: string;
      /** @description Gets or sets the address. */
      Address?: string;
      /** @description Gets or sets the phone numbers for this person. */
      PhoneNumbers?: components["schemas"]["Rock.Rest.Controllers.PersonSearchPhoneNumber"][];
      /** @description Gets or sets the picker item details HTML. */
      PickerItemDetailsHtml?: string;
      /** @description The search details */
      SearchDetailsHtml?: string;
      /** @description Gets or sets the picker item details image HTML. */
      PickerItemDetailsImageHtml?: string;
      /** @description Gets or sets the picker item details person information HTML. */
      PickerItemDetailsPersonInfoHtml?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Queryable GET endpoint */
  GETapi_Groups: {
    parameters: {
      query?: {
        /** @description Expands related entities inline. */
        $expand?: string;
        /** @description Filters the results, based on a Boolean condition. */
        $filter?: string;
        /** @description Selects which properties to include in the response. */
        $select?: string;
        /** @description Sorts the results. */
        $orderby?: string;
        /** @description Returns only the first n results. */
        $top?: number;
        /** @description Skips the first n results. */
        $skip?: number;
        /** @description Specify 'simple' or 'expanded' to load attributes */
        loadAttributes?: "simple" | "expanded";
        /** @description Specify a comma-delimited list of attribute keys to limit to specific attributes, */
        attributeKeys?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.Model.Group"][];
        };
      };
    };
  };
  /** POST endpoint. Use this to add a record */
  POSTapi_Groups: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Rock.Model.Group"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** GET endpoint to get a single record */
  GETapi_Groups_id: {
    parameters: {
      query?: {
        /** @description Specify 'simple' or 'expanded' to load attributes */
        loadAttributes?: "simple" | "expanded";
        /** @description Specify a comma-delimited list of attribute keys to limit to specific attributes, */
        attributeKeys?: string;
      };
      path: {
        /** @description The Id of the record */
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.Model.Group"];
        };
      };
    };
  };
  /** PUT endpoint. Use this to update a record */
  PUTapi_Groups_id: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Rock.Model.Group"];
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: {
        };
      };
    };
  };
  /** DELETE endpoint. To delete the record */
  DELETEapi_Groups_id: {
    parameters: {
      path: {
        /** @description The identifier. */
        id: number;
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: {
        };
      };
    };
  };
  /** PATCH endpoint. Use this to update a subset of the properties of the record */
  PATCHapi_Groups_id: {
    parameters: {
      path: {
        /** @description The identifier. */
        id: number;
      };
    };
    /** @description The values. */
    requestBody: {
      content: {
        "application/json": {
          [key: string]: Record<string, never>;
        };
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: {
        };
      };
    };
  };
  /** POST an attribute value. Use this to set an attribute value for the record */
  POSTapi_Groups_AttributeValue_idattributeKeyattributeKeyattributeValueattributeValue: {
    parameters: {
      query: {
        /** @description The attribute key. */
        attributeKey: string;
        /** @description The attribute value. */
        attributeValue: string;
      };
      path: {
        /** @description The identifier. */
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** DELETE to delete the specified attribute value for the record */
  DELETEapi_Groups_AttributeValue_idattributeKeyattributeKey: {
    parameters: {
      query: {
        /** @description The attribute key. */
        attributeKey: string;
      };
      path: {
        /** @description The identifier. */
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /**
   * Gets a list of groups surrounding the specified lat/long, optionally limited to the specified geofenceGroupTypeId
   * If geofenceGroupTypeId is specified, the list of GeoFence groups will be returned with the groups as child groups of that geofence group.
   */
  GETapi_Groups_ByLatLonggroupTypeIdgroupTypeIdlatitudelatitudelongitudelongitudesortByDistancesortByDistancemaxDistanceMilesmaxDistanceMilesgeofenceGroupTypeIdgeofenceGroupTypeId: {
    parameters: {
      query: {
        /** @description The group type identifier. */
        groupTypeId: number;
        /** @description The latitude. */
        latitude: number;
        /** @description The longitude. */
        longitude: number;
        /** @description The sort by distance. */
        sortByDistance?: boolean;
        /** @description The maximum distance miles. */
        maxDistanceMiles?: number;
        /** @description The geofence group type identifier. */
        geofenceGroupTypeId?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>[];
        };
      };
    };
  };
  /**
   * Gets a list of groups surrounding the specified the location, optionally limited to the specified geofenceGroupTypeId
   * If geofenceGroupTypeId is specified, the list of GeoFence groups will be returned with the groups as child groups of that geofence group.
   */
  GETapi_Groups_ByLocationgroupTypeIdgroupTypeIdlocationIdlocationIdsortByDistancesortByDistancemaxDistanceMilesmaxDistanceMilesgeofenceGroupTypeIdgeofenceGroupTypeId: {
    parameters: {
      query: {
        /** @description The group type identifier. */
        groupTypeId: number;
        /** @description The location identifier. */
        locationId: number;
        /** @description if set to true [sort by distance]. */
        sortByDistance?: boolean;
        /** @description The maximum distance miles. */
        maxDistanceMiles?: number;
        /** @description The geofence group type identifier. */
        geofenceGroupTypeId?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>[];
        };
      };
    };
  };
  /** Gets a list of objects represented by the selected data view */
  GETapi_Groups_DataView_id: {
    parameters: {
      query?: {
        /** @description Expands related entities inline. */
        $expand?: string;
        /** @description Filters the results, based on a Boolean condition. */
        $filter?: string;
        /** @description Selects which properties to include in the response. */
        $select?: string;
        /** @description Sorts the results. */
        $orderby?: string;
        /** @description Returns only the first n results. */
        $top?: number;
        /** @description Skips the first n results. */
        $skip?: number;
        /** @description Specify 'simple' or 'expanded' to load attributes */
        loadAttributes?: "simple" | "expanded";
        /** @description Specify a comma-delimited list of attribute keys to limit to specific attributes, */
        attributeKeys?: string;
      };
      path: {
        /** @description The id. */
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.Model.Group"][];
        };
      };
    };
  };
  GETapi_Groups_FollowedItemspersonIdpersonIdpersonAliasIdpersonAliasId: {
    parameters: {
      query?: {
        personId?: number;
        personAliasId?: number;
        /** @description Expands related entities inline. */
        $expand?: string;
        /** @description Filters the results, based on a Boolean condition. */
        $filter?: string;
        /** @description Selects which properties to include in the response. */
        $select?: string;
        /** @description Sorts the results. */
        $orderby?: string;
        /** @description Returns only the first n results. */
        $top?: number;
        /** @description Skips the first n results. */
        $skip?: number;
        /** @description Specify 'simple' or 'expanded' to load attributes */
        loadAttributes?: "simple" | "expanded";
        /** @description Specify a comma-delimited list of attribute keys to limit to specific attributes, */
        attributeKeys?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.Model.Group"][];
        };
      };
    };
  };
  GETapi_Groups_GetByAttributeValueattributeIdattributeIdattributeKeyattributeKeyvaluevaluecaseSensitivecaseSensitive: {
    parameters: {
      query?: {
        attributeId?: number;
        attributeKey?: string;
        value?: string;
        caseSensitive?: boolean;
        /** @description Expands related entities inline. */
        $expand?: string;
        /** @description Filters the results, based on a Boolean condition. */
        $filter?: string;
        /** @description Selects which properties to include in the response. */
        $select?: string;
        /** @description Sorts the results. */
        $orderby?: string;
        /** @description Returns only the first n results. */
        $top?: number;
        /** @description Skips the first n results. */
        $skip?: number;
        /** @description Specify 'simple' or 'expanded' to load attributes */
        loadAttributes?: "simple" | "expanded";
        /** @description Specify a comma-delimited list of attribute keys to limit to specific attributes, */
        attributeKeys?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.Model.Group"][];
        };
      };
    };
  };
  /** Gets the children. */
  GETapi_Groups_GetChildren_idrootGroupIdrootGroupIdlimitToSecurityRoleGroupslimitToSecurityRoleGroupsincludedGroupTypeIdsincludedGroupTypeIdsexcludedGroupTypeIdsexcludedGroupTypeIdsincludeInactiveGroupsincludeInactiveGroupscountsTypecountsTypecampusIdcampusIdincludeNoCampusincludeNoCampuslimitToPubliclimitToPubliclimitToSchedulingEnabledlimitToSchedulingEnabledlimitToRSVPEnabledlimitToRSVPEnabled: {
    parameters: {
      query?: {
        /** @description The root group identifier. */
        rootGroupId?: number;
        /** @description if set to true [limit to security role groups]. */
        limitToSecurityRoleGroups?: boolean;
        /** @description The included group type ids. */
        includedGroupTypeIds?: string;
        /** @description The excluded group type ids. */
        excludedGroupTypeIds?: string;
        /** @description if set to true [include inactive groups]. */
        includeInactiveGroups?: boolean;
        /** @description Type of the counts. */
        countsType?: "None" | "ChildGroups" | "GroupMembers";
        /** @description if set it will filter groups based on campus */
        campusId?: number;
        /** @description if campus set and set to true [include groups with no campus]. */
        includeNoCampus?: boolean;
        /** @description if set to true [limit to public groups]. */
        limitToPublic?: boolean;
        /** @description if set to true only includes groups that have SchedulingEnabled (or has a child group that has SchedulingEnabled). */
        limitToSchedulingEnabled?: boolean;
        /** @description if set to true only includes groups that have RSVPEnabled (or has a child group that has RSVPEnabled). */
        limitToRSVPEnabled?: boolean;
        /** @description Expands related entities inline. */
        $expand?: string;
        /** @description Filters the results, based on a Boolean condition. */
        $filter?: string;
        /** @description Selects which properties to include in the response. */
        $select?: string;
        /** @description Sorts the results. */
        $orderby?: string;
        /** @description Returns only the first n results. */
        $top?: number;
        /** @description Skips the first n results. */
        $skip?: number;
      };
      path: {
        /** @description The identifier. */
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.Web.UI.Controls.TreeViewItem"][];
        };
      };
    };
  };
  /** Gets the families sorted by the person's GroupOrder (GroupMember.GroupOrder) */
  GETapi_Groups_GetFamilies_personId: {
    parameters: {
      query?: {
        /** @description Expands related entities inline. */
        $expand?: string;
        /** @description Filters the results, based on a Boolean condition. */
        $filter?: string;
        /** @description Selects which properties to include in the response. */
        $select?: string;
        /** @description Sorts the results. */
        $orderby?: string;
        /** @description Returns only the first n results. */
        $top?: number;
        /** @description Skips the first n results. */
        $skip?: number;
        /** @description Specify 'simple' or 'expanded' to load attributes */
        loadAttributes?: "simple" | "expanded";
        /** @description Specify a comma-delimited list of attribute keys to limit to specific attributes, */
        attributeKeys?: string;
      };
      path: {
        /** @description The person identifier. */
        personId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.Model.Group"][];
        };
      };
    };
  };
  /** Gets the families by name search. */
  GETapi_Groups_GetFamiliesByPersonNameSearch_searchString: {
    parameters: {
      query?: {
        /** @description Expands related entities inline. */
        $expand?: string;
        /** @description Filters the results, based on a Boolean condition. */
        $filter?: string;
        /** @description Selects which properties to include in the response. */
        $select?: string;
        /** @description Sorts the results. */
        $orderby?: string;
        /** @description Returns only the first n results. */
        $top?: number;
        /** @description Skips the first n results. */
        $skip?: number;
      };
      path: {
        /** @description String to use for search. */
        searchString: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.Rest.Controllers.GroupsController.FamilySearchResult"][];
        };
      };
    };
  };
  /** Gets the families by name search. */
  GETapi_Groups_GetFamiliesByPersonNameSearch_searchString_maxResults: {
    parameters: {
      query?: {
        /** @description Expands related entities inline. */
        $expand?: string;
        /** @description Filters the results, based on a Boolean condition. */
        $filter?: string;
        /** @description Selects which properties to include in the response. */
        $select?: string;
        /** @description Sorts the results. */
        $orderby?: string;
        /** @description Returns only the first n results. */
        $top?: number;
        /** @description Skips the first n results. */
        $skip?: number;
      };
      path: {
        /** @description String to use for search. */
        searchString: string;
        /** @description The maximum results. */
        maxResults: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.Rest.Controllers.GroupsController.FamilySearchResult"][];
        };
      };
    };
  };
  /** Gets the family. */
  GETapi_Groups_GetFamily_familyId: {
    parameters: {
      path: {
        /** @description The family identifier. */
        familyId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.Rest.Controllers.GroupsController.FamilySearchResult"];
        };
      };
    };
  };
  /** Gets the guests (known relationship of can check-in) for given family. */
  GETapi_Groups_GetGuestsForFamily_groupId: {
    parameters: {
      query?: {
        /** @description Expands related entities inline. */
        $expand?: string;
        /** @description Filters the results, based on a Boolean condition. */
        $filter?: string;
        /** @description Selects which properties to include in the response. */
        $select?: string;
        /** @description Sorts the results. */
        $orderby?: string;
        /** @description Returns only the first n results. */
        $top?: number;
        /** @description Skips the first n results. */
        $skip?: number;
      };
      path: {
        /** @description Group id of the family. */
        groupId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.Rest.Controllers.GroupsController.GuestFamily"][];
        };
      };
    };
  };
  /** Gets the map information. */
  GETapi_Groups_GetMapInfo_groupId: {
    parameters: {
      query?: {
        /** @description Expands related entities inline. */
        $expand?: string;
        /** @description Filters the results, based on a Boolean condition. */
        $filter?: string;
        /** @description Selects which properties to include in the response. */
        $select?: string;
        /** @description Sorts the results. */
        $orderby?: string;
        /** @description Returns only the first n results. */
        $top?: number;
        /** @description Skips the first n results. */
        $skip?: number;
      };
      path: {
        /** @description The group identifier. */
        groupId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.Model.MapItem"][];
        };
      };
    };
  };
  /** Gets the child map information. */
  GETapi_Groups_GetMapInfo_groupId_ChildrengroupTypeIdsgroupTypeIdsincludeDescendantsincludeDescendants: {
    parameters: {
      query?: {
        /** @description The group type ids (comma delimited). */
        groupTypeIds?: string;
        /** @description if set to true [include descendants]. */
        includeDescendants?: boolean;
        /** @description Expands related entities inline. */
        $expand?: string;
        /** @description Filters the results, based on a Boolean condition. */
        $filter?: string;
        /** @description Selects which properties to include in the response. */
        $select?: string;
        /** @description Sorts the results. */
        $orderby?: string;
        /** @description Returns only the first n results. */
        $top?: number;
        /** @description Skips the first n results. */
        $skip?: number;
      };
      path: {
        /** @description The group identifier. */
        groupId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.Model.MapItem"][];
        };
      };
    };
  };
  /** Gets the families map information. */
  GETapi_Groups_GetMapInfo_groupId_Families_statusId: {
    parameters: {
      query?: {
        /** @description Expands related entities inline. */
        $expand?: string;
        /** @description Filters the results, based on a Boolean condition. */
        $filter?: string;
        /** @description Selects which properties to include in the response. */
        $select?: string;
        /** @description Sorts the results. */
        $orderby?: string;
        /** @description Returns only the first n results. */
        $top?: number;
        /** @description Skips the first n results. */
        $skip?: number;
      };
      path: {
        /** @description The group identifier. */
        groupId: number;
        /** @description The status identifier. */
        statusId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.Model.MapItem"][];
        };
      };
    };
  };
  /** Gets the member map information. */
  GETapi_Groups_GetMapInfo_groupId_Members_groupMemberStatus: {
    parameters: {
      query?: {
        /** @description Expands related entities inline. */
        $expand?: string;
        /** @description Filters the results, based on a Boolean condition. */
        $filter?: string;
        /** @description Selects which properties to include in the response. */
        $select?: string;
        /** @description Sorts the results. */
        $orderby?: string;
        /** @description Returns only the first n results. */
        $top?: number;
        /** @description Skips the first n results. */
        $skip?: number;
      };
      path: {
        /** @description The group identifier. */
        groupId: number;
        /** @description The group member status. */
        groupMemberStatus: "Inactive" | "Active" | "Pending";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.Model.MapItem"][];
        };
      };
    };
  };
  /** Gets the map information window. */
  POSTapi_Groups_GetMapInfoWindow_groupId_locationId: {
    parameters: {
      path: {
        /** @description The group identifier. */
        groupId: number;
        /** @description The location identifier. */
        locationId: number;
      };
    };
    /** @description The information window details. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Rock.Rest.Controllers.GroupsController.InfoWindowRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.Rest.Controllers.GroupsController.InfoWindowResult"];
        };
      };
    };
  };
  /**
   * Returns a simplified data structure of the check-in parameters. This is used by FrontPorch but is generalized.
   * The children of the provided group GUID are incuded in the results.
   */
  GETapi_Groups_GroupTypeCheckinConfiguration_groupTypeGuid: {
    parameters: {
      path: {
        /** @description The group type unique identifier. */
        groupTypeGuid: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Determines if the entity id is in the data view */
  GETapi_Groups_InDataView_dataViewId_entityId: {
    parameters: {
      path: {
        /** @description The data view identifier. */
        dataViewId: number;
        /** @description The entity identifier. */
        entityId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": boolean;
        };
      };
    };
  };
  /** Launches a workflow. And optionally passes the entity with selected id as the entity for the workflow */
  POSTapi_Groups_LaunchWorkflow_idworkflowTypeIdworkflowTypeIdworkflowNameworkflowName: {
    parameters: {
      query: {
        /** @description The workflow type identifier. */
        workflowTypeId: number;
        /** @description Name of the workflow. */
        workflowName: string;
      };
      path: {
        /** @description The Id of the entity to pass to workflow, if entity cannot be loaded workflow will still be launched but without passing an entity */
        id: number;
      };
    };
    /** @description Optional list of workflow values to set. */
    requestBody: {
      content: {
        "application/json": {
          [key: string]: string;
        };
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: {
        };
      };
    };
  };
  /** Saves a group address. */
  PUTapi_Groups_SaveAddress_groupId_locationTypeIdstreet1street1street2street2citycitystatestatepostalCodepostalCodecountrycountry: {
    parameters: {
      query?: {
        /** @description The street1. */
        street1?: string;
        /** @description The street2. */
        street2?: string;
        /** @description The city. */
        city?: string;
        /** @description The state. */
        state?: string;
        /** @description The postal code. */
        postalCode?: string;
        /** @description The country. */
        country?: string;
      };
      path: {
        /** @description The group identifier. */
        groupId: number;
        /** @description The location type identifier. */
        locationTypeId: number;
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: {
        };
      };
    };
  };
  /** Sets the Context Cookie to the specified record. Use this to set the Campus Context, Group Context, etc */
  PUTapi_Groups_SetContext_id: {
    parameters: {
      path: {
        /** @description The identifier. */
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Sets the Context Cookie to the specified record. Use this to set the Campus Context, Group Context, etc */
  OPTIONSapi_Groups_SetContext_id: {
    parameters: {
      path: {
        /** @description The identifier. */
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Queryable GET endpoint */
  GETapi_GroupTypes: {
    parameters: {
      query?: {
        /** @description Expands related entities inline. */
        $expand?: string;
        /** @description Filters the results, based on a Boolean condition. */
        $filter?: string;
        /** @description Selects which properties to include in the response. */
        $select?: string;
        /** @description Sorts the results. */
        $orderby?: string;
        /** @description Returns only the first n results. */
        $top?: number;
        /** @description Skips the first n results. */
        $skip?: number;
        /** @description Specify 'simple' or 'expanded' to load attributes */
        loadAttributes?: "simple" | "expanded";
        /** @description Specify a comma-delimited list of attribute keys to limit to specific attributes, */
        attributeKeys?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.Model.GroupType"][];
        };
      };
    };
  };
  /** POST endpoint. Use this to add a record */
  POSTapi_GroupTypes: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Rock.Model.GroupType"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** GET endpoint to get a single record */
  GETapi_GroupTypes_id: {
    parameters: {
      query?: {
        /** @description Specify 'simple' or 'expanded' to load attributes */
        loadAttributes?: "simple" | "expanded";
        /** @description Specify a comma-delimited list of attribute keys to limit to specific attributes, */
        attributeKeys?: string;
      };
      path: {
        /** @description The Id of the record */
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.Model.GroupType"];
        };
      };
    };
  };
  /** PUT endpoint. Use this to update a record */
  PUTapi_GroupTypes_id: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Rock.Model.GroupType"];
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: {
        };
      };
    };
  };
  /** DELETE endpoint. To delete the record */
  DELETEapi_GroupTypes_id: {
    parameters: {
      path: {
        /** @description The identifier. */
        id: number;
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: {
        };
      };
    };
  };
  /** PATCH endpoint. Use this to update a subset of the properties of the record */
  PATCHapi_GroupTypes_id: {
    parameters: {
      path: {
        /** @description The identifier. */
        id: number;
      };
    };
    /** @description The values. */
    requestBody: {
      content: {
        "application/json": {
          [key: string]: Record<string, never>;
        };
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: {
        };
      };
    };
  };
  /** POST an attribute value. Use this to set an attribute value for the record */
  POSTapi_GroupTypes_AttributeValue_idattributeKeyattributeKeyattributeValueattributeValue: {
    parameters: {
      query: {
        /** @description The attribute key. */
        attributeKey: string;
        /** @description The attribute value. */
        attributeValue: string;
      };
      path: {
        /** @description The identifier. */
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** DELETE to delete the specified attribute value for the record */
  DELETEapi_GroupTypes_AttributeValue_idattributeKeyattributeKey: {
    parameters: {
      query: {
        /** @description The attribute key. */
        attributeKey: string;
      };
      path: {
        /** @description The identifier. */
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Gets a list of objects represented by the selected data view */
  GETapi_GroupTypes_DataView_id: {
    parameters: {
      query?: {
        /** @description Expands related entities inline. */
        $expand?: string;
        /** @description Filters the results, based on a Boolean condition. */
        $filter?: string;
        /** @description Selects which properties to include in the response. */
        $select?: string;
        /** @description Sorts the results. */
        $orderby?: string;
        /** @description Returns only the first n results. */
        $top?: number;
        /** @description Skips the first n results. */
        $skip?: number;
        /** @description Specify 'simple' or 'expanded' to load attributes */
        loadAttributes?: "simple" | "expanded";
        /** @description Specify a comma-delimited list of attribute keys to limit to specific attributes, */
        attributeKeys?: string;
      };
      path: {
        /** @description The id. */
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.Model.GroupType"][];
        };
      };
    };
  };
  GETapi_GroupTypes_FollowedItemspersonIdpersonIdpersonAliasIdpersonAliasId: {
    parameters: {
      query?: {
        personId?: number;
        personAliasId?: number;
        /** @description Expands related entities inline. */
        $expand?: string;
        /** @description Filters the results, based on a Boolean condition. */
        $filter?: string;
        /** @description Selects which properties to include in the response. */
        $select?: string;
        /** @description Sorts the results. */
        $orderby?: string;
        /** @description Returns only the first n results. */
        $top?: number;
        /** @description Skips the first n results. */
        $skip?: number;
        /** @description Specify 'simple' or 'expanded' to load attributes */
        loadAttributes?: "simple" | "expanded";
        /** @description Specify a comma-delimited list of attribute keys to limit to specific attributes, */
        attributeKeys?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.Model.GroupType"][];
        };
      };
    };
  };
  GETapi_GroupTypes_GetByAttributeValueattributeIdattributeIdattributeKeyattributeKeyvaluevaluecaseSensitivecaseSensitive: {
    parameters: {
      query?: {
        attributeId?: number;
        attributeKey?: string;
        value?: string;
        caseSensitive?: boolean;
        /** @description Expands related entities inline. */
        $expand?: string;
        /** @description Filters the results, based on a Boolean condition. */
        $filter?: string;
        /** @description Selects which properties to include in the response. */
        $select?: string;
        /** @description Sorts the results. */
        $orderby?: string;
        /** @description Returns only the first n results. */
        $top?: number;
        /** @description Skips the first n results. */
        $skip?: number;
        /** @description Specify 'simple' or 'expanded' to load attributes */
        loadAttributes?: "simple" | "expanded";
        /** @description Specify a comma-delimited list of attribute keys to limit to specific attributes, */
        attributeKeys?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.Model.GroupType"][];
        };
      };
    };
  };
  /** Determines if the entity id is in the data view */
  GETapi_GroupTypes_InDataView_dataViewId_entityId: {
    parameters: {
      path: {
        /** @description The data view identifier. */
        dataViewId: number;
        /** @description The entity identifier. */
        entityId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": boolean;
        };
      };
    };
  };
  /** Launches a workflow. And optionally passes the entity with selected id as the entity for the workflow */
  POSTapi_GroupTypes_LaunchWorkflow_idworkflowTypeIdworkflowTypeIdworkflowNameworkflowName: {
    parameters: {
      query: {
        /** @description The workflow type identifier. */
        workflowTypeId: number;
        /** @description Name of the workflow. */
        workflowName: string;
      };
      path: {
        /** @description The Id of the entity to pass to workflow, if entity cannot be loaded workflow will still be launched but without passing an entity */
        id: number;
      };
    };
    /** @description Optional list of workflow values to set. */
    requestBody: {
      content: {
        "application/json": {
          [key: string]: string;
        };
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: {
        };
      };
    };
  };
  /** Sets the Context Cookie to the specified record. Use this to set the Campus Context, Group Context, etc */
  PUTapi_GroupTypes_SetContext_id: {
    parameters: {
      path: {
        /** @description The identifier. */
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Sets the Context Cookie to the specified record. Use this to set the Campus Context, Group Context, etc */
  OPTIONSapi_GroupTypes_SetContext_id: {
    parameters: {
      path: {
        /** @description The identifier. */
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Queryable GET endpoint. Note that records that are marked as Deceased are not included */
  GETapi_People: {
    parameters: {
      query?: {
        /** @description Expands related entities inline. */
        $expand?: string;
        /** @description Filters the results, based on a Boolean condition. */
        $filter?: string;
        /** @description Selects which properties to include in the response. */
        $select?: string;
        /** @description Sorts the results. */
        $orderby?: string;
        /** @description Returns only the first n results. */
        $top?: number;
        /** @description Skips the first n results. */
        $skip?: number;
        /** @description Specify 'simple' or 'expanded' to load attributes */
        loadAttributes?: "simple" | "expanded";
        /** @description Specify a comma-delimited list of attribute keys to limit to specific attributes, */
        attributeKeys?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.Model.Person"][];
        };
      };
    };
  };
  /** Adds a new person and puts them into a new family */
  POSTapi_People: {
    /** @description The person. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Rock.Model.Person"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Queryable GET endpoint with an option to include person records that have been marked as Deceased */
  GETapi_PeoplekeyincludeDeceasedincludeDeceased: {
    parameters: {
      query: {
        /** @description if set to true [include deceased]. */
        includeDeceased: boolean;
        /** @description Expands related entities inline. */
        $expand?: string;
        /** @description Filters the results, based on a Boolean condition. */
        $filter?: string;
        /** @description Selects which properties to include in the response. */
        $select?: string;
        /** @description Sorts the results. */
        $orderby?: string;
        /** @description Returns only the first n results. */
        $top?: number;
        /** @description Skips the first n results. */
        $skip?: number;
        /** @description Specify 'simple' or 'expanded' to load attributes */
        loadAttributes?: "simple" | "expanded";
        /** @description Specify a comma-delimited list of attribute keys to limit to specific attributes, */
        attributeKeys?: string;
      };
      path: {
        key: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.Model.Person"][];
        };
      };
    };
  };
  /** GET endpoint to get a single person record */
  GETapi_People_id: {
    parameters: {
      query?: {
        /** @description Specify 'simple' or 'expanded' to load attributes */
        loadAttributes?: "simple" | "expanded";
        /** @description Specify a comma-delimited list of attribute keys to limit to specific attributes, */
        attributeKeys?: string;
      };
      path: {
        /** @description The Id of the record */
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.Model.Person"];
        };
      };
    };
  };
  /** PUT endpoint. Use this to update a record */
  PUTapi_People_id: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Rock.Model.Person"];
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: {
        };
      };
    };
  };
  /** DELETE endpoint for a Person Record. NOTE: Person records can not be deleted using REST, so this will always return a 405 */
  DELETEapi_People_id: {
    parameters: {
      path: {
        /** @description The identifier. */
        id: number;
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: {
        };
      };
    };
  };
  /** PATCH endpoint. Use this to update a subset of the properties of the record */
  PATCHapi_People_id: {
    parameters: {
      path: {
        /** @description The identifier. */
        id: number;
      };
    };
    /** @description The values. */
    requestBody: {
      content: {
        "application/json": {
          [key: string]: Record<string, never>;
        };
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: {
        };
      };
    };
  };
  /** Adds the existing person to family, optionally removing them from any other families they belong to */
  POSTapi_People_AddExistingPersonToFamilypersonIdpersonIdfamilyIdfamilyIdgroupRoleIdgroupRoleIdremoveFromOtherFamiliesremoveFromOtherFamilies: {
    parameters: {
      query: {
        /** @description The person identifier. */
        personId: number;
        /** @description The family identifier. */
        familyId: number;
        /** @description The group role identifier. */
        groupRoleId: number;
        /** @description if set to true [remove from other families]. */
        removeFromOtherFamilies: boolean;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Adds a new person and adds them to the specified family. */
  POSTapi_People_AddNewPersonToFamily_familyIdgroupRoleIdgroupRoleId: {
    parameters: {
      query: {
        /** @description The group role identifier. */
        groupRoleId: number;
      };
      path: {
        /** @description The family identifier. */
        familyId: number;
      };
    };
    /** @description The person. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Rock.Model.Person"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** POST an attribute value. Use this to set an attribute value for the record */
  POSTapi_People_AttributeValue_idattributeKeyattributeKeyattributeValueattributeValue: {
    parameters: {
      query: {
        /** @description The attribute key. */
        attributeKey: string;
        /** @description The attribute value. */
        attributeValue: string;
      };
      path: {
        /** @description The identifier. */
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** DELETE to delete the specified attribute value for the record */
  DELETEapi_People_AttributeValue_idattributeKeyattributeKey: {
    parameters: {
      query: {
        /** @description The attribute key. */
        attributeKey: string;
      };
      path: {
        /** @description The identifier. */
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Allows setting a configuration for the person for text-to-give. */
  POSTapi_People_ConfigureTextToGive_personId: {
    parameters: {
      path: {
        /** @description The person to configure text-to-give options */
        personId: number;
      };
    };
    /** @description The options to set */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Rock.Rest.Controllers.ConfigureTextToGiveArgs"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Gets a list of objects represented by the selected data view */
  GETapi_People_DataView_id: {
    parameters: {
      query?: {
        /** @description Expands related entities inline. */
        $expand?: string;
        /** @description Filters the results, based on a Boolean condition. */
        $filter?: string;
        /** @description Selects which properties to include in the response. */
        $select?: string;
        /** @description Sorts the results. */
        $orderby?: string;
        /** @description Returns only the first n results. */
        $top?: number;
        /** @description Skips the first n results. */
        $skip?: number;
        /** @description Specify 'simple' or 'expanded' to load attributes */
        loadAttributes?: "simple" | "expanded";
        /** @description Specify a comma-delimited list of attribute keys to limit to specific attributes, */
        attributeKeys?: string;
      };
      path: {
        /** @description The id. */
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.Model.Person"][];
        };
      };
    };
  };
  /** Exports Person Records */
  GETapi_People_ExportpagepagepageSizepageSizesortBysortBysortDirectionsortDirectiondataViewIddataViewIdmodifiedSincemodifiedSinceattributeKeysattributeKeysattributeReturnTypeattributeReturnType: {
    parameters: {
      query?: {
        /** @description The page being requested (where first page is 1). */
        page?: number;
        /** @description The number of records to provide per page. NOTE: This is limited to the 'API Max Items Per Page' global attribute. */
        pageSize?: number;
        /** @description Optional field to sort by. This must be a mapped property on the Person model. */
        sortBy?: string;
        /** @description The sort direction (1 = Ascending, 0 = Descending). Default is 1 (Ascending). */
        sortDirection?: "Ascending" | "Descending";
        /** @description The optional data view to use for filtering. */
        dataViewId?: number;
        /** @description The optional date/time to filter to only get newly updated items. */
        modifiedSince?: string;
        /** @description Optional comma-delimited list of attribute keys for the attribute values that should be included with each exported record, or specify 'all' to include all attributes. */
        attributeKeys?: string;
        /** @description Raw/Formatted (default is Raw) */
        attributeReturnType?: "Raw" | "Formatted";
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.BulkExport.PeopleExport"];
        };
      };
    };
  };
  GETapi_People_FollowedItemspersonIdpersonIdpersonAliasIdpersonAliasId: {
    parameters: {
      query?: {
        personId?: number;
        personAliasId?: number;
        /** @description Expands related entities inline. */
        $expand?: string;
        /** @description Filters the results, based on a Boolean condition. */
        $filter?: string;
        /** @description Selects which properties to include in the response. */
        $select?: string;
        /** @description Sorts the results. */
        $orderby?: string;
        /** @description Returns only the first n results. */
        $top?: number;
        /** @description Skips the first n results. */
        $skip?: number;
        /** @description Specify 'simple' or 'expanded' to load attributes */
        loadAttributes?: "simple" | "expanded";
        /** @description Specify a comma-delimited list of attribute keys to limit to specific attributes, */
        attributeKeys?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.Model.Person"][];
        };
      };
    };
  };
  /** Gets the currently logged in <see cref="T:Rock.Model.Person">person's</see> user preference for the specified block */
  GETapi_People_GetBlockUserPreferenceblockIdblockIduserPreferenceKeyuserPreferenceKey: {
    parameters: {
      query: {
        /** @description The block identifier. */
        blockId: number;
        /** @description The user preference key. */
        userPreferenceKey: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /** Gets the currently logged in <see cref="T:Rock.Model.Person">person's</see> user preference for the specified block */
  GETapi_People_GetBlockUserPreference_blockGuiduserPreferenceKeyuserPreferenceKey: {
    parameters: {
      query: {
        /** @description The user preference key. */
        userPreferenceKey: string;
      };
      path: {
        /** @description The block identifier. */
        blockGuid: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  GETapi_People_GetByAttributeValueattributeIdattributeIdattributeKeyattributeKeyvaluevaluecaseSensitivecaseSensitive: {
    parameters: {
      query?: {
        attributeId?: number;
        attributeKey?: string;
        value?: string;
        caseSensitive?: boolean;
        /** @description Expands related entities inline. */
        $expand?: string;
        /** @description Filters the results, based on a Boolean condition. */
        $filter?: string;
        /** @description Selects which properties to include in the response. */
        $select?: string;
        /** @description Sorts the results. */
        $orderby?: string;
        /** @description Returns only the first n results. */
        $top?: number;
        /** @description Skips the first n results. */
        $skip?: number;
        /** @description Specify 'simple' or 'expanded' to load attributes */
        loadAttributes?: "simple" | "expanded";
        /** @description Specify a comma-delimited list of attribute keys to limit to specific attributes, */
        attributeKeys?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.Model.Person"][];
        };
      };
    };
  };
  /** Searches the person records based on the specified email address */
  GETapi_People_GetByEmailemailemail: {
    parameters: {
      query: {
        /** @description The email. */
        email: string;
        /** @description Expands related entities inline. */
        $expand?: string;
        /** @description Filters the results, based on a Boolean condition. */
        $filter?: string;
        /** @description Selects which properties to include in the response. */
        $select?: string;
        /** @description Sorts the results. */
        $orderby?: string;
        /** @description Returns only the first n results. */
        $top?: number;
        /** @description Skips the first n results. */
        $skip?: number;
        /** @description Specify 'simple' or 'expanded' to load attributes */
        loadAttributes?: "simple" | "expanded";
        /** @description Specify a comma-delimited list of attribute keys to limit to specific attributes, */
        attributeKeys?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.Model.Person"][];
        };
      };
    };
  };
  /** Searches the person records based on the specified email address */
  GETapi_People_GetByEmail_email: {
    parameters: {
      query?: {
        /** @description Expands related entities inline. */
        $expand?: string;
        /** @description Filters the results, based on a Boolean condition. */
        $filter?: string;
        /** @description Selects which properties to include in the response. */
        $select?: string;
        /** @description Sorts the results. */
        $orderby?: string;
        /** @description Returns only the first n results. */
        $top?: number;
        /** @description Skips the first n results. */
        $skip?: number;
        /** @description Specify 'simple' or 'expanded' to load attributes */
        loadAttributes?: "simple" | "expanded";
        /** @description Specify a comma-delimited list of attribute keys to limit to specific attributes, */
        attributeKeys?: string;
      };
      path: {
        /** @description The email. */
        email: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.Model.Person"][];
        };
      };
    };
  };
  /** GET the Person by person alias identifier. */
  GETapi_People_GetByPersonAliasId_personAliasId: {
    parameters: {
      query?: {
        /** @description Specify 'simple' or 'expanded' to load attributes */
        loadAttributes?: "simple" | "expanded";
        /** @description Specify a comma-delimited list of attribute keys to limit to specific attributes, */
        attributeKeys?: string;
      };
      path: {
        /** @description The person alias identifier. */
        personAliasId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.Model.Person"];
        };
      };
    };
  };
  /** Searches the person records based on the specified phone number. NOTE that partial matches are included */
  GETapi_People_GetByPhoneNumber_number: {
    parameters: {
      query?: {
        /** @description Expands related entities inline. */
        $expand?: string;
        /** @description Filters the results, based on a Boolean condition. */
        $filter?: string;
        /** @description Selects which properties to include in the response. */
        $select?: string;
        /** @description Sorts the results. */
        $orderby?: string;
        /** @description Returns only the first n results. */
        $top?: number;
        /** @description Skips the first n results. */
        $skip?: number;
        /** @description Specify 'simple' or 'expanded' to load attributes */
        loadAttributes?: "simple" | "expanded";
        /** @description Specify a comma-delimited list of attribute keys to limit to specific attributes, */
        attributeKeys?: string;
      };
      path: {
        /** @description The phone number. */
        number: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.Model.Person"][];
        };
      };
    };
  };
  /** GET a person record based on a temporary person token and increment the usage count of the token */
  GETapi_People_GetByToken_token: {
    parameters: {
      query?: {
        /** @description Specify 'simple' or 'expanded' to load attributes */
        loadAttributes?: "simple" | "expanded";
        /** @description Specify a comma-delimited list of attribute keys to limit to specific attributes, */
        attributeKeys?: string;
      };
      path: {
        /** @description The token. */
        token: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.Model.Person"];
        };
      };
    };
  };
  /** GET a person record based on the specified username */
  GETapi_People_GetByUserName_username: {
    parameters: {
      query?: {
        /** @description Specify 'simple' or 'expanded' to load attributes */
        loadAttributes?: "simple" | "expanded";
        /** @description Specify a comma-delimited list of attribute keys to limit to specific attributes, */
        attributeKeys?: string;
      };
      path: {
        /** @description The username. */
        username: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.Model.Person"];
        };
      };
    };
  };
  /** Gets the currently authenticated person */
  GETapi_People_GetCurrentPerson: {
    parameters: {
      query?: {
        /** @description Specify 'simple' or 'expanded' to load attributes */
        loadAttributes?: "simple" | "expanded";
        /** @description Specify a comma-delimited list of attribute keys to limit to specific attributes, */
        attributeKeys?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.Model.Person"];
        };
      };
    };
  };
  /**
   * Gets the current person's impersonation token. This is used by external apps who might have a logged in person but
   * need to create a impersonation token to link to the website. For instance a mobile app might have the current person
   * and have a cookie, but would like to link out to the website.
   */
  GETapi_People_GetCurrentPersonImpersonationTokenexpireDateTimeexpireDateTimeusageLimitusageLimitpageIdpageId: {
    parameters: {
      query?: {
        /** @description The expire date time. */
        expireDateTime?: string;
        /** @description The usage limit. */
        usageLimit?: number;
        /** @description The page identifier. */
        pageId?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /** Gets the graduation year based on the provided GradeOffset */
  GETapi_People_GetGraduationYear_gradeOffset: {
    parameters: {
      path: {
        /** @description The grade offset for the person. */
        gradeOffset: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": number;
        };
      };
    };
  };
  /**
   * Creates and stores a new PersonToken for a person using the specified ExpireDateTime, UsageLimit, and Page
   * Returns the encrypted URLEncoded Token along with the ImpersonationParameter key in the form of "rckipid={ImpersonationParameter}"
   */
  GETapi_People_GetImpersonationParameterpersonIdpersonIdexpireDateTimeexpireDateTimeusageLimitusageLimitpageIdpageId: {
    parameters: {
      query: {
        /** @description The person identifier. */
        personId: number;
        /** @description The expire date time. */
        expireDateTime?: string;
        /** @description The usage limit. */
        usageLimit?: number;
        /** @description The page identifier. */
        pageId?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /** Gets the count of interactions over several timeframes for the current or specified person. */
  GETapi_People_GetInteractionStatistics_personIddatedateinteractionChannelIdinteractionChannelIdinteractionComponentIdinteractionComponentIdinteractionChannelGuidinteractionChannelGuidinteractionComponentGuidinteractionComponentGuid: {
    parameters: {
      query?: {
        /** @description The date. Optional. This defaults to today. */
        date?: string;
        /** @description The interaction channel identifier. Optional filter. */
        interactionChannelId?: number;
        /** @description The interaction component identifier. Optional filter. */
        interactionComponentId?: number;
        /** @description The interaction channel unique identifier. Optional filter. */
        interactionChannelGuid?: string;
        /** @description The interaction component unique identifier. Optional filter. */
        interactionComponentGuid?: string;
      };
      path: {
        /** @description The person identifier. Optional. This defaults to the currently authenticated person. */
        personId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.Rest.Controllers.PersonInteractionStatistics"];
        };
      };
    };
  };
  /**
   * Gets a list of people's names, email, gender and birthdate, to see if there are potential duplicates.
   * For example, you might want to use this during account creation to warn that the person might already have an account.
   */
  GETapi_People_GetPotentialDuplicateslastNamelastNameemailAddressemailAddress: {
    parameters: {
      query: {
        /** @description The last name. */
        lastName: string;
        /** @description The email address. */
        emailAddress: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.Rest.Controllers.PeopleController.DuplicatePersonInfo"][];
        };
      };
    };
  };
  /** Gets the search details (for the person picker) */
  GETapi_People_GetSearchDetailsidid: {
    parameters: {
      query: {
        /** @description The identifier. */
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /**
   * Gets the currently logged in <see cref="T:Rock.Model.Person">person's</see> user preference.
   * Note: If the user preference is for a specific block, use ~/api/People/GetBlockUserPreference instead.
   */
  GETapi_People_GetUserPreferenceuserPreferenceKeyuserPreferenceKey: {
    parameters: {
      query: {
        /** @description The user preference key. */
        userPreferenceKey: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /** Determines if the entity id is in the data view */
  GETapi_People_InDataView_dataViewId_entityId: {
    parameters: {
      path: {
        /** @description The data view identifier. */
        dataViewId: number;
        /** @description The entity identifier. */
        entityId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": boolean;
        };
      };
    };
  };
  /** Launches a workflow. And optionally passes the entity with selected id as the entity for the workflow */
  POSTapi_People_LaunchWorkflow_idworkflowTypeIdworkflowTypeIdworkflowNameworkflowName: {
    parameters: {
      query: {
        /** @description The workflow type identifier. */
        workflowTypeId: number;
        /** @description Name of the workflow. */
        workflowName: string;
      };
      path: {
        /** @description The Id of the entity to pass to workflow, if entity cannot be loaded workflow will still be launched but without passing an entity */
        id: number;
      };
    };
    /** @description Optional list of workflow values to set. */
    requestBody: {
      content: {
        "application/json": {
          [key: string]: string;
        };
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: {
        };
      };
    };
  };
  /** Gets the popup html for the selected person */
  GETapi_People_PopupHtml_personId: {
    parameters: {
      path: {
        /** @description The person id. */
        personId: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.Rest.Controllers.PersonSearchResult"];
        };
      };
    };
  };
  /** Gets the popup html for the selected person */
  GETapi_People_PopupHtml_personId_emailAsLink: {
    parameters: {
      path: {
        /** @description The person id. */
        personId: number;
        /** @description Determines if the email address should be formatted as a link. */
        emailAsLink: boolean;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.Rest.Controllers.PersonSearchResult"];
        };
      };
    };
  };
  /** Returns results to the Person Picker */
  GETapi_People_SearchnamenameincludeDetailsincludeDetailsincludeBusinessesincludeBusinessesincludeDeceasedincludeDeceasedaddressaddressphonephoneemailemail: {
    parameters: {
      query?: {
        /** @description The search parameter for the person's name. */
        name?: string;
        /** @description Set to true details will be included instead of lazy loaded. */
        includeDetails?: boolean;
        /** @description Set to true to also search businesses. */
        includeBusinesses?: boolean;
        /** @description Set to true to include deceased people. */
        includeDeceased?: boolean;
        /** @description The search parameter for the person's address. */
        address?: string;
        /** @description The search parameter for the person's phone. */
        phone?: string;
        /** @description The search parameter for the person's name email. */
        email?: string;
        /** @description Expands related entities inline. */
        $expand?: string;
        /** @description Filters the results, based on a Boolean condition. */
        $filter?: string;
        /** @description Selects which properties to include in the response. */
        $select?: string;
        /** @description Sorts the results. */
        $orderby?: string;
        /** @description Returns only the first n results. */
        $top?: number;
        /** @description Skips the first n results. */
        $skip?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Rock.Rest.Controllers.PersonSearchResult"][];
        };
      };
    };
  };
  /** Saves the currently logged in <see cref="T:Rock.Model.Person">person's</see> user preference for the specified block */
  POSTapi_People_SetBlockUserPreferenceblockIdblockIduserPreferenceKeyuserPreferenceKeyvaluevalue: {
    parameters: {
      query: {
        /** @description The block identifier. */
        blockId: number;
        /** @description The user preference key. */
        userPreferenceKey: string;
        /** @description The value. */
        value: string;
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: {
        };
      };
    };
  };
  /** Saves the currently logged in <see cref="T:Rock.Model.Person">person's</see> user preference for the specified block */
  POSTapi_People_SetBlockUserPreference_blockGuiduserPreferenceKeyuserPreferenceKeyvaluevalue: {
    parameters: {
      query: {
        /** @description The user preference key. */
        userPreferenceKey: string;
        /** @description The value. */
        value: string;
      };
      path: {
        /** @description The block identifier. */
        blockGuid: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Sets the Context Cookie to the specified record. Use this to set the Campus Context, Group Context, etc */
  PUTapi_People_SetContext_id: {
    parameters: {
      path: {
        /** @description The identifier. */
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Sets the Context Cookie to the specified record. Use this to set the Campus Context, Group Context, etc */
  OPTIONSapi_People_SetContext_id: {
    parameters: {
      path: {
        /** @description The identifier. */
        id: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /**
   * Saves the currently logged in <see cref="T:Rock.Model.Person">person's</see> user preference.
   * Note: If the user preference is for a specific block, use ~/api/People/SetBlockUserPreference instead.
   */
  POSTapi_People_SetUserPreferenceuserPreferenceKeyuserPreferenceKeyvaluevalue: {
    parameters: {
      query: {
        /** @description The user preference key. */
        userPreferenceKey: string;
        /** @description The value. */
        value: string;
      };
    };
    responses: {
      /** @description No Content */
      204: {
        content: {
        };
      };
    };
  };
  /** Updates the profile photo of the logged in person. */
  POSTapi_People_UpdateProfilePhotofilenamefilename: {
    parameters: {
      query: {
        /** @description The filename. */
        filename: string;
      };
    };
    /** @description The photo bytes. */
    requestBody: {
      content: {
        "application/json": string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Returns VCard for person. */
  GETapi_People_VCard_personGuid: {
    parameters: {
      path: {
        /** @description The person Guid. */
        personGuid: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
}
